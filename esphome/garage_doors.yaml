# maybe one day we'll do this (this was my first esphome project, so i didn't know it too well at the time)
# https://esphome.io/components/cover/

substitutions:
  device_name_upper: "Garage Doors"
  device_name_lower: "garage_doors"

esphome:
  name: garage-doors
  platform: ESP32
  board: esp32doit-devkit-v1

wifi:
  power_save_mode: none
  manual_ip:
    static_ip: 192.168.0.12
    gateway: !secret gateway
    subnet: !secret subnet
  networks:
    - ssid: !secret wifi_ssid
      password: !secret wifi_password
  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "${device_name_upper} Fallback Hotspot"
    password: !secret fallback_ap_password

<<: !include common.yaml

# https://esphome.io/components/binary_sensor/gpio.html
binary_sensor:
  - platform: gpio
    id: ${device_name_lower}_rhs_status
    name: "${device_name_upper} RHS Status"
    device_class: garage_door
    pin:
      number: 32
      mode: INPUT_PULLUP
      inverted: True
    filters:
      - delayed_on: 1000ms
      - delayed_off: 1000ms
  - platform: gpio
    id: ${device_name_lower}_lhs_status
    name: "${device_name_upper} LHS Status"
    device_class: garage_door
    pin:
      number: 35
      # WARNING: no internal pull-up: must add this as part of the circuit
      inverted: True
    filters:
      - delayed_on: 1000ms
      - delayed_off: 1000ms
  # 100cm / 1m
  # true => occupied; false => empty
  - platform: template
    name: "${device_name_upper} LHS Occupied"
    lambda: |-
      if (id(${device_name_lower}_lhs_ultrasonic_sensor).state < 1) {
        return true;
      } else {
        return false;
      }
  - platform: template
    name: "${device_name_upper} RHS Occupied"
    lambda: |-
      if (id(${device_name_lower}_rhs_ultrasonic_sensor).state < 1) {
        return true;
      } else {
        return false;
      }

# https://esphome.io/components/switch/gpio.html
switch:
  - platform: gpio
    id: ${device_name_lower}_rhs_control
    name: "${device_name_upper} RHS Control"
    pin: 12
    restore_mode: ALWAYS_OFF
  - platform: template
    id: ${device_name_lower}_rhs_remote
    name: "${device_name_upper} RHS Remote"
    icon: "mdi:remote"
    restore_mode: DISABLED
    turn_on_action:
      - switch.turn_on: ${device_name_lower}_rhs_control
      - delay: 500ms
      - switch.turn_off: ${device_name_lower}_rhs_control
  - platform: gpio
    id: ${device_name_lower}_lhs_control
    name: "${device_name_upper} LHS Control"
    pin: 14
    restore_mode: ALWAYS_OFF
  - platform: template
    id: ${device_name_lower}_lhs_remote
    name: "${device_name_upper} LHS Remote"
    icon: "mdi:remote"
    restore_mode: DISABLED
    turn_on_action:
      - switch.turn_on: ${device_name_lower}_lhs_control
      - delay: 500ms
      - switch.turn_off: ${device_name_lower}_lhs_control
  - platform: restart
    id: ${device_name_lower}_restart
    name: "${device_name_upper} Restart"

sensor:
  - platform: ultrasonic
    id: ${device_name_lower}_lhs_ultrasonic_sensor
    name: "${device_name_upper} LHS Ultrasonic Sensor"
    icon: "mdi:contactless-payment"
    trigger_pin: 26
    echo_pin: 27
    update_interval: 60s
    # https://github.com/esphome/issues/issues/3378
    filters:
      - lambda: if (isnan(x)) { return 99; } return x;
  - platform: ultrasonic
    id: ${device_name_lower}_rhs_ultrasonic_sensor
    name: "${device_name_upper} RHS Ultrasonic Sensor"
    icon: "mdi:contactless-payment"
    trigger_pin: 33
    echo_pin: 25
    update_interval: 60s
    filters:
      - lambda: if (isnan(x)) { return 99; } return x;
  - platform: internal_temperature
    id: ${device_name_lower}__device_temperature
    name: "${device_name_upper} Device Temperature"
