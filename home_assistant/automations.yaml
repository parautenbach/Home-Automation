- alias: "Set Light Theme"
  trigger:
    - platform: homeassistant
      event: start
    - platform: sun
      event: sunrise
  condition:
    - condition: sun
      after: sunrise
  action:
    service: frontend.set_theme
    data:
      name: custom-light-mode

- alias: "Set Dark Theme"
  trigger:
    - platform: homeassistant
      event: start
    - platform: sun
      event: sunset
  condition:
    - condition: sun
      after: sunset
  action:
    service: frontend.set_theme
    data:
      name: slate

- alias: "Take Motion Snapshots"
  initial_state: false
  trigger:
    platform: state
    entity_id: binary_sensor.motion_sensor_2
    to: "on"
  action:
    - service: script.turn_on
      entity_id: script.security_camera_create_snapshot

- alias: "Motion Detected Last"
  initial_state: true
  trigger:
    platform: state
    entity_id: binary_sensor.motion_sensor_2
    to: "on"
  action:
    - service: input_datetime.set_datetime
      entity_id: input_datetime.motion_detected_last
      data:
        datetime: "{{ now() }}"

- alias: "Switch On Living Room Lamp if Motion is Detected"
  # only at night though
  initial_state: false
  trigger:
    platform: state
    entity_id: binary_sensor.motion_sensor_2
    to: "on"
  condition:
    # use or, because, you can't be after sunset AND before sunrise ON THE SAME DAY
    - condition: or
      conditions:
        - condition: sun
          after: sunset
          after_offset: "-02:00:00"
        - condition: sun
          before: sunrise
          before_offset: "-00:30:00"
  action:
    - service: switch.turn_on
      entity_id: switch.living_room_lamp
    - service: timer.start
      data:
        entity_id: timer.motion_timer
        duration: "00:05:00"

- alias: "Switch Off Living Room Lamp When Timer Expires"
  initial_state: true
  trigger:
    platform: event
    event_type: timer.finished
    event_data:
      entity_id: timer.motion_timer
  action:
    - service: switch.turn_off
      entity_id: switch.living_room_lamp

- alias: "Motion Indicator On"
  initial_state: true
  trigger:
    platform: state
    entity_id: binary_sensor.motion_detected
    to: "on"
  action:
    - service: light.turn_on
      entity_id: light.led

- alias: "Motion Indicator Off"
  initial_state: true
  trigger:
    platform: state
    entity_id: binary_sensor.motion_detected
    to: "off"
  action:
    - service: light.turn_off
      entity_id: light.led

- alias: "Blink Motion Indicator While Recording"
  initial_state: true
  trigger:
    platform: state
    entity_id: script.security_camera_record_clip
    to: "on"
  mode: single
  action:
    # stop motion indicator
    - service: automation.turn_off
      entity_id: automation.motion_indicator_on
    # blink
    - repeat:
        sequence:
          - service: light.turn_on
            entity_id: light.led
          - delay:
              milliseconds: 500
          - service: light.turn_off
            entity_id: light.led
          - delay:
              milliseconds: 500
        until:
          - condition: state
            entity_id: script.security_camera_record_clip
            state: "off"
    # resume motion indicator
    - service: automation.turn_on
      entity_id: automation.motion_indicator_on

- alias: "Living Room Lamp Auto On Upon Sunset or Arrival"
  initial_state: true
  trigger:
    # https://www.home-assistant.io/cookbook/automation_sun/
    - platform: sun
      event: sunset
      offset: "-01:00:00"
    - platform: state
      entity_id: binary_sensor.anybody_home
      to: "on"
  condition:
    - condition: state
      entity_id: binary_sensor.anybody_home
      state: "on"
    # use or, because, you can't be after sunset AND before sunrise ON THE SAME DAY
    - condition: or
      conditions:
        - condition: sun
          after: sunset
          after_offset: "-01:00:00"
        - condition: sun
          before: sunrise
          before_offset: "-01:00:00"
  action:
    - service: switch.turn_on
      entity_id: switch.living_room_lamp

- alias: "Bedlamps Auto On Upon Sunset or Arrival"
  initial_state: true
  trigger:
    - platform: sun
      event: sunset
      offset: "-00:30:00"
    - platform: state
      entity_id: binary_sensor.pieter_present
      to: "on"
    - platform: state
      entity_id: binary_sensor.rouve_present
      to: "on"
  mode: single
  condition:
    - condition: or
      conditions:
        - condition: state
          entity_id: binary_sensor.pieter_present
          state: "on"
        - condition: state
          entity_id: binary_sensor.rouve_present
          state: "on"
    # use or, because, you can't be after sunset AND before sunrise ON THE SAME DAY
    - condition: or
      conditions:
        - condition: sun
          after: sunset
          after_offset: "-00:30:00"
        - condition: sun
          before: sunrise
  action:
    - service: homeassistant.turn_on
      entity_id: group.main_bedroom

- alias: "Lights On Upon Low Light"
  initial_state: true
  trigger:
    # - platform: numeric_state
    #   entity_id: sensor.sun_illuminance
    #   below: 15320.0
    #   above: 0.0
    - platform: template
      value_template: "{{ states('sensor.sun_illuminance') | int < 15320 }}"
  condition:
    - condition: state
      entity_id: binary_sensor.anybody_home
      state: "on"
    - condition: time
      after: "16:00:00"
      before: "21:00:00"
    - condition: state
      entity_id: switch.living_room_lamp
      state: "off"
  action:
    - service: switch.turn_on
      entity_id: switch.living_room_lamp

- alias: "Bedlamps On Upon Low Light"
  initial_state: true
  trigger:
    - platform: template
      # todo: make binary sensor
      value_template: "{{ states('sensor.sun_illuminance') | int < 15320 }}"
  condition:
    - condition: time
      after: "16:00:00"
      before: "21:00:00"
    - condition: or
      conditions:
        - condition: state
          entity_id: binary_sensor.pieter_present
          state: "on"
        - condition: state
          entity_id: binary_sensor.rouve_present
          state: "on"
  action:
    - service: homeassistant.turn_on
      entity_id: group.main_bedroom

- alias: "Lights Off After Sunrise"
  # todo: use illuminance
  initial_state: true
  trigger:
    - platform: sun
      event: sunrise
      offset: "01:30:00"
  # todo: if anybody home?
  condition:
    - condition: sun
      after: sunrise
      after_offset: "01:30:00"
  action:
    - service: homeassistant.turn_off
      entity_id: group.main_bedroom
    - service: switch.turn_off
      entity_id: switch.living_room_lamp

- alias: "Away Mode"
  initial_state: true
  trigger:
    platform: state
    entity_id: binary_sensor.anybody_home
    to: "off"
  condition:
    - condition: state
      entity_id: binary_sensor.anybody_home
      state: "off"
  action:
    - service: light.turn_off
      entity_id: all
    - service: script.turn_on
      entity_id: script.entertainment_off
    - service: automation.turn_on
      entity_id: automation.take_motion_snapshots
    - service: automation.turn_on
      entity_id: automation.switch_on_living_room_lamp_if_motion_is_detected

- alias: "Home Mode"
  trigger:
    platform: state
    entity_id: binary_sensor.anybody_home
    to: "on"
  condition:
    - condition: state
      entity_id: binary_sensor.anybody_home
      state: "on"
  action:
    - service: automation.turn_off
      entity_id: automation.take_motion_snapshots
    - service: automation.turn_off
      entity_id: automation.switch_on_living_room_lamp_if_motion_is_detected

- alias: "Switch On The Front Door Light When Arriving Home"
  trigger:
    # when either of us arrive home, irrespective of whether anybody is home
    - platform: state
      entity_id:
        - binary_sensor.pieter_present
        - binary_sensor.rouve_present
      to: "on"
  mode: single
  condition:
    - condition: or
      conditions:
        - condition: sun
          after: sunset
        - condition: sun
          before: sunrise
  action:
    - service: light.turn_on
      entity_id: light.front_door_light
    - service: timer.start
      data:
        entity_id: timer.front_door_light_timer
        duration: "00:03:00"

- alias: "Switch Off Front Door Light When Timer Expires"
  initial_state: true
  trigger:
    platform: event
    event_type: timer.finished
    event_data:
      entity_id: timer.front_door_light_timer
  action:
    - service: light.turn_off
      entity_id: light.front_door_light

- alias: "Open The Gate When Arriving Home"
  trigger:
    - platform: state
      entity_id: binary_sensor.pieter_present
      to: "on"
  mode: single
  condition:
    - condition: and
      conditions:
        - condition: state
          entity_id: cover.main_gate
          state: "closed"
          for:
            minutes: 5
        - condition: time
          after: "07:00:00"
          before: "23:00:00"
  action:
    - service: cover.open_cover
      entity_id: cover.main_gate

- alias: "Stop Front Door Light Timer If Running When Switched Off"
  initial_state: true
  trigger:
    platform: state
    entity_id: light.front_door_light
    to: "off"
  condition:
    - condition: state
      entity_id: timer.front_door_light_timer
      state: "active"
  action:
    - service: timer.cancel
      entity_id: timer.front_door_light_timer

# open garage door when arriving home:
# when moving above a certain (last) speed (so i'm driving, not cycling or otherwise, or getting transported in some other way)
#   - the above now done with an ios activity sensor
# and connected to my car's bluetooth (thus, open my garage door only for my car)
#   - because ios prompts you to run the automation to set the input boolean, it's not useful; installing ultrasonic sensors to track which door to open
#   - check for one or both to open (edge case)
# and rouve/someone is home (proxy for the alarm being off)
# https://www.home-assistant.io/integrations/proximity/
# https://www.home-assistant.io/docs/configuration/templating/ (distance function)
# https://companion.home-assistant.io/docs/core/sensors/
- alias: "Open Garage Door When Arriving By Car"
  initial_state: true
  trigger:
    - platform: state
      entity_id: binary_sensor.pieter_present
      to: "on"
  condition:
    - condition: and
      conditions:
        - condition: state
          entity_id: cover.rhs_garage_door
          state: "closed"
        - condition: time
          after: "07:00:00"
          before: "23:00:00"
        # i must be arriving by car
        - condition: state
          entity_id: binary_sensor.pieter_driving
          state: "on"
        # my cover for my car
        - condition: state
          entity_id: binary_sensor.rhs_garage_occupied
          state: "off"
        # proxy for the alarm being off
        - condition: state
          entity_id: binary_sensor.rouve_present
          state: "on"
          for:
            minutes: 5
  action:
    - service: cover.open_cover
      entity_id: cover.rhs_garage_door

- alias: "Check Disk Space on the Home Assistant server"
  trigger:
    - platform: time_pattern
      hours: "*"
      minutes: 0
      seconds: 0
  condition:
    - condition: numeric_state
      entity_id: sensor.disk_use_percent
      above: 90
  action:
    - service: notify.mobile_app_ceres
      data:
        title: "System"
        message: "Server disk usage is {{ states('sensor.disk_use_percent') }}%!"
        data:
          push:
            thread-id: "system-disk-space"

- alias: "Contractor Mode Enabled Alert"
  trigger:
    - platform: state
      entity_id: switch.contractor_mode
      to: "on"
  action:
    - service: notify.mobile_app_ceres
      data:
        title: "Special Mode"
        message: "Contractor mode enabled."
        data:
          push:
            category: "contractor_mode_enabled"

- alias: "Contractor Mode Disabled Alert"
  trigger:
    - platform: state
      entity_id: switch.contractor_mode
      to: "off"
  action:
    - service: notify.mobile_app_ceres
      data:
        title: "Special Mode"
        message: "Contractor mode disabled."
        data:
          push:
            category: "contractor_mode_disabled"

- alias: "Enable Contractor Mode"
  trigger:
    - platform: time
      at: "07:00:00"
  condition:
    - condition: time
      after: "07:00:00"
      weekday:
        - wed
  action:
    - service: switch.turn_on
      entity_id: switch.contractor_mode

- alias: "Disable Contractor Mode"
  trigger:
    - platform: time
      at: "16:00:00"
  condition:
    - condition: time
      after: "16:00:00"
      weekday:
        - wed
  action:
    - service: switch.turn_off
      entity_id: switch.contractor_mode

- alias: "Contractor Mode Still Enabled Alert"
  trigger:
    - platform: time_pattern
      hours: "*"
      minutes: 0
      seconds: 0
  condition:
    - condition: and
      conditions:
        - condition: state
          entity_id: switch.contractor_mode
          state: "on"
        - condition: time
          after: "17:00:00"
          before: "21:00:00"
  action:
    - service: notify.mobile_app_ceres
      data:
        title: "Special Mode"
        message: "Contractor mode is still enabled."
        data:
          push:
            category: "contractor_mode_still_enabled_alert"

- alias: "Disable Contractor Mode From Alert Action"
  trigger:
    - platform: event
      event_type: ios.notification_action_fired
      event_data:
        actionName: DISABLE_CONTRACTOR_MODE
  action:
    - service: switch.turn_off
      entity_id: switch.contractor_mode

- alias: "Enable Contractor Mode From Alert Action"
  trigger:
    - platform: event
      event_type: ios.notification_action_fired
      event_data:
        actionName: ENABLE_CONTRACTOR_MODE
  action:
    - service: switch.turn_on
      entity_id: switch.contractor_mode

# https://community.home-assistant.io/t/snmp-bandwidth-monitor/7122
- alias: "Monitor Inbound Internet Traffic"
  trigger:
    platform: state
    entity_id: sensor.snmp_wan_in
  action:
    - service: input_number.set_value
      data:
        entity_id: input_number.wan_traffic_delta_in
        value: '{{ ((trigger.to_state.state | int - trigger.from_state.state | int) * 8 ) / ( as_timestamp(trigger.to_state.last_updated) - as_timestamp(trigger.from_state.last_updated) ) }}'

- alias: "Monitor Outbound Internet Traffic"
  trigger:
    platform: state
    entity_id: sensor.snmp_wan_out
  action:
    - service: input_number.set_value
      data:
        entity_id: input_number.wan_traffic_delta_out
        value: '{{ ((trigger.to_state.state | int - trigger.from_state.state | int) * 8 ) / ( as_timestamp(trigger.to_state.last_updated) - as_timestamp(trigger.from_state.last_updated) ) }}'

- alias: "Notify Pieter Going Home from Work in Cape Town"
  trigger:
    platform: zone
    entity_id: person.pieter_rautenbach
    zone: zone.pieter_work_cape_town
    event: leave
  condition:
    - condition: time
      after: "16:00:00"
      weekday:
        - mon
        - tue
        - wed
        - thu
        - fri
  action:
    - service: script.turn_on
      entity_id: script.send_pieter_work_cape_town_to_home_eta

- alias: "Start Cover Timer When Opened"
  initial_state: true
  trigger:
    platform: state
    entity_id:
      - cover.main_gate
      - cover.lhs_garage_door
      - cover.rhs_garage_door
    to: "open"
  mode: queued
  action:
    - service: timer.start
      data:
        entity_id: "timer.{{ trigger.entity_id | replace('cover.', '') }}_timer"
        duration: "00:03:00"

- alias: "Cover Left Open Alert"
  initial_state: true
  trigger:
    - platform: event
      event_type: timer.finished
      event_data:
        entity_id: timer.main_gate_timer
    - platform: event
      event_type: timer.finished
      event_data:
        entity_id: timer.lhs_garage_door_timer
    - platform: event
      event_type: timer.finished
      event_data:
        entity_id: timer.rhs_garage_door_timer
  condition:
    - condition: or
      conditions:
        - condition: state
          entity_id: cover.main_gate
          state: "open"
        - condition: state
          entity_id: cover.lhs_garage_door
          state: "open"
        - condition: state
          entity_id: cover.rhs_garage_door
          state: "open"
  action:
    # https://companion.home-assistant.io/docs/notifications/critical-notifications/
    - service: notify.mobile_app_ceres
      data:
        title: "Security"
        # timer.rhs_garage_door_timer -> Pieter's garage door
        message: >-
          {% set name = None %}
          {% if trigger.event.data.entity_id | regex_search("lhs", ignorecase=True) %}
            {% set name = "Rouvé's garage door" %}
          {% elif trigger.event.data.entity_id | regex_search("rhs", ignorecase=True) %}
            {% set name = "Pieter's garage door" %}
          {% else %}
            {% set name = "The main gate" %}
          {% endif %}
          {% set cover_entity = trigger.event.data.entity_id | replace('_timer', '') | replace('timer.', '') %}
          {% set cover_last_changed = states["cover"][cover_entity].last_changed %}
          {{ name }} has been left open for {{ ((as_timestamp(utcnow()) - as_timestamp(cover_last_changed) + 5) // 60) | int }} min.
        data:
          # todo: clear notifications when closed
          # https://github.com/home-assistant/iOS/issues/579
          # https://github.com/home-assistant/iOS/issues/215
          # https://companion.home-assistant.io/docs/notifications/notifications-basic (to clear and/or replace; note the quotes around 'apns-collapse-id')
          # https://developer.apple.com/documentation/usernotifications/unnotificationrequest/1649634-identifier
          apns_headers:
            # group notifications by the timer entity
            'apns-collapse-id': "{{ trigger.event.data.entity_id }}"
          push:
            category: "cover_open"
          action_data:
            # convert this to the cover entity to use in the automation that receives this
            cover_id: "{{ trigger.event.data.entity_id | replace('_timer', '') | replace('timer', 'cover') }}"
            timer_id: "{{ trigger.event.data.entity_id }}"
    - service: timer.start
      data:
        entity_id: "{{ trigger.event.data.entity_id }}"

- alias: "Close Cover From Alert Action"
  trigger:
    - platform: event
      event_type: ios.notification_action_fired
      event_data:
        actionName: CLOSE_COVER
  action:
    - service: cover.close_cover
      data:
        entity_id: "{{ trigger.event.data.action_data.cover_id }}"

- alias: "Extend Cover Timeout From Alert Action"
  trigger:
    - platform: event
      event_type: ios.notification_action_fired
      event_data:
        actionName: EXTEND_COVER_TIMEOUT_05_MIN
    - platform: event
      event_type: ios.notification_action_fired
      event_data:
        actionName: EXTEND_COVER_TIMEOUT_10_MIN
  action:
    - service: timer.start
      data:
        entity_id: "{{ trigger.event.data.action_data.timer_id }}"
        # in seconds
        duration: "{{ trigger.event.data.actionName | regex_findall_index(find='\\d+', index=0, ignorecase=False) | int * 60 }}"

- alias: "Stop Cover Timer When Closed"
  initial_state: true
  trigger:
    platform: state
    entity_id:
      - cover.main_gate
      - cover.lhs_garage_door
      - cover.rhs_garage_door
    to: "closed"
  mode: queued
  action:
    - service: timer.cancel
      data:
        entity_id: "{{ trigger.entity_id | replace('cover', 'timer') }}_timer"

- alias: "Replace Cover Notifications When Closed"
  initial_state: true
  trigger:
    platform: state
    entity_id:
      - cover.main_gate
      - cover.lhs_garage_door
      - cover.rhs_garage_door
    to: "closed"
  condition:
    condition: template
    # only when there's been at least one notification, which will be after the first timer expired (default 3 min)
    # value_template: "{{ (as_timestamp(utcnow()) - as_timestamp(states['cover'][trigger.entity_id | replace('cover.', '')].last_changed)) + 200 | int > 180 }}"
    # {% set cover_entity = trigger.entity_id | replace("cover.", "") %}
    # {% set cover_last_changed = trigger.from_state.last_changed %}
    value_template: >-
      {{ (as_timestamp(utcnow()) - as_timestamp(trigger.from_state.last_changed)) | int > 180 }}
  action:
    - service: notify.mobile_app_ceres
      data:
        title: "Security"
        # cover.rhs_garage_door -> Pieter's garage door
        message: >-
          {% set name = None %}
          {% if trigger.entity_id | regex_search("lhs", ignorecase=True) %}
            {% set name = "Rouvé's garage door" %}
          {% elif trigger.entity_id | regex_search("rhs", ignorecase=True) %}
            {% set name = "Pieter's garage door" %}
          {% else %}
            {% set name = "The main gate" %}
          {% endif %}
          {{ name }} has been closed after {{ ((as_timestamp(utcnow()) - as_timestamp(trigger.from_state.last_changed)) // 60) | int }} min.
        data:
          apns_headers:
            # the timer entity
            # cover.rhs_garage_door -> timer.rhs_garage_door_timer
            'apns-collapse-id': "{{ trigger.entity_id | replace('cover', 'timer') }}_timer"

- alias: "Notify If Server Load High"
  initial_state: true
  trigger:
    platform: numeric_state
    entity_id: sensor.load_15m
    above: 1
    for:
      minutes: 15
  action:
    - service: notify.mobile_app_ceres
      data:
        title: "System"
        # https://community.home-assistant.io/t/convert-trigger-for-into-a-relative-age/196979
        message: "The server load has been {{ states('sensor.load_15m') }} for {{ trigger.for.seconds // 60 }} minutes."
        data:
          push:
            thread-id: "system-load"

- alias: "Set Pieter's Driving State"
  initial_state: true
  trigger:
    - platform: state
      entity_id: sensor.pieter_activity_type
      to: "Automotive"  # from anything else
    - platform: state
      entity_id: sensor.pieter_activity_type
      from: "Automotive"  # to anything else
  action:
    - service: "input_boolean.turn_{{ 'on' if is_state('sensor.pieter_activity_type', 'Automotive') else 'off' }}"
      entity_id: input_boolean.pieter_driving

- alias: "Notify If Driving State Changed"
  initial_state: false
  trigger:
    platform: state
    entity_id: binary_sensor.pieter_driving
  action:
    - service: notify.mobile_app_ceres
      data:
        title: "Test"
        # message: "Pieter is{% if states('binary_sensor.pieter_driving') == 'off' %} not{% endif %} driving."
        message: "Pieter is{{ ' not' if is_state('binary_sensor.pieter_driving', 'off') }} driving."

- alias: "Notify If Internet Status Changed"
  initial_state: true
  trigger:
    platform: state
    entity_id: binary_sensor.internet_connection
  condition:
    - condition: state
      entity_id: binary_sensor.pieter_present
      state: "on"
    - condition: time
      after: "06:00:00"
      before: "23:00:00"
  action:
    - service: notify.mobile_app_ceres
      data:
        title: "Home"
        message: "The Internet is {{ 'available' if is_state('binary_sensor.internet_connection', 'on') else 'unavailable' }}."
        data:
          push:
            thread-id: "home-internet"


- alias: "Notify If Electricity Feed Status Changed"
  initial_state: true
  trigger:
    platform: state
    entity_id: binary_sensor.electricity_feed
  action:
    - service: notify.mobile_app_ceres
      data:
        title: "Home"
        message: >-
          {% set after = "" %}
          {% set seconds = (as_timestamp(utcnow()) - as_timestamp(trigger.from_state.last_changed)) | int %}
          {% if seconds < 60 %}
            {% set after = seconds ~ " sec" %}
          {% elif seconds < 60*60 %}
            {% set after = seconds // 60 ~ " min" %}
          {% else %}
            {% set h = seconds // (60*60) %}
            {% set m = ((seconds / (60*60) - seconds // (60*60)) * 60) | round %}
            {% if m < 10 %}
              {% set after = h ~ "h0" ~ m %}
            {% else %}
              {% set after = h ~ "h" ~ m %}
            {% endif %}
          {% endif %}
          "The electricity feed has been {{ 'restored after ' ~  after ~ '.' if is_state('binary_sensor.electricity_feed', 'on') else 'cut.' }}"
        data:
          push:
            thread-id: "home-electricity"

- alias: "Switch On Garage Light When Any Garage Door Opened"
  initial_state: true
  trigger:
    platform: state
    entity_id:
      - cover.lhs_garage_door
      - cover.rhs_garage_door
    to: "open"
  mode: queued
  condition:
    - condition: or
      conditions:
        - condition: sun
          after: sunset
          after_offset: "-01:00:00"
        - condition: sun
          before: sunrise
          before_offset: "+01:00:00"
  action:
    - service: light.turn_on
      entity_id: light.garage_light

- alias: "Switch Off Garage Light When Any Garage Door Closed"
  initial_state: true
  trigger:
    platform: state
    entity_id:
      - cover.lhs_garage_door
      - cover.rhs_garage_door
    to: "closed"
  mode: queued
  condition:
    - condition: or
      conditions:
        - condition: sun
          after: sunset
          after_offset: "-01:00:00"
        - condition: sun
          before: sunrise
          before_offset: "+01:00:00"
  action:
    - service: light.turn_off
      entity_id: light.garage_light

- alias: "Update Security Camera Snapshot Gallery"
  trigger:
    - platform: state
      entity_id: sensor.tmp
      attribute: number_of_files
  mode: queued
  action:
    - service: shell_command.sync_snapshots
    - service: shell_command.trim_snapshots

- alias: "Switch Off Bedlamp When Plugging In Phone"
  trigger:
    platform: state
    entity_id: sensor.ceres_battery_state
    from: 'Not Charging'  # Can be to Charging or Full
  mode: single
  condition:
    - condition: and
      conditions:
        - condition: state
          entity_id: binary_sensor.pieter_present
          state: "on"
        - condition: time
          after: "21:00:00"
          before: "23:59:59"
        # proxy for nobody inside
        - condition: state
          entity_id: light.living_room_lamp
          state: "off"
        - condition: state
          entity_id: light.smart_bulb_1
          state: "on"
  action:
    - service: light.turn_off
      entity_id: light.smart_bulb_1

- alias: "Turn Off Entertainment System When Idle Or Leaving Room"
  trigger:
    # todo:
    # we don't know the decoder's state so we could be turning off the tv just because the apple tv isn't playing...
    # - platform: state
    #   entity_id: media_player.living_room
    #   to: "idle"
    #   for:
    #     minutes: 15
    - platform: state
      entity_id: light.living_room_lamp
      to: "off"
  # condition: if only we could know whether it's on
  action:
    - service: script.turn_on
      entity_id: script.entertainment_off

# backup script: https://gist.github.com/riemers/041c6a386a2eab95c55ba3ccaa10e7b0
- alias: "Notify If No Recent Backup"
  trigger:
    - platform: state
      entity_id: binary_sensor.no_recent_backup
      to: "on"
    # backup check in case there was a restart and the state didn't change
    - platform: time
      at: "09:00:00"
  mode: single
  condition:
    - condition: state
      entity_id: binary_sensor.no_recent_backup
      state: "on"
  action:
    - service: notify.mobile_app_ceres
      data:
        title: "System"
        message: "No recent backup found."
        data:
          push:
            thread-id: "system-backup"

- alias: "Low Server Battery"
  initial_state: true
  trigger:
    - platform: template
      value_template: "{{ states('sensor.home_assistant_server_battery') | int <= 10 }}"
  action:
    - service: notify.mobile_app_ceres
      data:
        title: "System"
        message: "Server battery is running low!"
        data:
          push:
            thread-id: "system-battery"

- alias: "Disable Guest Mode When Getting Home"
  initial_state: true
  trigger:
    - platform: state
      entity_id: binary_sensor.anybody_home
      to: "on"
  condition:
    - condition: state
      entity_id: switch.guest_mode
      state: "on"
  action:
    - service: switch.turn_off
      entity_id: switch.guest_mode
    - service: notify.mobile_app_ceres
      data:
        title: "Special Mode"
        message: "Guest mode disabled."
        data:
          push:
            category: "guest_mode_disabled"

- alias: "Enable Guest Mode From Alert Action"
  initial_state: true
  trigger:
    - platform: event
      event_type: ios.notification_action_fired
      event_data:
        actionName: ENABLE_GUEST_MODE
  action:
    - service: switch.turn_on
      entity_id: switch.guest_mode

- alias: "Alert If Gate Or Garages Opened When Nobody Home"
  initial_state: true
  trigger:
    platform: state
    entity_id:
      - cover.main_gate
      - cover.lhs_garage_door
      - cover.rhs_garage_door
    to: "open"
  condition:
    - condition: state
      entity_id: binary_sensor.anybody_home
      state: "off"
  action:
    - service: notify.mobile_app_ceres
      data:
        title: "Security"
        message: >-
          {% set name = None %}
          {% if trigger.entity_id | regex_search("lhs", ignorecase=True) %}
            {% set name = "Rouvé's garage door" %}
          {% elif trigger.entity_id | regex_search("rhs", ignorecase=True) %}
            {% set name = "Pieter's garage door" %}
          {% else %}
            {% set name = "The main gate" %}
          {% endif %}
          {{ name }} has been opened when nobody's home.
          {# todo: alert/call security company #}
        data:
          apns_headers:
            # group notifications by the timer entity
            'apns-collapse-id': "{{ trigger.entity_id }}"
          push:
            category: "cover_open"
          action_data:
            # convert this to the cover entity to use in the automation that receives this
            cover_id: "{{ trigger.entity_id | replace('_timer', '') | replace('timer', 'cover') }}"
            timer_id: "{{ trigger.entity_id }}"

- alias: "Save Last Smart Bulb State"
  initial_state: true
  trigger:
    - platform: state
      entity_id:
        - light.smart_bulb_1
        - light.smart_bulb_2
        - light.smart_bulb_3
        - light.smart_bulb_4
  mode: parallel
  condition:
    # power was NOT recently restored (2 min), causing the light to turn on and connect to hass, and trigger this automation
    # it would also mean it wasn't a hass restart
    # - condition: template
    #   value_template: "{{ ((as_timestamp(utcnow()) - as_timestamp(states.binary_sensor.electricity_feed.last_changed)) / 60) > 2 }}"
    - condition: state
      entity_id: binary_sensor.electricity_feed
      state: "on"
  action:
    - service: "input_boolean.turn_{{ states(trigger.entity_id) }}"
      data:
        entity_id: "{{ trigger.entity_id | replace('light.', 'input_boolean.') }}_state"

- alias: "Restore Smart Bulb Statuses After Power Restored"
  initial_state: true
  trigger:
    # tp-link smart bulbs always turn on when power is connected
    # this will thus trigger the moment the smart bulb reconnects to the network and hass
    - platform: state
      entity_id:
        - light.smart_bulb_1
        - light.smart_bulb_2
        - light.smart_bulb_3
        - light.smart_bulb_4
      to: "on"
  mode: parallel
  # some other ideas:
  # - simplify all of this by only have a time window condition and always turn the lights off (say between 11 pm and 6 am)
  #   downside is that you simply can't turn on the lights during those times.
  condition:
    - condition: and
      conditions:
        # only if the light state and saved state disagrees: trigger says on; state says off
        - condition: template
          value_template: "{{ is_state(trigger.entity_id | replace('light.', 'input_boolean.') ~ '_state', 'off') }}"
        # power was recently restored (2 min)
        # what if the sensor didn't pick up the outage if it was too short for it to update?
        # this solution won't currently work for that scenario
        - condition: template
          value_template: "{{ ((as_timestamp(utcnow()) - as_timestamp(states.binary_sensor.electricity_feed.last_changed)) / 60) <= 2 }}"
        # but the electricity feed sensor didn't update due to a hass restart (2 min)
        - condition: template
          value_template: "{{ (utcnow() - strptime(states('sensor.home_assistant_uptime'), '%Y-%m-%dT%H:%M:%S.%f%z')).seconds / 60 > 2 }}"
  action:
    - service: light.turn_off
      data:
        entity_id: "{{ trigger.entity_id }}"

# udevadm monitor
# udevadm info --path=/sys/class/power_supply/AC0
# /etc/udev/rules.d/60-power.rules
# SUBSYSTEM=="power_supply",ENV{POWER_SUPPLY_NAME}=="AC0",RUN+="/usr/bin/curl -s -X POST http://<host>:<port>/api/webhook/<webhook_id> -d 'status=$env{POWER_SUPPLY_ONLINE}'"
# udevadm control --reload-rules && udevadm trigger
# sudo /etc/init.d/udev restart
# udevadm control --log-priority=debug
# journalctl -f
- alias: "Update Battery Status"
  trigger:
    - platform: webhook
      webhook_id: server_power_connected
  mode: queued
  action:
    - service: homeassistant.update_entity
      entity_id: sensor.home_assistant_server_battery
    - service: "input_boolean.turn_{{ 'on' if (trigger.data['status'] | int) else 'off' }}"
      data:
        entity_id: input_boolean.server_power_connected
