# use uuid4 to create random automation ids
# python -c 'import uuid; print(uuid.uuid4())'
# uuidgen | tr '[:upper:]' '[:lower:]'

- alias: "Set Light Theme"
  id: "b2139218-ae45-4fc5-a049-1a9692bc387e"
  trigger:
    - platform: homeassistant
      event: start
    - platform: sun
      event: sunrise
      # 30 min after sunrise
      offset: "00:30:00"
  # condition needed for the start trigger
  condition:
    - condition: sun
      after: sunrise
  action:
    service: frontend.set_theme
    data:
      name: custom-light-mode

- alias: "See Mobile Devices"
  id: "6a1a5829-c740-4965-972b-58ce80651de1"
  trigger:
    - platform: homeassistant
      event: start
    - platform: time_pattern
      minutes: "/15"
  action:
    # https://companion.home-assistant.io/docs/notifications/notification-commands#request-location-updates
    - service: notify.mobile_app_ceres
      data:
        message: "request_location_update"
    - service: notify.mobile_app_rouve
      data:
        message: "request_location_update"

- alias: "Set Dark Theme"
  id: "2a26deed-9071-4eb4-80b7-d014dfe98def"
  trigger:
    - platform: homeassistant
      event: start
    - platform: sun
      event: sunset
      # 30 min after sunset
      offset: "00:30:00"
  # condition needed for the start trigger
  condition:
    - condition: sun
      after: sunset
  action:
    service: frontend.set_theme
    data:
      name: slate

- alias: "Notify When Server Started After Being Shut Down Automatically"
  id: "cc787a25-6e55-4388-ab3c-68e9716bce50"
  trigger:
    - platform: homeassistant
      event: start
  mode: single
  condition:
    - condition: state
      entity_id: input_boolean.server_shut_down_automatically
      state: "on"
  action:
    - service: input_boolean.turn_off
      entity_id: input_boolean.server_shut_down_automatically
    - service: notify.mobile_app_ceres
      data:
        title: "System"
        message: "Server started."
        data:
          group: "system-general"
          url: homeassistant://navigate/lovelace/devices

- alias: "Take Foyer Motion Snapshots"
  id: "e160923e-daf9-417d-9561-174feb2cd350"
  initial_state: true
  trigger:
    platform: state
    entity_id: binary_sensor.foyer_motion_homebridge
    to: "on"
  condition:
    - condition: state
      entity_id: binary_sensor.anybody_home
      state: "off"
    - condition: template
      value_template: >-
        {# prevent the action of the light turning off after the last trigger to trigger the motion sensor again immediately #}
        {{ (utcnow() - states.light.foyer.last_changed).seconds >= 1 }}
  action:
    # blocking call
    - service: script.security_camera_create_snapshot
    - condition: state
      entity_id: group.security_automations
      state: "on"
    - service: notify.family
      data:
        title: Security
        message: "Motion detected!"
        data:
          group: "security-camera-snapshots"
          url: homeassistant://navigate/lovelace/security
          attachment:
            # url: https://geoexpressinternational.com/wp-content/plugins/webp-express/test/test-pattern-tv.jpg
            # url: http://securitypi.local/local/camera.security_camera_last.jpg
            url: !secret security_camera_last_snapshot_url
            # content-type: jpg
            # hide-thumbnail: false

- alias: "Foyer Motion Detected Last"
  id: "ef364d58-2cb7-4d5b-8e96-8724c132365a"
  initial_state: true
  trigger:
    platform: state
    entity_id: binary_sensor.foyer_motion_homebridge
    to: "on"
  action:
    - service: input_datetime.set_datetime
      entity_id: input_datetime.foyer_motion_detected_last
      data:
        datetime: "{{ now() }}"

- alias: "Switch On Lights If Motion Is Detected"
  id: "a3e56532-e1e9-42a1-9371-bfe2ad04c2af"
  # only at night though
  initial_state: true
  trigger:
    platform: state
    entity_id: binary_sensor.foyer_motion_homebridge
    to: "on"
  condition:
    - condition: state
      entity_id: binary_sensor.anybody_home
      state: "off"
    - condition: template
      # todo: might need to check the light state? implicitly assuming here that the last state change was to "off"
      value_template: >-
        {# prevent the light turning off after the last trigger to trigger the motion sensor again immediately #}
        {{ (utcnow() - states.light.foyer.last_changed).seconds >= 1 }}
    # use or, because, you can't be after sunset AND before sunrise ON THE SAME DAY
    - condition: or
      conditions:
        - condition: sun
          after: sunset
          after_offset: "-02:00:00"
        - condition: sun
          before: sunrise
          before_offset: "-00:30:00"
        - condition: state
          entity_id: binary_sensor.low_light
          state: "on"
  action:
    - service: scene.turn_on
      target:
        entity_id: scene.inside_security_lights
    - service: script.turn_on
      target:
        entity_id: script.turn_on_light_group_timers
      data:
        variables:
          light_group: light.inside_security_group

- alias: "Reset Wake Up Time"
  id: "d7833822-f8da-495d-8d24-d98aae2f9b22"
  initial_state: true
  trigger:
    - platform: time
      at: input_datetime.wake_up_time
  condition:
    - condition: state
      entity_id: binary_sensor.workday
      state: "on"
    - condition: state
      entity_id: input_boolean.skip_next_wake_up_time
      state: "on"
      for:
        minutes: 1
  action:
    - service: input_boolean.turn_off
      target:
        entity_id: input_boolean.skip_next_wake_up_time

- alias: "Switch On Lights At Wake Up Time"
  id: "5486f6f9-da52-4cf0-8a23-e54f40a80721"
  initial_state: true
  trigger:
    - platform: time
      at: input_datetime.wake_up_time
  condition:
    - condition: state
      entity_id: binary_sensor.workday
      state: "on"
    - condition: state
      entity_id: input_boolean.skip_next_wake_up_time
      state: "off"
      for:
        minutes: 1
  action:
    - service: scene.turn_on
      target:
        entity_id: scene.normal_lights
    # it's a bit wild if alarms go off and lights turn on all at the same time – be gentle
    - delay:
        seconds: 10
    # add a condition for only if we are home – but if it's a workday, why wouldn't we?
    - service: light.turn_on
      target:
        entity_id:
          - light.pieter_bedside
          - light.rouve_bedside
          - light.hallway
      data:
        profile: low
    - delay:
        minutes: 1
    # this call does not block/wait, so the two transitions will start at almost the same time
    # and the script runs in parallel mode
    # https://www.home-assistant.io/integrations/script/#waiting-for-script-to-complete
    - service: script.turn_on
      target:
        entity_id: script.fade_light
      data:
        variables:
          light: light.pieter_bedside
          target_brightness_pct: 20
          transition_duration: 120
    - service: script.turn_on
      target:
        entity_id: script.fade_light
      data:
        variables:
          light: light.rouve_bedside
          target_brightness_pct: 40
          transition_duration: 120
    - service: script.turn_on
      target:
        entity_id: script.fade_light
      data:
        variables:
          light: light.hallway
          target_brightness_pct: 27
          transition_duration: 120

- alias: "Switch On Night Light If Motion Is Detected"
  id: "096415fb-9e87-411a-aef9-b9ba5fb9696d"
  initial_state: true
  trigger:
    platform: state
    entity_id: binary_sensor.foyer_motion_homebridge
    to: "on"
  condition:
    - condition: and
      conditions:
        - condition: state
          entity_id: binary_sensor.electricity_feed
          state: "on"
        - condition: state
          entity_id: binary_sensor.anybody_home
          state: "on"
        # proxy for everybody in bed
        - condition: state
          entity_id: light.living_room_lamp
          state: "off"
        # in case light was turned on manually, leave it
        # commented out for reason: but why would we? we'd probably turn on other lights instead
        # - condition: state
        #   entity_id: light.foyer
        #   state: "off"
        - condition: or
          conditions:
            - condition: time
              after: "21:00:00"
            - condition: sun
              before: sunrise
              before_offset: "-00:30:00"
  action:
    - service: scene.turn_on
      target:
        entity_id: scene.night_lights
    - service: script.turn_on
      target:
        entity_id: script.turn_on_light_group_timers
      data:
        variables:
          light_group: light.night_group

- alias: "Switch Off Light When Timer Expires"
  id: "23c86717-220f-4d56-b67c-d19e2f171836"
  initial_state: true
  trigger:
    # same entities as for "Stop Light Timer If Running When Light Turned Off"
    - platform: event
      event_type: timer.finished
      event_data:
        entity_id: timer.living_room_lamp_timer
    - platform: event
      event_type: timer.finished
      event_data:
        entity_id: timer.front_door_timer
    - platform: event
      event_type: timer.finished
      event_data:
        entity_id: timer.foyer_timer
    - platform: event
      event_type: timer.finished
      event_data:
        entity_id: timer.kitchen_counter_timer
    - platform: event
      event_type: timer.finished
      event_data:
        entity_id: timer.hallway_timer
  mode: parallel
  action:
    - service: light.turn_off
      data:
        entity_id: "{{ trigger.event.data.entity_id | replace('_timer', '') | replace('timer', 'light') }}"

- alias: "Motion Indicator On"
  id: "3cd46514-8bea-4d73-9625-ae4487cca15d"
  initial_state: true
  trigger:
    platform: state
    entity_id: binary_sensor.foyer_motion_detected
    to: "on"
  action:
    - service: light.turn_on
      entity_id: light.led

- alias: "Motion Indicator Off"
  id: "4e7d3f9b-e91a-46d9-afc3-83f40ee90636"
  initial_state: true
  trigger:
    platform: state
    entity_id: binary_sensor.foyer_motion_detected
    to: "off"
  action:
    - service: light.turn_off
      entity_id: light.led

- alias: "Blink Motion Indicator While Recording"
  id: "8daef3c1-2edf-4fc0-b687-3df4f782c348"
  initial_state: true
  trigger:
    platform: state
    entity_id: script.security_camera_record_clip
    to: "on"
  mode: single
  action:
    # stop motion indicator
    - service: automation.turn_off
      entity_id: automation.motion_indicator_on
    # blink
    - repeat:
        sequence:
          - service: light.turn_on
            entity_id: light.led
          - delay:
              milliseconds: 500
          - service: light.turn_off
            entity_id: light.led
          - delay:
              milliseconds: 500
        until:
          - condition: state
            entity_id: script.security_camera_record_clip
            state: "off"
    # resume motion indicator
    - service: automation.turn_on
      entity_id: automation.motion_indicator_on

- alias: "Inside Lights Auto On Upon Sunset or Arrival"
  id: "867f58cb-d941-4944-b919-6b446486a690"
  initial_state: true
  trigger:
    # https://www.home-assistant.io/cookbook/automation_sun/
    - platform: sun
      event: sunset
      offset: "-01:00:00"
    - platform: state
      entity_id: binary_sensor.anybody_home
      to: "on"
  condition:
    - condition: state
      entity_id: binary_sensor.anybody_home
      state: "on"
    # use or, because, you can't be after sunset AND before sunrise ON THE SAME DAY
    - condition: or
      conditions:
        - condition: sun
          after: sunset
          after_offset: "-01:00:00"
        - condition: sun
          before: sunrise
          before_offset: "-01:00:00"
        - condition: state
          entity_id: binary_sensor.low_light
          state: "on"
  action:
    - service: scene.turn_on
      target:
        entity_id: scene.normal_lights
    - service: light.turn_on
      target:
        entity_id: light.hallway
      data:
        profile: dim

- alias: "Bedlamps Auto On Upon Sunset or Arrival"
  id: "21b972ef-1e21-42b5-a137-9b160f601310"
  initial_state: true
  trigger:
    - platform: sun
      event: sunset
      offset: "-00:30:00"
    - platform: state
      entity_id: binary_sensor.pieter_present
      to: "on"
    - platform: state
      entity_id: binary_sensor.rouve_present
      to: "on"
  mode: single
  condition:
    - condition: or
      conditions:
        - condition: state
          entity_id: binary_sensor.pieter_present
          state: "on"
        - condition: state
          entity_id: binary_sensor.rouve_present
          state: "on"
    # use or, because, you can't be after sunset AND before sunrise ON THE SAME DAY
    - condition: or
      conditions:
        - condition: sun
          after: sunset
          after_offset: "-00:30:00"
        - condition: sun
          before: sunrise
  action:
    - service: script.turn_on
      target:
        entity_id: script.turn_on_light
      data:
        variables:
          light: light.pieter_bedside
          profile: pieter
    - service: script.turn_on
      target:
        entity_id: script.turn_on_light
      data:
        variables:
          light: light.rouve_bedside
          profile: rouve

- alias: "Bedlamps On Upon Server Start"
  id: "1e8cf815-a52a-4fe6-a536-e25e234381bc"
  initial_state: true
  trigger:
    - platform: homeassistant
      event: start
  mode: single
  condition:
    - condition: or
      conditions:
        - condition: state
          entity_id: binary_sensor.pieter_present
          state: "on"
        - condition: state
          entity_id: binary_sensor.rouve_present
          state: "on"
    - condition: template
      value_template: >-
        {# this helper contains only a time #}
        {% set after = states('input_datetime.wake_up_time') | today_at %}
        {% set before = states('input_datetime.wake_up_time') | today_at + timedelta(minutes=30) %}
        {{ after <= now() <= before }}
    - condition: state
      entity_id: binary_sensor.workday
      state: "on"
  action:
    - wait_template: "{{ is_state('light.pieter_bedside', 'off') }}"
      timeout:
        minutes: 2
      continue_on_timeout: false
    - wait_template: "{{ is_state('light.rouve_bedside', 'off') }}"
      timeout:
        minutes: 2
      continue_on_timeout: false
    - service: script.turn_on
      target:
        entity_id: script.turn_on_light
      data:
        variables:
          light: light.pieter_bedside
          profile: pieter
    - service: script.turn_on
      target:
        entity_id: script.turn_on_light
      data:
        variables:
          light: light.rouve_bedside
          profile: rouve

# might need to specialise this a bit more in future:
# e.g. switch on from 6 am when arriving home and light is low
# separate from the default on at 8 am (and maybe only on workdays)
- alias: "Lights On Upon Low Light"
  id: "36373097-6fba-45ae-9888-d88b668b997d"
  initial_state: true
  trigger:
    - platform: state
      entity_id: binary_sensor.low_light
      to: "on"
    - platform: time_pattern
      minutes: "*"
    - platform: state
      entity_id: binary_sensor.anybody_home
      to: "on"
  condition:
    - condition: state
      entity_id: binary_sensor.electricity_feed
      state: "on"
    - condition: state
      entity_id: binary_sensor.anybody_home
      state: "on"
    - condition: state
      entity_id: binary_sensor.low_light
      state: "on"
    - condition: or
      conditions:
        - condition: and
          conditions:
            - condition: state
              entity_id: binary_sensor.workday
              state: "on"
            - condition: time
              after: "06:00:00"
              before: "08:00:00"
        - condition: time
          after: "08:00:00"
          before: "21:00:00"
    - condition: state
      entity_id: light.living_room_lamp
      state: "off"
  action:
    - service: scene.turn_on
      target:
        entity_id: scene.normal_lights

- alias: "Lights Off When Loadshedding"
  id: "e4867511-07e3-4873-bd78-ecaec953adb4"
  initial_state: true
  trigger:
    - platform: state
      entity_id: binary_sensor.electricity_feed
      to: "off"
  mode: single
  condition:
    - condition: and
      conditions:
        - condition: sun
          after: sunrise
        - condition: sun
          before: sunset
  action:
    # currently the only light on battery
    - service: light.turn_off
      entity_id: light.living_room_lamp

- alias: "Update Automations When Power Status Changed"
  id: "d322d9a2-9a74-4c10-8c31-110401a8ff31"
  initial_state: true
  trigger:
    - platform: state
      entity_id: binary_sensor.electricity_feed
      to:
        - "on"
        - "off"
      # we don't want erratic behaviour in case the pulse counter goes offline for a moment
      for:
        seconds: 30
  mode: single
  action:
    # https://community.home-assistant.io/t/using-the-new-for-each/419829
    - service: "automation.turn_{{ 'on' if is_state('binary_sensor.electricity_feed', 'on') else 'off' }}"
      target:
        # remember that these automations have an initial value of true, so this practically (on start-up) has no real effect
        entity_id: "{{ expand('group.automations_to_save_energy') | map(attribute='entity_id') | list }}"

- alias: "Bedlamps On Upon Low Light"
  id: "5cdd58f4-dcec-4f50-9451-8d40dd8c2215"
  initial_state: true
  trigger:
    - platform: state
      entity_id: binary_sensor.low_light
      to: "on"
    - platform: homeassistant
      event: start
  condition:
    - condition: time
      after: "16:00:00"
      before: "21:00:00"
    - condition: or
      conditions:
        - condition: state
          entity_id: binary_sensor.pieter_present
          state: "on"
        - condition: state
          entity_id: binary_sensor.rouve_present
          state: "on"
  action:
    - service: script.turn_on
      target:
        entity_id: script.turn_on_light
      data:
        variables:
          light: light.pieter_bedside
          profile: pieter
    - service: script.turn_on
      target:
        entity_id: script.turn_on_light
      data:
        variables:
          light: light.rouve_bedside
          profile: rouve

- alias: "Lights Off After Sunrise"
  id: "7f64fa82-a158-4f78-b406-2f0653f8f764"
  initial_state: true
  trigger:
    - platform: sun
      event: sunrise
      offset: "01:30:00"
    - platform: state
      entity_id: binary_sensor.low_light
      to: "off"
      # let's see if we can remove this condition permanently, since we're using a real illuminance sensor in the house now
      # to avoid the light turning off when there briefly is bright sunshine
      # for:
      #   minutes: 15
  # todo: if anybody home?
  condition:
    condition: and
    conditions:
      # todo: remove
      - condition: sun
        after: sunrise
        after_offset: "01:30:00"
      - condition: state
        entity_id: binary_sensor.low_light
        state: "off"
      # not for as long as we're working from home
      - condition: state
        entity_id: binary_sensor.workday
        state: "off"
  action:
    - service: light.turn_off
      target:
        entity_id:
          - light.normal_light_group
          - light.hallway

- alias: "Bedlamps Off After Sunrise"
  id: "7d865580-b23b-47e1-8068-9bb202af535b"
  initial_state: true
  trigger:
    - platform: sun
      event: sunrise
      offset: "01:30:00"
  action:
    - service: light.turn_off
      entity_id: light.main_bedroom_group

- alias: "Away Mode"
  description: "Activate away mode When leaving home"
  id: "93bac20d-eeba-48f6-87ef-d6c7f754ddcc"
  initial_state: true
  trigger:
    platform: state
    entity_id: binary_sensor.anybody_home
    to: "off"
  condition:
    - condition: state
      entity_id: binary_sensor.anybody_home
      state: "off"
  action:
    - service: light.turn_off
      entity_id: all
    - service: script.turn_on
      entity_id: script.entertainment_off
    - service: switch.turn_off
      entity_id: switch.tivoli_audio

- alias: "Switch On The Front Door Light When Arriving Home"
  id: "47e6883e-b9ab-4559-9603-765e80cdfa81"
  trigger:
    # when either of us arrive home, irrespective of whether anybody is home
    - platform: state
      entity_id:
        - binary_sensor.pieter_present
        - binary_sensor.rouve_present
      to: "on"
  mode: single
  condition:
    - condition: or
      conditions:
        - condition: sun
          after: sunset
        - condition: sun
          before: sunrise
    - condition: state
      entity_id: light.front_door
      state: "off"
  action:
    - service: script.turn_on
      target:
        entity_id: script.turn_on_light_and_timer
      data:
        variables:
          light: light.front_door
          duration: "00:03:00"

- alias: "Open The Gate When Arriving Home"
  id: "7dcb52a0-3ecc-4a6f-9b89-6d80a6720590"
  initial_state: true
  trigger:
    - platform: state
      entity_id: binary_sensor.pieter_present
      to: "on"
      # prevent false positive due to flaky connectivity or after loadshedding and sensors being unavailable
      not_from: "unavailable"
  mode: single
  condition:
    - condition: and
      conditions:
        # prevent a glitch in case the cover was recently closed
        # since there is also an availability template for the cover defined, it will usually also prevent the gate from opening
        # when the location gets updated after the power returns (after loadshedding)
        - condition: state
          entity_id: cover.main_gate
          state: "closed"
          for:
            minutes: 5
        - condition: time
          after: "07:00:00"
          before: "23:00:00"
  action:
    - if:
        - condition: state
          entity_id: binary_sensor.pieter_driving
          state: "on"
      then:
        - service: cover.open_cover
          entity_id: cover.main_gate
      else:
        - service: script.turn_on
          entity_id: script.open_pedestrian_gap

- alias: "Stop Light Timer If Running When Light Turned Off"
  id: "5878e444-72bc-4633-85c9-de0ebf5a57dd"
  initial_state: true
  trigger:
    platform: state
    entity_id:
      # same entities as for "Switch Off Light When Timer Expires"
      - light.living_room_lamp
      - light.front_door
      - light.foyer
      - light.kitchen_counter
      - light.hallway
    to: "off"
  mode: parallel
  condition:
    condition: template
    value_template: "{{ is_state(trigger.entity_id | replace('light.', 'timer.') ~ '_timer', 'active') }}"
  action:
    - service: timer.cancel
      target:
        entity_id: "{{ trigger.entity_id | replace('light.', 'timer.') }}_timer"

# open garage door when arriving home:
# when moving above a certain (last) speed (so i'm driving, not cycling or otherwise, or getting transported in some other way)
#   - the above now done with an ios activity sensor
# and connected to my car's bluetooth (thus, open my garage door only for my car)
#   - because ios prompts you to run the automation to set the input boolean, it's not useful; installing ultrasonic sensors to track which door to open
#   - check for one or both to open (edge case)
# and rouve/someone is home (proxy for the alarm being off)
# https://www.home-assistant.io/integrations/proximity/
# https://www.home-assistant.io/docs/configuration/templating/ (distance function)
# https://companion.home-assistant.io/docs/core/sensors/
- alias: "Open Garage Door When Arriving"
  id: "0da9adc5-24df-4669-8160-bbc6782dc283"
  initial_state: true
  trigger:
    - platform: state
      entity_id: binary_sensor.pieter_present
      to: "on"
      # prevent false positive due to flaky connectivity or after loadshedding and sensors being unavailable
      not_from: "unavailable"
  condition:
    - condition: and
      conditions:
        # prevent a glitch in case the cover was recently closed
        - condition: state
          entity_id: cover.rhs_garage_door
          state: "closed"
          for:
            minutes: 5
        - condition: time
          after: "07:00:00"
          before: "23:00:00"
        # i must be arriving by car
        - condition: state
          entity_id: binary_sensor.pieter_driving
          state: "on"
        # my cover for my car
        - condition: state
          entity_id: binary_sensor.rhs_garage_occupied
          state: "off"
        # proxy for the alarm being off
        - condition: or
          conditions:
            - condition: state
              entity_id: binary_sensor.rouve_present
              state: "on"
              for:
                minutes: 5
            - condition: state
              entity_id: binary_sensor.contractor_mode
              state: "on"
        # if guest mode is on, someone could be parked in or in front of the garage
        - condition: state
          entity_id: switch.guest_mode
          state: "off"
  action:
    - service: cover.open_cover
      entity_id: cover.rhs_garage_door

- alias: "Check Disk Space on the Home Assistant Server"
  id: "e955e738-4162-486e-a915-d30b5952d238"
  trigger:
    - platform: time_pattern
      hours: "*"
      minutes: 0
      seconds: 0
  condition:
    - condition: numeric_state
      entity_id: sensor.disk_use_percent
      above: 90
  action:
    - service: notify.mobile_app_ceres
      data:
        title: "System"
        message: "Server disk usage is {{ states('sensor.disk_use_percent') }}%!"
        data:
          group: "system-disk-space"
          url: homeassistant://navigate/lovelace/devices

- alias: "Contractor Mode Enabled Alert"
  id: "86443a8d-cc5d-4017-a7f8-190e9eccc8cc"
  trigger:
    - platform: state
      entity_id: switch.contractor_mode
      to: "on"
  action:
    - service: notify.mobile_app_ceres
      data:
        title: "Special Mode"
        message: "Contractor mode enabled."
        data:
          actions:
            - action: "DISABLE_CONTRACTOR_MODE"
              title: "Disable"
          # use threads but don't replace: we want to see whenever the state changed
          group: "contractor-mode"
          url: homeassistant://navigate/lovelace/main

- alias: "Contractor Mode Disabled Alert"
  id: "123e8e79-6f0e-48f5-a400-951922bf9b80"
  trigger:
    - platform: state
      entity_id: switch.contractor_mode
      to: "off"
  action:
    - service: notify.mobile_app_ceres
      data:
        title: "Special Mode"
        message: "Contractor mode disabled."
        data:
          actions:
            - action: "ENABLE_CONTRACTOR_MODE"
              title: "Enable"
          group: "contractor-mode"
          url: homeassistant://navigate/lovelace/main

- alias: "Enable Contractor Mode"
  id: "47fc96f9-bf33-4f9e-97ed-8aaea4da1a12"
  initial_state: true
  trigger:
    - platform: state
      entity_id: calendar.housekeeping
      to: "on"
    - platform: homeassistant
      event: start
  condition:
    - condition: state
      entity_id: calendar.housekeeping
      state: "on"
    - condition: state
      entity_id: switch.contractor_mode
      state: "off"
  action:
    - service: switch.turn_on
      entity_id: switch.contractor_mode
    # cleaning day lights
    - service: light.turn_on
      entity_id:
        - light.hallway
        - light.music_room
        - light.dining_room
      data:
        profile: security
    # only turn it on if it's not already on; it could be on already as the warning light due to load shedding
    - condition: state
      entity_id: light.foyer
      state: "off"
    - service: light.turn_on
      entity_id: light.foyer
      data:
        profile: security

- alias: "Revert Cleaning Day Lights"
  id: "9b73e13c-449e-4b9c-82c3-2652156cd7e5"
  trigger:
    - platform: state
      entity_id: calendar.housekeeping
      to: "off"
  action:
    - service: light.turn_off
      entity_id:
        - light.music_room
        - light.dining_room
    - service: light.turn_on
      entity_id: light.hallway
      data:
        profile: dim
    # don't turn it off while being load shed, because this is the warning light and will be red
    - condition: state
      entity_id: binary_sensor.grid_feed
      state: "on"
    - service: light.turn_off
      entity_id: light.foyer

- alias: "Disable Contractor Mode"
  id: "f63a3c52-fac8-4fc7-a000-0f41b2ee5e8d"
  initial_state: true
  trigger:
    - platform: time
      at: "16:00:00"
    - platform: homeassistant
      event: start
  condition:
    - condition: state
      entity_id: switch.contractor_mode
      state: "on"
    - condition: time
      after: "16:00:00"
  action:
    - service: switch.turn_off
      entity_id: switch.contractor_mode

- alias: "Contractor Mode Still Enabled Alert"
  id: "f64b90bf-9234-42d1-a3b7-b34443fd3ea6"
  initial_state: true
  trigger:
    - platform: time_pattern
      hours: "*"
      minutes: 0
      seconds: 0
  condition:
    - condition: and
      conditions:
        - condition: state
          entity_id: switch.contractor_mode
          state: "on"
        - condition: time
          after: "17:00:00"
          before: "21:00:00"
  action:
    - service: notify.mobile_app_ceres
      data:
        title: "Special Mode"
        message: "Contractor mode is still enabled."
        data:
          actions:
            - action: "DISABLE_CONTRACTOR_MODE"
              title: "Disable"
          group: "contractor-mode"
          url: homeassistant://navigate/lovelace/main

- alias: "Disable Contractor Mode From Alert Action"
  id: "496603d1-c6b1-46c0-9048-8601edd627d4"
  trigger:
    - platform: event
      event_type: mobile_app_notification_action
      event_data:
        action: DISABLE_CONTRACTOR_MODE
  action:
    - service: switch.turn_off
      entity_id: switch.contractor_mode

- alias: "Enable Contractor Mode From Alert Action"
  id: "84c0360f-3154-4705-904e-ca50ffedce47"
  trigger:
    - platform: event
      event_type: mobile_app_notification_action
      event_data:
        action: ENABLE_CONTRACTOR_MODE
  action:
    - service: switch.turn_on
      entity_id: switch.contractor_mode

- alias: "Set Vacation"
  id: "a5e5cc6f-f66b-458e-9b63-0a60ef5be6a9"
  trigger:
    - platform: state
      entity_id: calendar.vacation
      to: "on"
    # add hourly trigger too in case changes are made to the event
    # (e.g. i forgot to add an event to the calendar on the night before)
    # this will override any manual changes made by setting the input datetimes directly
    - platform: time_pattern
      hours: "/1"
    - platform: homeassistant
      event: start
  action:
    - service: input_datetime.set_datetime
      entity_id: input_datetime.vacation_start
      data:
        datetime: "{{ ((state_attr('calendar.vacation', 'start_time') or states('input_datetime.vacation_start')) | as_datetime).date() }}"
    - service: input_datetime.set_datetime
      entity_id: input_datetime.vacation_end
      data:
        # all-day events are set by google to until midnight of the next day
        # also the timedelta will fail if it's None, so cater for that
        datetime: "{{ ((state_attr('calendar.vacation', 'end_time') | as_datetime - timedelta(seconds=1) if state_attr('calendar.vacation', 'end_time') else None) or (states('input_datetime.vacation_end') | as_datetime)).date() }}"

# https://community.home-assistant.io/t/snmp-bandwidth-monitor/7122
# https://community.home-assistant.io/t/snmp-bandwidth-monitor-using-statistics-and-a-utility-meter/176971
- alias: "Monitor Inbound Internet Traffic"
  id: "244f20ae-8cc6-4442-b3aa-0336763508f8"
  trigger:
    platform: state
    entity_id: sensor.snmp_wan_in
  action:
    - service: input_number.set_value
      data:
        entity_id: input_number.wan_traffic_delta_in
        value: >-
          {# safe delta catering for wrap-around of a 32-bit unsigned int (snmp counter is 32-bit unsigned int) #}
          {# basically taking 2's complement #}
          {% set from = trigger.from_state.state | int %}
          {% set to = trigger.to_state.state | int %}
          {% set traffic_delta = (to - from) if (to >= from) else (4294967295 - from + to + 1) %}
          {% set time_delta = as_timestamp(trigger.to_state.last_updated) - as_timestamp(trigger.from_state.last_updated) %}
          {{ (traffic_delta * 8) / time_delta }}

- alias: "Monitor Outbound Internet Traffic"
  id: "719b1fd6-bfc1-40b3-bf0e-5a07cff11aea"
  trigger:
    platform: state
    entity_id: sensor.snmp_wan_out
  action:
    - service: input_number.set_value
      data:
        entity_id: input_number.wan_traffic_delta_out
        value: >-
          {# safe delta catering for wrap-around of a 32-bit unsigned int (snmp counter is 32-bit unsigned int) #}
          {# basically taking 2's complement #}
          {% set from = trigger.from_state.state | int %}
          {% set to = trigger.to_state.state | int %}
          {% set traffic_delta = (to - from) if (to >= from) else (4294967295 - from + to + 1) %}
          {% set time_delta = as_timestamp(trigger.to_state.last_updated) - as_timestamp(trigger.from_state.last_updated) %}
          {{ (traffic_delta * 8) / time_delta }}

- alias: "Notify Pieter Going Home from Work in Cape Town"
  id: "5515c06c-6c69-443d-9549-eb00999e8b95"
  trigger:
    platform: zone
    entity_id: person.pieter_rautenbach
    zone: zone.pieter_work_cape_town
    event: leave
  # this could potentially be improved by checking whether we are both together
  # in which case sending a notification won't make sense
  # seems unlikely though...
  condition:
    - condition: and
      conditions:
        - condition: time
          after: "16:00:00"
          weekday:
            - mon
            - tue
            - wed
            - thu
            - fri
        - condition: numeric_state
          entity_id: sensor.duration_pieter_work_cape_town
          above: 1
  action:
    - service: script.turn_on
      entity_id: script.send_pieter_work_cape_town_to_home_eta

- alias: "Start Cover Timer When Opened"
  id: "e2ec6802-6131-4264-8226-5df65c900699"
  initial_state: true
  trigger:
    - platform: state
      entity_id:
        - cover.main_gate
        - cover.lhs_garage_door
        - cover.rhs_garage_door
      to: "open"
  mode: queued
  action:
    - service: timer.start
      target:
        entity_id: "timer.{{ trigger.entity_id | replace('cover.', '') }}_timer"
      data:
        duration: "00:03:00"
    - service: input_datetime.set_datetime
      target:
        entity_id: "input_datetime.{{ trigger.entity_id | replace('cover.', '') }}_opened"
      data:
        datetime: "{{ now() }}"

- alias: "Update Timers For Covers On Startup"
  id: "29fc90a8-8fd1-4aad-a803-81db261509f2"
  initial_state: true
  trigger:
    - platform: homeassistant
      event: start
  mode: single
  action:
    - repeat:
        for_each: "{{ expand('group.covers_with_timers') | map(attribute='entity_id') | list }}"
        sequence:
          # this will fire regardless of whether there's a timer running or it was disabled
          # the implication is: a disabled timer typically means we know a cover is open and that it's on purpose,
          # but we'll remind ourselves anyway, just in case
          - if:
              - condition: template
                value_template: "{{ is_state(repeat.item, 'open') }}"
            then:
              - service: notify.mobile_app_ceres
                data:
                  title: "Security"
                  message: >-
                    {% set name = None %}
                    {% if repeat.item | regex_search("lhs", ignorecase=True) %}
                      {% set name = "Rouvé's garage door" %}
                    {% elif repeat.item | regex_search("rhs", ignorecase=True) %}
                      {% set name = "Pieter's garage door" %}
                    {% else %}
                      {% set name = "The main gate" %}
                    {% endif %}
                    {{ name }} is open.
                  data:
                    # group notifications by the timer entity
                    group: "timer.{{ repeat.item | replace('cover.', '') }}_timer"
                    url: homeassistant://navigate/lovelace/main
                    actions:
                      - action: "CLOSE_COVER"
                        title: "Close now"
                      - action: "EXTEND_COVER_TIMEOUT_10_MIN"
                        title: "Wait 10 min"
                      - action: "EXTEND_COVER_TIMEOUT_30_MIN"
                        title: "Wait 30 min"
                      - action: "DISABLE_COVER_TIMEOUT"
                        title: "Disable"
                    action_data:
                      # convert this to the cover entity to use in the automation that receives this
                      cover_id: "{{ repeat.item }}"
                      timer_id: "timer.{{ repeat.item | replace('cover.', '') }}_timer"
                    push:
                      # perhaps one day it will be possible to use a template to only make it critical under certain conditions
                      sound:
                        name: default
                        critical: 1
                        volume: 1.0
              # saving for later:
              # if e.g. the gate is open, but the timer was disabled, don't start it now, since it was intentional
              # if the timer wasn't disabled, it will be restored, so the normal mechanism will notify
              # in other words, maintain the status quo
              # can also just create a guard condition to not continue (simpler)
              # - if:
              #     - condition: template
              #       value_template: "{{ is_state('timer.' ~ repeat.item | replace('cover.', 'timer.') ~ '_timer', 'idle') }}"
              #   then:
              #     - service: timer.start
              #       target:
              #         entity_id: "timer.{{ repeat.item | replace('cover.', '') }}_timer"
              #       data:
              #         duration: "00:03:00"
            else:
              # if the cover got opened while the server was running, but closed while down
              - service: timer.cancel
                target:
                  entity_id: "timer.{{ repeat.item | replace('cover.', '') }}_timer"

- alias: "Cover Left Open Alert"
  id: "26bf6fd5-1caf-4c21-ac29-8cd7985b2de7"
  initial_state: true
  trigger:
    - platform: event
      event_type: timer.finished
      event_data:
        entity_id: timer.main_gate_timer
    - platform: event
      event_type: timer.finished
      event_data:
        entity_id: timer.lhs_garage_door_timer
    - platform: event
      event_type: timer.finished
      event_data:
        entity_id: timer.rhs_garage_door_timer
  condition:
    - condition: or
      conditions:
        - condition: state
          entity_id: cover.main_gate
          state: "open"
        - condition: state
          entity_id: cover.lhs_garage_door
          state: "open"
        - condition: state
          entity_id: cover.rhs_garage_door
          state: "open"
  action:
    # https://companion.home-assistant.io/docs/notifications/critical-notifications/
    - service: notify.mobile_app_ceres
      data:
        title: "Security"
        # timer.rhs_garage_door_timer -> Pieter's garage door
        message: >-
          {% set name = None %}
          {% if trigger.event.data.entity_id | regex_search("lhs", ignorecase=True) %}
            {% set name = "Rouvé's garage door" %}
          {% elif trigger.event.data.entity_id | regex_search("rhs", ignorecase=True) %}
            {% set name = "Pieter's garage door" %}
          {% else %}
            {% set name = "The main gate" %}
          {% endif %}
          {% set last_opened_entity = trigger.event.data.entity_id | replace('_timer', '_opened') | replace('timer.', 'input_datetime.') %}
          {% set last_opened = as_timestamp(states(last_opened_entity)) %}
          {% set utc_now_ts = as_timestamp(utcnow()) %}
          {{ name }} has been left open for {{ ((utc_now_ts - last_opened) // 60) | int }} min.
        data:
          # todo: clear notifications when closed
          # https://github.com/home-assistant/iOS/issues/579
          # https://github.com/home-assistant/iOS/issues/215
          # https://companion.home-assistant.io/docs/notifications/notifications-basic (to clear and/or replace; note the quotes around 'apns-collapse-id')
          # https://developer.apple.com/documentation/usernotifications/unnotificationrequest/1649634-identifier
          # by apple rules, critical notifications can't be grouped or replaced
          # group notifications by the timer entity
          group: "{{ trigger.event.data.entity_id }}"
          url: homeassistant://navigate/lovelace/main
          actions:
            - action: "CLOSE_COVER"
              title: "Close now"
            - action: "EXTEND_COVER_TIMEOUT_10_MIN"
              title: "Wait 10 min"
            - action: "EXTEND_COVER_TIMEOUT_30_MIN"
              title: "Wait 30 min"
            - action: "DISABLE_COVER_TIMEOUT"
              title: "Disable"
          action_data:
            # convert this to the cover entity to use in the automation that receives this
            cover_id: "{{ trigger.event.data.entity_id | replace('_timer', '') | replace('timer', 'cover') }}"
            timer_id: "{{ trigger.event.data.entity_id }}"
          push:
            # perhaps one day it will be possible to use a template to only make it critical under certain conditions
            sound:
              name: default
              critical: 1
              volume: 1.0
    - service: timer.start
      data:
        entity_id: "{{ trigger.event.data.entity_id }}"

- alias: "Close Cover From Alert Action"
  id: "4a65ac41-3dae-43dd-ae75-486adfc747b7"
  trigger:
    - platform: event
      event_type: mobile_app_notification_action
      event_data:
        action: CLOSE_COVER
  condition:
    # check this for that case where the notification gets sent just as the gate closes
    - condition: template
      value_template: "{{ is_state(trigger.event.data.action_data.cover_id, 'open') }}"
  action:
    - service: cover.close_cover
      data:
        entity_id: "{{ trigger.event.data.action_data.cover_id }}"

- alias: "Extend Cover Timeout From Alert Action"
  id: "1d1b940e-c70d-47e2-bb39-1e984e5514f1"
  trigger:
    - platform: event
      event_type: mobile_app_notification_action
      event_data:
        action: EXTEND_COVER_TIMEOUT_05_MIN
    - platform: event
      event_type: mobile_app_notification_action
      event_data:
        action: EXTEND_COVER_TIMEOUT_10_MIN
    - platform: event
      event_type: mobile_app_notification_action
      event_data:
        action: EXTEND_COVER_TIMEOUT_30_MIN
  action:
    - service: timer.start
      data:
        # {
        #   'id': '0', 
        #   'idx': '0', 
        #   'platform': 
        #     'event', 
        #     'event': <Event mobile_app_notification_action[R]: 
        #       action=EXTEND_COVER_TIMEOUT_05_MIN, 
        #       action_data=
        #         cover_id=cover.rhs_garage_door, 
        #         timer_id=timer.rhs_garage_door_timer>, 
        #       'description': "event 'mobile_app_notification_action'"
        # }
        entity_id: "{{ trigger.event.data.action_data.timer_id }}"
        # in seconds
        duration: "{{ trigger.event.data.action | regex_findall_index(find='\\d+', index=0, ignorecase=False) | int * 60 }}"

- alias: "Disable Cover Timeout From Alert Action"
  id: "a8f612ad-fade-45cb-b774-d65feb8831ae"
  trigger:
    - platform: event
      event_type: mobile_app_notification_action
      event_data:
        action: DISABLE_COVER_TIMEOUT
  action:
    - service: timer.cancel
      target:
        entity_id: "{{ trigger.event.data.action_data.timer_id }}"

- alias: "Stop Cover Timer When Closed"
  id: "7ccfaf0f-ab16-4a3b-9b43-e884138971b2"
  initial_state: true
  trigger:
    - platform: state
      entity_id:
        - cover.main_gate
        - cover.lhs_garage_door
        - cover.rhs_garage_door
      to: "closed"
  mode: queued
  action:
    - service: timer.cancel
      target:
        entity_id: "{{ trigger.entity_id | replace('cover', 'timer') }}_timer"

- alias: "Notify If Cover Was Left Open"
  id: "db54683c-0216-4985-9136-de81baee3e00"
  initial_state: true
  trigger:
    platform: state
    entity_id:
      - cover.main_gate
      - cover.lhs_garage_door
      - cover.rhs_garage_door
    to: "closed"
    # prevent false positive due to flaky connectivity or after loadshedding and sensors being unavailable
    not_from: "unavailable"
  condition:
    condition: template
    value_template: >-
      {% set timer_entity = trigger.entity_id | replace('cover', 'timer') ~ "_timer" %}
      {% set duration = state_attr(timer_entity, 'duration') %}
      {% set (hours, minutes, seconds) = duration.split(':') | map('int') %}
      {% set threshold =  minutes*60 + seconds %}
      {% set last_opened_entity = trigger.entity_id | replace('cover', 'input_datetime') ~ "_opened" %}
      {% set last_opened = as_timestamp(states(last_opened_entity)) %}
      {% set utc_now_ts = as_timestamp(utcnow()) %}
      {{ (utc_now_ts - last_opened) | int >= threshold }}
  action:
    - service: notify.mobile_app_ceres
      data:
        title: "Security"
        # cover.rhs_garage_door -> Pieter's garage door
        message: >-
          {% set name = None %}
          {% if trigger.entity_id | regex_search("lhs", ignorecase=True) %}
            {% set name = "Rouvé's garage door" %}
          {% elif trigger.entity_id | regex_search("rhs", ignorecase=True) %}
            {% set name = "Pieter's garage door" %}
          {% else %}
            {% set name = "The main gate" %}
          {% endif %}
          {% set last_opened_entity = trigger.entity_id | replace('cover', 'input_datetime') ~ "_opened" %}
          {% set last_opened = as_timestamp(states(last_opened_entity)) %}
          {{ name }} has been closed after {{ ((as_timestamp(utcnow()) - last_opened) // 60) | int }} min.
        data:
          # the timer entity
          # cover.rhs_garage_door -> timer.rhs_garage_door_timer
          group: "{{ trigger.entity_id | replace('cover', 'timer') }}_timer"
          url: homeassistant://navigate/lovelace/main

- alias: "Notify If Server Load High"
  id: "720ef41c-589a-4b16-9223-6e49d362e721"
  initial_state: true
  trigger:
    platform: numeric_state
    entity_id: sensor.load_15m
    above: 1
    for:
      minutes: 15
  action:
    - service: notify.mobile_app_ceres
      data:
        title: "System"
        # https://community.home-assistant.io/t/convert-trigger-for-into-a-relative-age/196979
        message: "The server load has been {{ states('sensor.load_15m') }} for {{ trigger.for.seconds // 60 }} minutes."
        data:
          group: "system-load"
          url: homeassistant://navigate/lovelace/devices

- alias: "Set Pieter's Driving State"
  id: "2cc8c07c-384d-4fce-ab9e-11e2c7a25b60"
  initial_state: true
  trigger:
    - platform: state
      entity_id: sensor.pieter_activity_type
      to: "Automotive"  # from anything else
    - platform: state
      entity_id: sensor.pieter_activity_type
      from: "Automotive"  # to anything else
  action:
    - service: "input_boolean.turn_{{ 'on' if is_state('sensor.pieter_activity_type', 'Automotive') else 'off' }}"
      entity_id: input_boolean.pieter_driving

- alias: "Notify If Driving State Changed"
  id: "e614d071-e6b5-4b20-bc33-5c946e6a1400"
  initial_state: false
  trigger:
    platform: state
    entity_id: binary_sensor.pieter_driving
  action:
    - service: notify.mobile_app_ceres
      data:
        title: "Test"
        # message: "Pieter is{% if states('binary_sensor.pieter_driving') == 'off' %} not{% endif %} driving."
        message: "Pieter is{{ ' not' if is_state('binary_sensor.pieter_driving', 'off') }} driving."
        data:
          url: homeassistant://navigate/lovelace/devices

- alias: "Notify If Internet Status Changed"
  id: "ff386c09-1dd5-4381-b404-abad62bffb01"
  initial_state: true
  trigger:
    - platform: state
      entity_id: binary_sensor.internet_connection
  condition:
    - condition: state
      entity_id: binary_sensor.pieter_present
      state: "on"
    - condition: time
      after: "06:00:00"
      before: "23:00:00"
  action:
    - service: notify.mobile_app_ceres
      data:
        title: "Home"
        message: "The Internet is {{ 'available' if is_state('binary_sensor.internet_connection', 'on') else 'unavailable' }}."
        data:
          group: "home-internet"
          url: homeassistant://navigate/lovelace/internet

- alias: "Notify If Extender Status Changed"
  id: "3f6dc923-78cf-4615-b9b9-da84d1a48b39"
  initial_state: true
  trigger:
    - platform: state
      entity_id:
        - binary_sensor.front_extender
        - binary_sensor.back_extender
      to: "off"
      for:
        minutes: 5
  condition:
    - condition: state
      entity_id: binary_sensor.pieter_present
      state: "on"
    - condition: time
      after: "06:00:00"
      before: "23:00:00"
  action:
    - service: notify.mobile_app_ceres
      data:
        title: "Home"
        message: "The {{ state_attr(trigger.entity_id, 'friendly_name') | lower }} is unavailable."
        data:
          group: "home-internet"
          url: homeassistant://navigate/lovelace/internet

- alias: "Notify If Electricity Feed Status Changed"
  id: "c021b272-5076-45d4-9e40-e2db20ae66b6"
  initial_state: true
  trigger:
    platform: state
    entity_id: binary_sensor.electricity_feed
  action:
    - service: notify.mobile_app_ceres
      data:
        title: "Home"
        message: >-
          {% set after = "" %}
          {% set seconds = (as_timestamp(utcnow()) - as_timestamp(trigger.from_state.last_changed)) | int %}
          {% if seconds < 60 %}
            {% set after = seconds ~ " sec" %}
          {% elif seconds < 60*60 %}
            {% set after = seconds // 60 ~ " min" %}
          {% else %}
            {% set h = seconds // (60*60) %}
            {% set m = min(((seconds / (60*60) - seconds // (60*60)) * 60) | round(0), 59) %}
            {% if m < 10 %}
              {% set after = h ~ "h0" ~ m %}
            {% else %}
              {% set after = h ~ "h" ~ m %}
            {% endif %}
          {% endif %}
          The electricity feed has been {{ 'restored after ' ~  after ~ '.' if is_state('binary_sensor.electricity_feed', 'on') else 'cut.' }}
        data:
          group: "home-electricity"
          url: homeassistant://navigate/lovelace/resources

- alias: "Switch On Front Door Light When Any Cover Opened"
  id: "2f00ee50-2203-4ba6-a6f2-37052dfba07e"
  initial_state: true
  trigger:
    platform: state
    entity_id:
      # todo: use group?
      - cover.main_gate
      - cover.lhs_garage_door
      - cover.rhs_garage_door
    to: "open"
  mode: queued
  condition:
    - condition: and
      conditions:
        - condition: or
          conditions:
            - condition: sun
              after: sunset
            - condition: sun
              before: sunrise
        - condition: state
          entity_id: light.front_door
          state: "off"
  action:
    - service: script.turn_on
      target:
        entity_id: script.turn_on_light_and_timer
      data:
        variables:
          light: light.front_door
          duration: "00:03:00"

- alias: "Switch On Or Extend Front Door Light When Cover Closed"
  id: "5ac8367e-9016-49ee-a3cf-64861c03aa17"
  initial_state: true
  trigger:
    - platform: event
      event_type: call_service
      event_data:
        domain: cover
        service: close_cover
  mode: queued
  condition:
    - condition: and
      conditions:
        - condition: or
          conditions:
            - condition: sun
              after: sunset
            - condition: sun
              before: sunrise
        - condition: template
          value_template: >-
            {# if the timer has already run out or it's about to, turn it on for another brief moment #}
            {# https://community.home-assistant.io/t/strptime-vs-as-datetime/381500/7 #}
            {% set timer = 'timer.front_door_timer' %}
            {% set finishes_at = (state_attr(timer, 'finishes_at') | as_datetime) if state_attr(timer, 'finishes_at') else None %}
            {{ finishes_at == None or (finishes_at - now()).seconds < 60 }}
  action:
    - service: script.turn_on
      target:
        entity_id: script.turn_on_light_and_timer
      data:
        variables:
          light: light.front_door
          duration: "00:00:30"

- alias: "Switch Garage Light According To Door Status And Light Conditions"
  id: "33afb33f-1c65-4e9f-83ca-2796d4da5737"
  initial_state: true
  trigger:
    - platform: state
      entity_id:
        - cover.garage_doors
      id: "garage_door_trigger"
    - platform: state
      entity_id: binary_sensor.low_light
      id: "low_light_trigger"
  mode: queued
  condition:
    - condition: or
      conditions:
        - condition: and
          conditions:
            - condition: trigger
              id: "garage_door_trigger"
            - condition: state
              entity_id: binary_sensor.low_light
              state: "on"
        - condition: and
          conditions:
            - condition: trigger
              id: "low_light_trigger"
            - condition: state
              entity_id: cover.garage_doors
              state: "open"
  action:
    # needed because of poor wifi connectivity in that location
    # todo: also needed for turning on
    # if the last door has been closed for a minute and the light is still on, turn it off
    # alternative:
    # https://community.home-assistant.io/t/most-efficient-way-to-track-if-lights-has-been-left-on-for-over-x-minutes/374544/12
    # https://www.home-assistant.io/docs/scripts/#wait-for-trigger
    repeat:
      sequence:
        # bug: what if garage doors go unavailable
        # https://rc.home-assistant.io/blog/2022/04/27/release-20225/#and-there-is-even-more (not_from/to)
        # add a choose for if light not unavailable and covers not unknown
        - service: "light.turn_{{ 'on' if is_state('cover.garage_doors', 'open') else 'off' }}"
          entity_id: light.garage
        - delay:
            seconds: 30
      until:
        - condition: template
          value_template: >-
            {% set covers_state = 'on' if is_state('cover.garage_doors', 'open') else 'off' %}
            {# todo/add: or is_state('light.garage', 'unavailable') or is_state('cover.garage_doors', 'unavailable') #}
            {{ is_state('light.garage', covers_state) }}

- alias: "Update Security Camera Snapshot Gallery"
  id: "41ab0956-cd7b-498d-bf4c-bce81da3c5a3"
  trigger:
    - platform: state
      entity_id: sensor.tmp
      attribute: number_of_files
  mode: queued
  action:
    - service: shell_command.sync_snapshots
    - service: shell_command.trim_snapshots

- alias: "Switch On Inside Lights When Unplugging Phone"
  id: "ca60418c-1870-4c55-845d-4d5eba9aea52"
  trigger:
    platform: state
    entity_id: sensor.ceres_battery_state
    to: 'Not Charging'  # Can be to Charging or Full
  mode: single
  condition:
    - condition: and
      conditions:
        - condition: state
          entity_id: binary_sensor.pieter_present
          state: "on"
        - condition: time
          after: "05:00:00"
          before: "09:00:00"
        # proxy for nobody inside
        - condition: state
          entity_id: light.living_room_lamp
          state: "off"
  action:
    - service: scene.turn_on
      target:
        entity_id: scene.normal_lights

# set up automation on device to immediately update the sensors
# todo: switch off all lights except rouvé's (if on), or at least notify of lights still on
- alias: "Switch Off Bedlamp When Plugging In Phone"
  id: "ffd14255-4539-43e3-b9a5-be8b82a6b5b6"
  trigger:
    platform: state
    entity_id: sensor.ceres_battery_state
    from: 'Not Charging'  # Can be to Charging or Full
  mode: single
  condition:
    - condition: and
      conditions:
        - condition: state
          entity_id: binary_sensor.pieter_present
          state: "on"
        # todo: maybe have different times over weekends or even skip
        # "Time condition windows can span across the midnight threshold if both after and before keys are used."
        # https://www.home-assistant.io/docs/scripts/conditions/#time-condition
        - condition: time
          after: "21:00:00"
          before: "01:00:00"
        # proxy for nobody inside
        - condition: state
          entity_id: light.living_room_lamp
          state: "off"
        - condition: state
          entity_id: light.pieter_bedside
          state: "on"
  action:
    - service: light.turn_off
      entity_id: light.pieter_bedside

- alias: "Turn Off Entertainment System When Idle Or Leaving Room"
  description: "Assuming it's bedtime when the living room lamp is turned off after a certain time"
  id: "7976aaad-a575-442d-ae00-538e5412e92f"
  trigger:
    # todo: we don't know the decoder's state so we could be turning off the tv just because the apple tv isn't playing...
    # - platform: state
    #   entity_id: media_player.living_room
    #   to: "idle"
    #   for:
    #     minutes: 15
    - platform: state
      entity_id: light.living_room_lamp
      to: "off"
  condition:
    - condition: time
      after: "18:00:00"
      before: "01:00:00"
  action:
    # future condition: if only we could know whether it's on
    - service: script.turn_on
      entity_id: script.entertainment_off
    - service: light.turn_off
      target:
        entity_id:
          # this group includes the foyer light, which could be on as warning light when there's no grid power/loadshedding/on backup power
          - light.living_area_group
          - light.kitchen_counter
    - service: script.turn_on
      target:
        entity_id: script.fade_light
      data:
        variables:
          light: light.hallway
          target_brightness_pct: 0
          transition_duration: 60
    # todo: make a group for all lights except bedlamps?

- alias: "Backup Home Assistant"
  id: "57461782-62af-4987-a6ce-46f602fcc417"
  trigger:
    platform: time
    at:
      - "02:05:00"
  condition:
    - condition: time
      weekday:
        - wed
        - sun
  action:
    # https://www.home-assistant.io/integrations/script/#waiting-for-script-to-complete
    - service: script.turn_on
      entity_id: script.make_backup

# backup script: https://gist.github.com/riemers/041c6a386a2eab95c55ba3ccaa10e7b0
- alias: "Notify If No Recent Backup"
  id: "1069834c-2087-48a9-9015-e9a4a86262d9"
  trigger:
    - platform: state
      entity_id: binary_sensor.no_recent_backup
      to: "on"
    # backup check in case there was a restart and the state didn't change
    - platform: time
      at: "09:00:00"
  mode: single
  condition:
    - condition: state
      entity_id: binary_sensor.no_recent_backup
      state: "on"
  action:
    - service: notify.mobile_app_ceres
      data:
        title: "System"
        # https://community.home-assistant.io/t/duplicate-ios-companion-app-notifications/406161
        message: "No recent backup found."
        data:
          group: "system-backup"
          url: homeassistant://navigate/lovelace/devices

- alias: "Notify If New Backup Found"
  id: "f5382369-7a98-4cc0-bd63-ecf1c6e6f288"
  trigger:
    - platform: state
      entity_id: sensor.last_backup
  mode: single
  condition:
    condition: template
    value_template: >-
      {% set last_backup = states('sensor.last_backup') | as_datetime %}
      {{ ((utcnow() - last_backup).seconds) < 60 }}
  action:
    - service: notify.mobile_app_ceres
      data:
        title: "System"
        message: "A new Home Assistant backup was made."
        data:
          group: "system-backup"
          url: homeassistant://navigate/lovelace/devices

- alias: "Low Server Battery"
  id: "cc72f00c-96e6-49eb-84f3-c72b09f49f7f"
  initial_state: true
  trigger:
    - platform: template
      value_template: "{{ states('sensor.home_assistant_server_battery') | int <= 10 }}"
  action:
    - service: notify.mobile_app_ceres
      data:
        title: "System"
        message: "Server battery is running low!"
        data:
          group: "system-battery"
          url: homeassistant://navigate/lovelace/devices

- alias: "Disable Guest Mode When Getting Home"
  id: "a113f957-602f-44ca-b1a4-559bafab4835"
  initial_state: true
  trigger:
    # don't trigger on binary_sensor.anybody_home, because, should we be away when turning this on,
    # it will immediately be turned off, as guest mode will turn the binary sensor on
    # ideally, guest mode should be turned on while home, but reality doesn't always play out like that
    - platform: state
      entity_id: binary_sensor.family_present
      to: "on"
  condition:
    - condition: state
      entity_id: switch.guest_mode
      state: "on"
  action:
    - service: switch.turn_off
      entity_id: switch.guest_mode

- alias: "Guest Mode Enabled Alert"
  id: "6f1be18f-6a43-4512-b537-0bd8aa1581d2"
  trigger:
    - platform: state
      entity_id: switch.guest_mode
      to: "on"
  action:
    - service: notify.mobile_app_ceres
      data:
        title: "Special Mode"
        message: "Guest mode enabled."
        data:
          actions:
            - action: "DISABLE_GUEST_MODE"
              title: "Disable"
          group: "guest-mode"
          url: homeassistant://navigate/lovelace/main

- alias: "Guest Mode Disabled Alert"
  id: "f0aff94c-3b99-4917-b399-6f709cdbf80b"
  trigger:
    - platform: state
      entity_id: switch.guest_mode
      to: "off"
  action:
    - service: notify.mobile_app_ceres
      data:
        title: "Special Mode"
        message: "Guest mode disabled."
        data:
          actions:
            - action: "ENABLE_GUEST_MODE"
              title: "Enable"
          group: "guest-mode"
          url: homeassistant://navigate/lovelace/main

- alias: "Enable Guest Mode From Alert Action"
  id: "cfeb5963-4854-439b-952e-f1ac37fd125d"
  initial_state: true
  trigger:
    - platform: event
      event_type: mobile_app_notification_action
      event_data:
        action: ENABLE_GUEST_MODE
  action:
    - service: switch.turn_on
      entity_id: switch.guest_mode

- alias: "Disable Guest Mode From Alert Action"
  id: "0ad8eed7-dbd3-412f-b1d8-99f3ee74368c"
  initial_state: true
  trigger:
    - platform: event
      event_type: mobile_app_notification_action
      event_data:
        action: DISABLE_GUEST_MODE
  action:
    - service: switch.turn_off
      entity_id: switch.guest_mode

- alias: "Alert If Garages Opened Or Closed When Not Supposed To"
  id: "ad4db54e-fbb3-4377-9711-4731d58da0f5"
  initial_state: true
  trigger:
    platform: state
    entity_id:
      - cover.lhs_garage_door
      - cover.rhs_garage_door
    from:
      - "open"
      - "closed"
    to:
      - "open"
      - "closed"
  condition:
    - condition: state
      entity_id: binary_sensor.anybody_home
      state: "off"
  action:
    - variables:
        message: >-
          {% set name = None %}
          {% if trigger.entity_id | regex_search("lhs", ignorecase=True) %}
            {% set name = "Rouvé's garage door" %}
          {% else %}
            {% set name = "Pieter's garage door" %}
          {% endif %}
          {% set action = 'opened' if (trigger.to_state.state == 'open') else 'closed' %}
          {{ name }} has been {{ action }}.
    # https://companion.home-assistant.io/docs/notifications/notification-commands#request-location-updates
    - service: notify.mobile_app_ceres
      data:
        message: "request_location_update"
    - service: notify.mobile_app_rouve
      data:
        message: "request_location_update"
    - delay:
        seconds: 45
    - choose:
        - conditions:
            - condition: template
              value_template: "{{ trigger.to_state.state == 'open' }}"
          sequence:
            - service: notify.mobile_app_ceres
              data:
                title: "Security"
                message: "{{ message }}"
                data:
                  group: "{{ trigger.entity_id }}"
                  url: homeassistant://navigate/lovelace/security
                  actions:
                    - action: "CLOSE_COVER"
                      title: "Close now"
                  action_data:
                    # convert this to the cover entity to use in the automation that receives this
                    cover_id: "{{ trigger.entity_id | replace('_timer', '') | replace('timer', 'cover') }}"
                    timer_id: "{{ trigger.entity_id }}"
                  # todo: make critical?
                  # todo: alert/call security company
      default:
        - service: notify.mobile_app_ceres
          data:
            title: "Security"
            message: "{{ message }}"
            data:
              group: "{{ trigger.entity_id }}"
              url: homeassistant://navigate/lovelace/security

- alias: "Alert If Gate Opened Or Closed When Not Supposed To"
  id: "62a52103-4d0d-429e-a59a-fc674d72f3ee"
  initial_state: true
  trigger:
    platform: state
    entity_id:
      - cover.main_gate
    # prevent false positive due to flaky connectivity or after loadshedding and sensors being unavailable
    not_from: "unavailable"
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: binary_sensor.anybody_home
        state: "off"
      - condition: state
        entity_id: binary_sensor.tenant_present
        state: "off"
      - condition: state
        entity_id: binary_sensor.housekeeper_mobile_phone
        state: "off"
  action:
    - variables:
        message: >-
          {% set action = 'opened' if (trigger.to_state.state == 'open') else 'closed' %}
          The main gate has been {{ action }}.
    # https://companion.home-assistant.io/docs/notifications/notification-commands#request-location-updates
    - service: notify.mobile_app_ceres
      data:
        message: "request_location_update"
    - service: notify.mobile_app_rouve
      data:
        message: "request_location_update"
    - service: homeassistant.update_entity
      target:
        entity_id: binary_sensor.tenant_mobile_phone
    - delay:
        seconds: 45
    - choose:
        - conditions:
            - condition: template
              value_template: "{{ trigger.to_state.state == 'open' }}"
          sequence:
            - service: notify.mobile_app_ceres
              data:
                title: "Security"
                message: "{{ message }}"
                data:
                  group: "{{ trigger.entity_id }}"
                  url: homeassistant://navigate/lovelace/security
                  # https://companion.home-assistant.io/docs/notifications/actionable-notifications#building-notification-action-scripts
                  actions:
                    - action: "CLOSE_COVER"
                      title: "Close now"
                  action_data:
                    # convert this to the cover entity to use in the automation that receives this
                    cover_id: "{{ trigger.entity_id | replace('_timer', '') | replace('timer', 'cover') }}"
                    timer_id: "{{ trigger.entity_id }}"
                  # todo: make critical?
                  # todo: alert/call security company
      default:
        - service: notify.mobile_app_ceres
          data:
            title: "Security"
            message: "{{ message }}"
            data:
              group: "{{ trigger.entity_id }}"
              url: homeassistant://navigate/lovelace/main

- alias: "Save Last Smart Bulb State"
  id: "ba2755f4-d8a2-4f1c-a7f8-32642c780ee7"
  initial_state: true
  trigger:
    - platform: state
      entity_id:
        - light.dining_room
        - light.music_room
        - light.foyer
        - light.hallway
  mode: parallel
  condition:
    # power was NOT recently restored (2 min), causing the light to turn on and connect to hass, and trigger this automation
    # it would also mean it wasn't a hass restart
    # - condition: template
    #   value_template: "{{ ((as_timestamp(utcnow()) - as_timestamp(states.binary_sensor.electricity_feed.last_changed)) / 60) > 2 }}"
    - condition: state
      entity_id: binary_sensor.electricity_feed
      state: "on"
  action:
    - service: "input_boolean.turn_{{ 'on' if is_state(trigger.entity_id, 'on') else 'off' }}"
      data:
        entity_id: "{{ trigger.entity_id | replace('light.', 'input_boolean.') }}_state"

- alias: "Restore Smart Bulb Statuses After Power Restored"
  id: "1d1af600-8b45-49c9-9b10-4d7616080867"
  initial_state: true
  trigger:
    # tp-link smart bulbs always turn on when power is connected
    # this will thus trigger the moment the smart bulb reconnects to the network and hass
    - platform: state
      entity_id:
        - light.dining_room
        - light.music_room
        - light.foyer
        - light.hallway
      to: "on"
  mode: parallel
  # some other ideas:
  # - simplify all of this by only have a time window condition and always turn the lights off (say between 11 pm and 6 am)
  #   downside is that you simply can't turn on the lights during those times.
  condition:
    - condition: and
      conditions:
        # only if the light state and saved state disagrees: trigger says on; state says off
        - condition: template
          value_template: "{{ is_state(trigger.entity_id | replace('light.', 'input_boolean.') ~ '_state', 'off') }}"
        # power was recently restored (5 min)
        # what if the sensor didn't pick up the outage if it was too short for it to update?
        # this solution won't currently work for that scenario
        - condition: template
          value_template: "{{ ((as_timestamp(utcnow()) - as_timestamp(states.binary_sensor.electricity_feed.last_changed)) / 60) <= 5 }}"
        # but the electricity feed sensor didn't update due to a hass restart (2 min)
        # in other words, give 2 min for HA to restart and then, due to that, don't change the smart bulb statuses
        - condition: template
          value_template: "{{ (utcnow() - states('sensor.home_assistant_uptime') | as_datetime).seconds / 60 > 2 }}"
  action:
    - service: light.turn_off
      data:
        entity_id: "{{ trigger.entity_id }}"

# udevadm monitor
# udevadm info --path=/sys/class/power_supply/AC0
# /etc/udev/rules.d/60-power.rules
# SUBSYSTEM=="power_supply",ENV{POWER_SUPPLY_NAME}=="AC0",RUN+="/usr/bin/curl -s -X POST http://<host>:<port>/api/webhook/<webhook_id> -d 'status=$env{POWER_SUPPLY_ONLINE}'"
# udevadm control --reload-rules && udevadm trigger
# sudo /etc/init.d/udev restart
# udevadm control --log-priority=debug
# (sudo) journalctl -f
- alias: "Update Server Power Status"
  id: "3b2aed6b-5894-4339-acec-19e4e8ce97c7"
  initial_state: true
  trigger:
    - platform: webhook
      webhook_id: server_power_connected
      local_only: true
  mode: queued
  action:
    # sensor definition: platform: linux_battery
    - service: homeassistant.update_entity
      entity_id: sensor.home_assistant_server_battery

# https://apple.stackexchange.com/questions/363416/how-to-check-if-any-audio-is-currently-playing-via-terminal
# $ if [[ "$(pmset -g | grep ' sleep')" == *"coreaudiod"* ]]; then echo audio is playing; else echo no audio playing; fi
- alias: "Update Gaia Bluetooth Audio Connection Status"
  id: "84c4f680-4f0c-4ded-a42f-c931edaee154"
  initial_state: true
  trigger:
    - platform: webhook
      webhook_id: gaia_bluetooth_audio_connected
      local_only: true
  mode: queued
  action:
    - service: "input_boolean.turn_{{ 'on' if (trigger.data['status'] | int) else 'off' }}"
      data:
        entity_id: input_boolean.gaia_bluetooth_audio_connected

- alias: "Proximity Updates"
  id: "355d7452-0b56-468b-b434-d0f4b430078b"
  initial_state: false
  trigger:
    - platform: state
      entity_id: proximity.home
  action:
    - service: persistent_notification.create
      data:
        title: Proximity
        message: >-
          Distance: {{ states('proximity.home') }}{{ state_attr('proximity.home', 'unit_of_measurement') }}; Direction of travel: {{ state_attr('proximity.home', 'dir_of_travel') }}.

- alias: "Shut Down Devices Before Loadshedding"
  id: "015daeee-a776-4220-b5cb-0f4949dde6a0"
  initial_state: false
  trigger:
    # https://www.home-assistant.io/docs/automation/trigger/#calendar-trigger
    # https://www.home-assistant.io/integrations/calendar/#automation
    # manual (fallback option)
    - platform: calendar
      entity_id: calendar.loadshedding
      event: start
      offset: "-00:05:00"
    # automatic
    # really need an offset option here
    # - platform: time
    #   at: sensor.loadshedding_start_time
    - platform: template
      value_template: >-
        {% set t = (states('sensor.loadshedding_start_time') | as_datetime | as_local - timedelta(minutes=5)).strftime('%Y-%d-%m %H:%M') %}
        {% set n = now().strftime('%Y-%d-%m %H:%M') %}
        {{ n == t }}
  mode: single
  action:
    - service: notify.mobile_app_ceres
      data:
        title: "System"
        message: "Systems shutting down prior to loadshedding."
        data:
          group: "system-general"
          url: homeassistant://navigate/lovelace/devices
    - service: script.turn_on
      target:
        entity_id: script.shutdown_all_remote_hosts
    - delay: "00:05:00"
    - service: script.turn_on
      entity_id: script.entertainment_off

- alias: "Shut Down Server"
  id: "3fd83ac9-dc07-40d7-a9d1-c50c123b32ff"
  initial_state: true
  variables:
    timeout: 90
  trigger:
    - platform: template
      value_template: "{{ is_state('sensor.home_assistant_server_battery_status', 'Discharging') }}"
  mode: single
  action:
    - service: homeassistant.update_entity
      target:
        entity_id: binary_sensor.electricity_feed
    - service: notify.mobile_app_ceres
      data:
        title: "System"
        message: "Server will shut down in {{ timeout }} seconds."
        data:
          group: "system-general"
          url: homeassistant://navigate/lovelace/devices
    - wait_template: "{{ not is_state('sensor.home_assistant_server_battery_status', 'Discharging') }}"
      timeout:
        seconds: "{{ timeout }}"
      continue_on_timeout: true
    - if:
        - "{{ wait.completed }}"
      then:
        - service: notify.mobile_app_ceres
          data:
            title: "System"
            message: "Server shutdown cancelled: Power was restored."
            data:
              group: "system-general"
              url: homeassistant://navigate/lovelace/devices
      else:
        - service: input_boolean.turn_on
          entity_id: input_boolean.server_shut_down_automatically
        - service: homeassistant.update_entity
          target:
            entity_id: binary_sensor.electricity_feed
        - service: notify.mobile_app_ceres
          data:
            title: "System"
            message: "Server shutting down."
            data:
              group: "system-general"
              url: homeassistant://navigate/lovelace/devices
        - delay:
            seconds: 5
        - service: shell_command.shutdown_server

- alias: "Download Damlevels Data"
  id: "0cb4d6ba-5a63-45f7-8adc-efb98724a44e"
  trigger:
    - platform: time
      at: "05:00:00"
  action:
    - service: shell_command.download_latest_dam_levels

- alias: "Notify Doorbell Rang"
  id: "46054fb3-4e60-40ad-9e0f-e22b8137b23c"
  initial_state: true
  trigger:
    - platform: state
      entity_id: binary_sensor.doorbell_rang
      to: "on"
  mode: queued
  action:
    - service: camera.snapshot
      data:
        entity_id: camera.doorbell
        # todo: update security view; make capture scripts generic
        filename: '/tmp/camera.doorbell_{{ now().strftime("%Y%m%d-%H%M%S") }}.jpg'
    # todo: script.security_camera_create_snapshot
    - service: notify.mobile_app_ceres
      data:
        title: Security
        message: "Someone rang the doorbell."
        # todo: thumbnail, url
        # data:
        #   group: "security-camera-snapshots"
        #   attachment:
        #     url: !secret doorbell_camera_last_snapshot_url

- alias: "Toggle Pieter's Bedside Lamp"
  id: "8f52a6f5-0ce5-4024-948d-bb641166bc00"
  initial_state: true
  # https://community.home-assistant.io/t/automation-created-using-a-blueprint-not-showing-up-in-ui-after-creating/256753
  use_blueprint:
    path: shelly_button.yaml
    input:
      button_device_id: ed95f30c451de3426bc63770935ebc18
      light_entity_id: light.pieter_bedside
      single_press_profile: pieter
      double_press_profile: security

- alias: "Dim Pieter's Bedside Lamp"
  # when the one bedlight is turned off, dim the other
  id: "29c4493b-3254-4622-9456-e80ede2cfd99"
  initial_state: true
  trigger:
    - platform: state
      entity_id: light.rouve_bedside
      to: "off"
      id: "light.pieter_bedside"
    - platform: state
      entity_id: light.pieter_bedside
      to: "off"
      id: "light.rouve_bedside"
  condition:
    - condition: time
      after: "21:30:00"
      before: "01:00:00"
    - condition: state
      # on if either or both are on
      entity_id: light.main_bedroom_group
      state: "on"
  action:
    - service: script.turn_on
      target:
        entity_id: script.turn_on_light
      data:
        variables:
          light: "{{ trigger.id }}"
          profile: low

- alias: "Toggle Rouvé's Bedside Lamp"
  id: "6bb6fa7a-3385-4d78-9a30-6f49c90adbf9"
  initial_state: true
  # https://community.home-assistant.io/t/automation-created-using-a-blueprint-not-showing-up-in-ui-after-creating/256753
  use_blueprint:
    path: shelly_button.yaml
    input:
      button_device_id: b7cb6f66fe4f1eefbf0de8480962bd23
      light_entity_id: light.rouve_bedside
      single_press_profile: rouve
      double_press_profile: security

- alias: "Toggle Dining Room Light"
  id: "3cd02beb-7a1a-440a-9507-fb555ff9bb98"
  initial_state: true
  use_blueprint:
    path: shelly_button.yaml
    input:
      button_device_id: f1a926dd450fbe85ed9bafece8b719b3
      light_entity_id: light.dining_room
      single_press_profile: dim
      double_press_profile: security

- alias: "Toggle Hallway Light"
  id: "58a877b7-eed8-4fd7-897c-51eeed892ad7"
  initial_state: true
  use_blueprint:
    path: shelly_button.yaml
    input:
      button_device_id: 16bb98a28aa167819bff6fc45f178899
      light_entity_id: light.hallway
      single_press_profile: dim
      double_press_profile: security

- alias: "Alert Vacation Start"
  id: "f1be4ad3-042c-4cbd-bb91-99da7bdc5dab"
  initial_state: true
  trigger:
    platform: time
    at: "21:00:00"
  condition: "{{ (states('input_datetime.vacation_start') | as_datetime - timedelta(days=1)).date() == now().date() }}"
  action:
    - service: notify.mobile_app_ceres
      data:
        title: "Routine Change"
        message: "Wake-up lights will be suspended from tomorrow until {{ states('input_datetime.vacation_end') }}."
        data:
          group: "routine-change"
          url: homeassistant://navigate/lovelace/main

- alias: "Alert Vacation End"
  id: "e1ce2573-356f-467d-93e4-c7bcb541db9a"
  initial_state: true
  trigger:
    platform: time
    at: "21:00:00"
  # google calendar all-day events go up to midnight of the next day – but this is already catered for when we set the helpers
  # old: condition: "{{ (states('input_datetime.vacation_end') | as_datetime).date() == now().date() }}"
  # new: if today is not a work day but tomorrow is (and today isn't weekend, unless it's part of the vacation)
  # but do we want this every sunday night to trigger? what if sunday is the end of the vacation?
  condition: >-
    {{
      is_state('binary_sensor.workday', 'off') and
      is_state('binary_sensor.workday_tomorrow', 'on') and
        (
          now().strftime('%a') != 'Sun' or
          (states('input_datetime.vacation_end') | as_datetime).date() == now().date()
        )
    }}
  action:
    - service: notify.mobile_app_ceres
      data:
        title: "Routine Change"
        message: "Wake-up lights will be resumed from tomorrow at {{ states('input_datetime.wake_up_time')[:5] }}."
        data:
          group: "routine-change"
          url: homeassistant://navigate/lovelace/main

- alias: "Check For Low Batteries"
  id: "5ff59069-6f3c-4f9d-bc66-b50bea8e184e"
  initial_state: true
  variables:
    level: 5
    # https://community.home-assistant.io/t/variable-in-automation-not-working-as-expected/431591/2
    monitored_batteries: >-
      {{
        states.sensor
          | selectattr('attributes.monitor', 'defined')
          | selectattr('attributes.monitor', 'eq', True)
          | rejectattr('state', 'in', ['unavailable', 'unknown', 'none'])
          | selectattr('attributes.device_class', 'eq', 'battery')
          | map(attribute='entity_id')
          | list
      }}
  trigger:
    # what if the server is down at this time? for now, we don't care: batteries might last till the next day and there's a flat battery check
    platform: time
    at: "09:00:00"
  condition: >-
    {{
      expand(monitored_batteries)
        | map(attribute='state')
        | map('int')
        | select('lt', level)
        | list
        | count
        > 0
    }}
  action:
    - service: notify.mobile_app_ceres
      data:
        # icon: https://companion.home-assistant.io/docs/notifications/notifications-basic/#notification-icon
        #       https://companion.home-assistant.io/docs/notifications/actionable-notifications/#icon-values
        title: "Batteries"
        # https://community.home-assistant.io/t/recommended-ways-to-manage-devices-and-entities-names/243815/12
        message: >
          The following devices have less than {{ level }}% charge:
          {%- for b in monitored_batteries %}
            {%- if states(b) | int < level and not is_state(b, 'unavailable') %}
            - {{ state_attr(b, 'friendly_name') | replace(' Battery', '') }}: {{ states(b) | int }}%
            {%- endif -%}
          {%- endfor %}
        data:
          group: "batteries"
          url: homeassistant://navigate/lovelace/devices
          # https://companion.home-assistant.io/docs/notifications/notifications-basic/#notification-icon
          # https://community.home-assistant.io/t/mobile-notification-icon-not-showing-up/408050
          # icon_url: "https://github.com/home-assistant/assets/blob/master/logo/logo-small.png?raw=true"

# https://community.home-assistant.io/t/why-isnt-there-a-groups-entities-state-trigger/467179
# https://community.home-assistant.io/t/unleash-the-power-of-expand-for-template-sensors/136941/22
# https://community.home-assistant.io/t/trigger-an-automation-based-on-a-groups-individual-entity-state-change/383560
# https://community.home-assistant.io/t/single-automation-for-all-lights/375028/8
# todo: alert when battery at 1%
- alias: "Check For Flat Batteries"
  id: "ef76e5b9-fa6d-4940-b89a-ba24cef91463"
  initial_state: true
  variables:
    level: 0
    monitored_batteries: >-
      {{
        states.sensor
          | selectattr('attributes.monitor', 'defined')
          | selectattr('attributes.monitor', 'eq', True)
          | rejectattr('state', 'in', ['unavailable', 'unknown', 'none'])
          | selectattr('attributes.device_class', 'eq', 'battery')
          | map(attribute='entity_id')
          | list
      }}
  trigger:
    - platform: state
      entity_id: sensor.number_of_flat_batteries
  condition: >-
    {{
      expand(monitored_batteries)
        | map(attribute='state')
        | map('int')
        | select('eq', level)
        | list
        | count
        > 0
    }}
  action:
    - service: notify.mobile_app_ceres
      data:
        title: "Batteries"
        message: >
          The following devices have no charge:
          {%- for b in monitored_batteries %}
            {%- if states(b) | int == level and not is_state(b, 'unavailable') %}
            - {{ state_attr(b, 'friendly_name') | replace(' Battery', '') }}
            {%- endif -%}
          {%- endfor %}
        data:
          group: "batteries"
          url: homeassistant://navigate/lovelace/devices

# polling should be turned off
# https://github.com/home-assistant/core/issues/71563
- alias: "Update DB Size"
  id: "7219415c-c1e4-40dd-a429-2f4eccc7da76"
  initial_state: true
  trigger:
    platform: time_pattern
    hours: "/3"
  action:
    - service: homeassistant.update_entity
      target:
        entity_id: sensor.db_size

- alias: "Turn Audio On When Apple TV Turned On"
  id: "7c3646d2-8fe8-4378-a6f5-979e16cc40ff"
  initial_state: true
  trigger:
    platform: state
    entity_id: media_player.living_room
    from: standby
    to: idle
  mode: single
  action:
    - service: script.turn_on
      entity_id: script.hk_3380_power_on
    - delay: "00:00:10"
    - service: script.turn_on
      entity_id: script.samsung_tv_hdmi2

- alias: "Change On Air Status"
  id: "0e9a98bc-dba8-4354-8bad-87b44b50703a"
  initial_state: true
  trigger:
    platform: state
    entity_id: binary_sensor.on_air
  mode: single
  action:
    - service: "switch.turn_{{ 'on' if is_state('binary_sensor.on_air', 'on') else 'off' }}"
      entity_id: switch.on_air

- alias: "Pollen Levels Update"
  id: "eeb7f4a7-367d-4aee-b4d5-cf84da3b1323"
  initial_state: true
  trigger:
    # If only entity_id is given, the trigger will fire for all state changes, even if only state attributes change.
    # https://www.home-assistant.io/docs/automation/trigger/#state-trigger
    - platform: state
      entity_id: sensor.overall_pollen_risk
  mode: single
  action:
    - service: notify.family
      data:
        title: "Health"
        # https://community.home-assistant.io/t/trigger-to-from-attribute/325345
        # https://community.home-assistant.io/t/access-attribute-of-from-state/380497
        message: >-
          {%- macro build_item(sensor) -%}
            {%- set attribute = sensor.split('.')[1] -%}
            {%- set name = state_attr(sensor, 'friendly_name') -%}
            {%- set from = trigger.from_state.attributes[attribute] | lower -%}
            {%- set to = trigger.to_state.attributes[attribute] | lower -%}
            {%- if from != to -%}
              {{ name }}: {{ from }} to {{ to }}
            {%- else -%}
              {{ name }}: {{ to }}
            {%- endif -%}
          {%- endmacro -%}
          {%- set sensors = ['sensor.tree_pollen', 'sensor.grass_pollen', 'sensor.weed_pollen', 'sensor.mould_spores'] -%}
          {%- set summary = '' -%}
          {%- set from_state_label = trigger.from_state.attributes.label | lower -%}
          {%- set to_state_label = trigger.to_state.attributes.label | lower -%}
          {%- if from_state_label != trigger.to_state.attributes.label -%}
            {%- set summary = 'Pollen levels changed from ' ~ from_state_label ~ ' to ' ~ to_state_label ~ '.' -%}
          {%- else -%}
            {%- set summary = 'Pollen levels are ' ~ to_state_label ~ '.' -%}
          {%- endif -%}
          {{ summary }}
          {%- for sensor in sensors %}
            - {{ build_item(sensor) }}
          {%- endfor %}
        data:
          group: "environment"
          url: homeassistant://navigate/lovelace/environment

- alias: "High UV Notification"
  id: "101c7f2d-6839-4a8c-be1a-0de46ed70477"
  initial_state: true
  trigger:
    - platform: numeric_state
      entity_id: sensor.openweathermap_uv_index
      above: 5
  mode: single
  action:
    - service: notify.family
      data:
        title: "Health"
        message: >
          UV radiation is high. Remember to apply sunscreen.
        data:
          group: "environment"
          url: homeassistant://navigate/lovelace/environment

- alias: "Shut Down Gaia Notification"
  id: "ef1a7da7-d878-4456-a44c-9615b9712c2a"
  initial_state: false
  trigger:
    - platform: time
      at: sensor.loadshedding_start_time
  condition:
    - condition: state
      entity_id: binary_sensor.gaia_active
      state: "on"
  action:
    - service: notify.mobile_app_ceres
      data:
        title: "Loadshedding"
        message: "Shut Gaia down now!"
        data:
          group: "home-electricity"
          url: homeassistant://navigate/lovelace/devices
          push:
            sound:
              name: default
              critical: 1
              volume: 1.0
