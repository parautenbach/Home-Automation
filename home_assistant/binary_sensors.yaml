- platform: template
  sensors:
    # https://www.home-assistant.io/integrations/bayesian/
    pieter_present:
      friendly_name: "Pieter Present"
      value_template: >-
        {{ is_state("input_boolean.pieter_present", "on") or
           is_state("person.pieter_rautenbach", "home") }}
    rouve_present:
      friendly_name: "RouvÃ© Present"
      value_template: >-
        {{ is_state("input_boolean.rouve_present", "on") or
           is_state("person.rouve_rautenbach", "home") }}
    tenant_present:
      friendly_name: "Tenant Present"
      delay_off:
        minutes: 15
      value_template: >-
        {{ is_state("binary_sensor.tenant_mobile_phone", "on") }}
    housekeeper_present:
      friendly_name: "Housekeeper Present"
      delay_off:
        minutes: 15
      value_template: >-
        {{ is_state("binary_sensor.housekeeper_mobile_phone", "on") }}
    contractor_mode:
      friendly_name: "Contractor Mode"
      value_template: >-
        {{ is_state("input_boolean.contractor_mode", "on") }}
    anybody_home:
      friendly_name: "Anybody Home"
      value_template: >-
        {{ is_state("binary_sensor.pieter_present", "on") or is_state("binary_sensor.rouve_present", "on") or
           is_state("input_boolean.guest_mode", "on") or is_state("input_boolean.contractor_mode", "on") }}
      icon_template: >-
        {% if is_state("binary_sensor.pieter_present", "on") or is_state("binary_sensor.rouve_present", "on") or
              is_state("input_boolean.guest_mode", "on") or is_state("input_boolean.contractor_mode", "on") %}
          mdi:home-account
        {% else %}
          mdi:home
        {% endif %}
    pieter_driving:
      friendly_name: "Pieter Driving"
      value_template: >-
        {{ is_state("input_boolean.pieter_driving", "on") }}
    electricity_feed:
      friendly_name: "Electricity"
      # https://www.home-assistant.io/integrations/binary_sensor/#device-class
      device_class: power
      # value_template: >-
      #   {{ expand('group.electricity_feed_indicators') | rejectattr('state', 'in', ['unavailable', 'unknown']) | list != [] }}
      #   {# states('switch.shelly1_b961d2') not in ['unknown', 'unavailable'] #}
      # icon_template: >-
      #   {# if states('switch.shelly1_b961d2') not in ['unknown', 'unavailable'] #}
      #   {% if expand('group.electricity_feed_indicators') | rejectattr('state', 'in', ['unavailable', 'unknown']) | list != [] %}
      #     mdi:power-plug
      #   {% else %}
      #     mdi:power-plug-off
      #   {% endif %}
      value_template: >-
        {{ not is_state_attr('sensor.home_assistant_server_battery', 'status', 'Discharging') }}
      icon_template: >-
        {% if is_state_attr('sensor.home_assistant_server_battery', 'status', 'Discharging') %}
          mdi:power-plug-off
        {% else %}
          mdi:power-plug
        {% endif %}
    internet_connection:
      friendly_name: "Internet"
      device_class: connectivity
      value_template: >-
        {{ is_state('binary_sensor.internet', 'on') }}
      icon_template: >-
        {% if is_state('binary_sensor.internet', 'on') %}
          mdi:server-network
        {% else %}
          mdi:server-network-off
        {% endif %}
    foyer_motion_detected:
      friendly_name: "Foyer Motion Detector"
      device_class: motion
      # motion_sensor_3 is the occupancy sensor and not the raw motion sensor and is delayed in the homebridge config by 5 sec
      value_template: >-
        {{ is_state('binary_sensor.foyer_occupancy_homebridge', 'on') }}
    no_recent_backup:
      friendly_name: "Recent Backup Problem"
      device_class: problem
      # get the last file, extract the date and compare
      value_template: >-
        {% set last_backup = (0 if states('sensor.last_backup') == "unknown" else states('sensor.last_backup')) | as_datetime %}
        {{ 'on' if ((utcnow() - last_backup).days > 4) else 'off' }}
      icon_template: >-
        {{ state_attr('sensor.last_backup', 'icon') or "mdi:file-alert-outline" }}
    golden_hour:
      # https://community.home-assistant.io/t/wth-is-there-no-golden-hour-data-available-to-trigger-light-automations/220359/3
      friendly_name: Golden Hour
      value_template: >
        {{ -4 < state_attr('sun.sun','elevation') | float < 6 }}
      icon_template: mdi:weather-sunset
    hacs_updater:
      friendly_name: HACS Updater
      device_class: update
      value_template: >
       {{ states('sensor.hacs') | int(0) > 0 }}
    ha_updater:
      friendly_name: HA Updater
      device_class: update
      value_template: >-
        {{ is_state('binary_sensor.python_package_index_pypi_update_available', 'on') }}
      attribute_templates:
        latest_version: >-
          {{ states('sensor.python_package_index_pypi') }}
        current_version: >-
          {{ states('sensor.current_version') }}
    low_light:
      # alternative: (states('sensor.sun_illuminance') != 'unknown' and (states('sensor.sun_illuminance') | int < 15320))
      friendly_name: Low Light
      value_template: >
        {{ states('sensor.illuminance') | int(0) < 7500 or
           states('sensor.solar_angle') | int(0) < 5 or
           'fog' in states('weather.openweathermap_hourly') or
           'cloudy' in states('weather.openweathermap_hourly') or
           'rain' in states('weather.openweathermap_hourly') or
           'pouring' in states('weather.openweathermap_hourly') }}
    workday:
      friendly_name: Workday Today
      value_template: >
        {% set on_vacation = as_timestamp(states('input_datetime.vacation_start')) <= as_timestamp(now().date()) <= as_timestamp(states('input_datetime.vacation_end')) %}
        {{ is_state('binary_sensor.workday_sensor', 'on') and not on_vacation }}
    workday_tomorrow:
      friendly_name: Workday Tomorrow
      value_template: >
        {% set on_vacation_tomorrow = as_timestamp(states('input_datetime.vacation_start')) <= as_timestamp((now() + timedelta(days=1)).date()) <= as_timestamp(states('input_datetime.vacation_end')) %}
        {{ is_state('binary_sensor.workday_sensor_tomorrow', 'on') and not on_vacation_tomorrow }}
    nighttime:
      friendly_name: Night-time
      value_template: "{{ state_attr('sun.sun', 'elevation') < 0 }}"
    on_air:
      # https://github.com/home-assistant/iOS/issues/1903
      value_template: >
        {{ states('binary_sensor.gaia_audio_input_in_use') }}

- platform: group
  name: "Family Present"
  device_class: presence
  entities:
    - binary_sensor.pieter_present
    - binary_sensor.rouve_present

# https://github.com/home-assistant/core/issues/43188
# https://github.com/home-assistant/core/pull/43869
- platform: command_line
  name: CCTV
  command: 'ping -n -q -W 1 -c 1 securitypi.local > /dev/null 2>&1 && echo success || echo fail'
  device_class: connectivity
  payload_on: "success"
  payload_off: "fail"
  scan_interval: 30

- platform: command_line
  name: Thor
  command: 'ping -n -q -W 1 -c 1 thor.local > /dev/null 2>&1 && echo success || echo fail'
  device_class: connectivity
  payload_on: "success"
  payload_off: "fail"
  scan_interval: 30

- platform: command_line
  name: Rasplay
  command: 'ping -n -q -W 1 -c 1 rasplay.local > /dev/null 2>&1 && echo success || echo fail'
  device_class: connectivity
  payload_on: "success"
  payload_off: "fail"
  scan_interval: 30

- platform: command_line
  name: Rasplex
  command: 'ping -n -q -W 1 -c 1 rasplex.local > /dev/null 2>&1 && echo success || echo fail'
  device_class: connectivity
  payload_on: "success"
  payload_off: "fail"
  scan_interval: 30

- platform: command_line
  name: Main Gate
  command: 'ping -n -q -W 1 -c 1 main-gate.local > /dev/null 2>&1 && echo success || echo fail'
  device_class: connectivity
  payload_on: "success"
  payload_off: "fail"
  scan_interval: 30

- platform: command_line
  name: Garage Doors
  command: 'ping -n -q -W 1 -c 1 garage-doors.local > /dev/null 2>&1 && echo success || echo fail'
  device_class: connectivity
  payload_on: "success"
  payload_off: "fail"
  scan_interval: 30

- platform: command_line
  name: Power Meter
  command: 'ping -n -q -W 1 -c 1 electricity-pulse-counter.local > /dev/null 2>&1 && echo success || echo fail'
  device_class: connectivity
  payload_on: "success"
  payload_off: "fail"
  scan_interval: 30

- platform: command_line
  name: Office
  command: 'ping -n -q -W 1 -c 1 office.local > /dev/null 2>&1 && echo success || echo fail'
  device_class: connectivity
  payload_on: "success"
  payload_off: "fail"
  scan_interval: 30

- platform: command_line
  name: Tenant Mobile Phone
  command: 'ping -n -q -W 1 -c 3 tenant_mobile_phone > /dev/null 2>&1 && echo success || echo fail'
  device_class: connectivity
  payload_on: "success"
  payload_off: "fail"
  scan_interval: 15

- platform: command_line
  name: Housekeeper Mobile Phone
  command: 'ping -n -q -W 1 -c 3 housekeeper_mobile_phone > /dev/null 2>&1 && echo success || echo fail'
  device_class: connectivity
  payload_on: "success"
  payload_off: "fail"
  scan_interval: 30

- platform: ping
  name: Back Extender
  host: back_extender
  count: 5
  scan_interval: 30

- platform: ping
  name: Front Extender
  host: front_extender
  count: 5
  scan_interval: 30

- platform: ping
  name: Internet
  host: www.google.com
  count: 5
  scan_interval: 180

- platform: workday
  country: ZA
  workdays: [mon, tue, wed, thu, fri]
  excludes: [sat, sun, holiday]

- platform: workday
  name: Workday Sensor Tomorrow
  country: ZA
  workdays: [mon, tue, wed, thu, fri]
  excludes: [sat, sun, holiday]
  days_offset: 1  # tomorrow