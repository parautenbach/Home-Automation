clock:
  variables:
    timezone: "Continent/City"
  show_name: true
  show_state: true
  show_icon: true
  show_label: true
  label: >
    [[[
      return (new Date()).toLocaleDateString("en-ZA", {timeZone: variables.timezone});
    ]]]
  icon: >
    [[[
      var hourNamesIndexed = ["twelve", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten", "eleven", "twelve"];
      var timeParts = (new Date()).toLocaleTimeString("en-ZA", {timeZone: variables.timezone, hour12: true}).split(':');
      var hour = parseInt(timeParts[0]);
      var minute = parseInt(timeParts[1]);
      return "mdi:clock-time-" + hourNamesIndexed[hour] + "-outline";
    ]]]
  color: var(--state-icon-color)
  styles:
    grid:
      - grid-template-areas: '"n" "i" "s" "l"'
    name:
      - color: var(--secondary-text-color)
      - font-size: 1rem
    state:
      - color: var(--secondary-text-color)
      - font-size: 0.8rem
    label:
      - color: var(--secondary-text-color)
      - font-size: 0.8rem
  tap_action: none
# https://github.com/custom-cards/button-card/issues/635#issuecomment-1347826414
# https://github.com/home-assistant/frontend/blob/dev/src/resources/ha-style.ts
# https://www.home-assistant.io/integrations/frontend/
# https://community.home-assistant.io/t/2022-12-it-does-matter/499441/94
old_colors:
  styles:
    card:
      # map haâ€™s theme vars into cbc's shadow dom
      - '--state-icon-active-color': var(--state-active-color)
      - '--state-unavailable-color': var(--state-icon-unavailable-color)
      # legacy (polymer) vars
      - '--paper-item-icon-color': var(--state-icon-color)
      - '--paper-item-icon-active-color': var(--state-icon-active-color)
  state:
    - id: "on"
      value: "on"
      color: var(--state-icon-active-color)
    - id: "off"
      value: "off"
      color: var(--state-icon-color)
    - id: "unavailable"
      value: "unavailable"
      styles:
        icon:
          - color: var(--state-unavailable-color)
basic:
  template:
    - old_colors
  size: 20%
  show_label: true
  color_type: icon
  # this is just to create a phantom space to have it align better with other buttons on the same row
  label: >
    [[[
      return '';
    ]]]
  styles:
    name:
      - color: var(--state-icon-color)
    label:
      - color: var(--primary-background-color)
      - line-height: 1.2em
      - margin-bottom: 0.2em
    card:
      - font-size: 12px
    grid:
      - grid-template-areas: '"l" "i" "n"'
      - grid-template-rows: 1.2em 1fr min-content
      - grid-template-columns: 1fr
  tap_action:
    action: toggle
    haptic: light
  hold_action:
    action: more-info
    haptic: selection
embedded_timer:
  show_name: false
  show_icon: false
  show_state: true
  styles:
    card:
      - font-size: 12px
      - box-shadow: none
      - border: none
      - padding: 0
      - margin: 0
    state:
      - line-height: 1.2em
      - color: >
          [[[
            if (states[entity.entity_id]
                && states[entity.entity_id].state === "idle")
              return "var(--state-icon-color)";
            else
              return "var(--custom-color-red)";
          ]]]
  tap_action:
    action: none
  hold_action:
    action: none
light_with_timer:
  template:
    - old_colors
  variables:
    timer_entity: >
      [[[ return entity.entity_id
            .replace('light.', 'timer.')
            .replace('switch.', 'timer.')
            .replace('cover.', 'timer.') + '_timer';
      ]]]
  triggers_update:
    - "[[[ return variables.timer_entity; ]]]"
  size: 20%
  color_type: icon
  styles:
    name:
      - color: var(--state-icon-color)
    label:
      - color: var(--state-icon-color)
    card:
      - font-size: 12px
    grid:
      - grid-template-areas: '"t" "i" "n"'
      - grid-template-rows: 1.2em 1fr min-content
      - grid-template-columns: 1fr
  custom_fields:
    t:
      card:
        type: custom:button-card
        template:
          - embedded_timer
        entity: "[[[ return variables.timer_entity; ]]]"
  tap_action:
    action: toggle
    haptic: light
  double_tap_action:
    action: call-service
    haptic: medium
    service: script.turn_on_light_and_timer
    service_data:
      light: "[[[ return entity.entity_id; ]]]"
      duration: "00:03:00"
  hold_action:
    action: more-info
    haptic: selection
rgb_light:
  variables:
    above_threshold: |
      [[[
        let threshold = 255;
        if (entity.state === "on" && entity.attributes.rgb_color) {
          let rgb_sum = entity.attributes.rgb_color.reduce((a, b) => a + b, 0);
          return rgb_sum >= 3 * threshold;
        }
        return false;
      ]]]
  size: 20%
  color_type: icon
  color: >
    [[[
      if (entity.state === 'on') {
        // very bright/white: use active color
        if (variables.above_threshold) {
          return 'var(--state-icon-active-color)';
        }
        // otherwise let button-card compute the light color (hue + brightness)
        return 'var(--button-card-light-color)';
      }
      // off/unavailable: let state rules/theme decide
      return null;
    ]]]
  show_label: true
  label: >
    [[[
      var b = entity.attributes.brightness;
      return Math.round(parseFloat(b ? (b/255)*100 : "0")) + "%";
    ]]]
  styles:
    name:
      - color: var(--state-icon-color)
    label:
      - color: var(--state-icon-color)
      - padding-left: 1ex
    icon:
      - color: |
          [[[
            // above threshold == white here
            if (variables.above_threshold) {
              return "var(--state-icon-active-color)";
            } else if (entity.state === "on") {
              // ditching this due to the variation in colour accuracy of different brands
              // https://community.home-assistant.io/t/lovelace-button-card/65981/4599
              // https://community.home-assistant.io/t/lovelace-button-card/65981/4788
              // revert: keeping it again (for now; who knows)
              // already includes brightness/color support
              return "var(--button-card-light-color)";
              //return "var(--state-icon-active-color)";
            } else if (entity.state === "off") {
              return "var(--state-icon-color)";
            // unavailable
            } else {
              return "var(--primary-text-color)";
            }
          ]]]
      - filter: "[[[ return variables.above_threshold ? `brightness(${(entity.attributes.brightness/255 + 1)/2})` : null; ]]]"
    card:
      - font-size: 12px
    grid:
      - grid-template-areas: '"l" "i" "n"'
      - grid-template-rows: min-content 1fr min-content
      - grid-template-columns: 1fr
  state:
    - value: "off"
      color: var(--state-icon-color)
    - value: "unavailable"
      styles:
        icon:
          - color: var(--state-unavailable-color)
  tap_action:
    haptic: light
    action: call-service
    service: script.toggle_light
    service_data:
      light: "[[[ return entity.entity_id; ]]]"
      profile: "[[[ return variables.profile; ]]]"
  double_tap_action:
    action: call-service
    haptic: medium
    service: script.force_on_smart_bulb
    service_data:
      light: "[[[ return entity.entity_id; ]]]"
  hold_action:
    action: more-info
    haptic: selection
rgb_light_with_timer:
  variables:
    timer_entity: >
      [[[ return entity.entity_id
            .replace('light.', 'timer.')
            .replace('switch.', 'timer.')
            .replace('cover.', 'timer.') + '_timer';
      ]]]
  triggers_update:
    - "[[[ return variables.timer_entity; ]]]"
  styles:
    grid:
      - grid-template-areas: '"t s l" "i i i" "n n n"'
      - grid-template-rows: min-content 1fr min-content
      - grid-template-columns: 1fr min-content 1fr
    name:
      - margin-top: -1px
      - margin-bottom: 0px
    label:
      - align-self: middle
      - justify-self: start
      - padding-right: 1ex
    custom_fields:
      s:
        - color: var(--state-icon-color)
      t:
        - align-self: middle
        - justify-self: end
        - padding-right: 1ex
  custom_fields:
    s: >
      [[[ return '/'; ]]]
    t:
      card:
        type: custom:button-card
        template:
          - embedded_timer
        entity: "[[[ return variables.timer_entity; ]]]"
  state:
    - value: "unavailable"
      styles:
        icon:
          - color: var(--state-unavailable-color)
  tap_action:
    haptic: light
    action: call-service
    service: script.toggle_light
    service_data:
      light: "[[[ return entity.entity_id; ]]]"
      profile: "[[[ return typeof(variables.profile) !== 'undefined' ? variables.profile : 'low_tp_link_rgb'; ]]]"
  double_tap_action:
    haptic: medium
    action: call-service
    service: script.toggle_light
    service_data:
      light: "[[[ return entity.entity_id; ]]]"
      profile: "[[[ return typeof(variables.security_profile) !== 'undefined' ? variables.security_profile : 'bright_tp_link_rgb'; ]]]"
  hold_action:
    haptic: selection
    action: more-info
basic_small:
  color: "off"
  size: 25%
  styles:
    card:
      - font-size: 12px
    icon:
      - color: var(--state-icon-color)
      # https://community.home-assistant.io/t/lovelace-button-card/65981/791
      # https://community.home-assistant.io/t/lovelace-button-card/65981/798
      # https://community.home-assistant.io/t/fun-with-custom-button-card/238450
      - padding-right: 5px
      - padding-left: 70%
    name:
      - color: var(--state-icon-color)
      - justify-self: start
    grid:
      - grid-template-areas: '"i n"'
      - grid-template-rows: 1fr
      - grid-template-columns: 1fr 1fr  # 4fr 5fr
light_preset:
  tap_action:
    action: call-service
    haptic: light
    service: light.turn_on
    service_data:
      entity_id: entity
      profile: "[[[ return variables.profile; ]]]"
cover:
  variables:
    timer_entity: >
      [[[ return entity.entity_id
            .replace('light.', 'timer.')
            .replace('switch.', 'timer.')
            .replace('cover.', 'timer.') + '_timer';
      ]]]
  triggers_update:
    - "[[[ return variables.timer_entity; ]]]"
  size: 20%
  show_name: true
  color_type: icon
  color: var(--state-icon-color)
  custom_fields:
    t:
      card:
        type: custom:button-card
        template:
          - embedded_timer
        entity: "[[[ return variables.timer_entity; ]]]"
  styles:
    name:
      - color: var(--state-icon-color)
    card:
      - font-size: 12px
    grid:
      - grid-template-areas: '"t" "i" "n"'
      - grid-template-rows: min-content 1fr min-content
      - grid-template-columns: 1fr
  state:
    - operator: template
      value: >
        [[[
          var alert_entity_id = entity.entity_id.replace("cover.", "binary_sensor.") + "_alert";
          return states[alert_entity_id].state == "on";
        ]]]
      color: var(--custom-color-red)
    - operator: template
      value: >
        [[[
          // shorthand, but in case i forget or someone else reads this
          // return states[variables.occupancy_entity]?.state === "on";
          return variables.occupancy_entity !== undefined && states[`${variables.occupancy_entity}`].state == "on";
        ]]]
      color: var(--state-binary_sensor-active-color)
    - operator: template
      value: >
        [[[
          return variables.occupancy_entity !== undefined && states[`${variables.occupancy_entity}`].state == "off";
        ]]]
      color: var(--state-icon-color)
    - value: "unavailable"
      styles:
        icon:
          - color: var(--state-unavailable-color)
    - operator: template
      value: >
        [[[
          return true;
        ]]]
      color: var(--state-icon-color)
  tap_action:
    action: toggle
    haptic: light
  hold_action:
    action: call-service
    haptic: heavy
    service: timer.start
    service_data:
      entity_id: "[[[ return variables.timer_entity; ]]]"
      duration: "00:10:00"
devices_common:
  state:
    - operator: template
      value: >
        [[[
          return entity.state == "on";
        ]]]
      color: var(--state-binary_sensor-active-color)
    - operator: template
      value: >
        [[[
          return entity.state == "off";
        ]]]
      color: var(--state-icon-color)
    - value: "unavailable"
      styles:
        icon:
          - color: var(--state-unavailable-color)
shutdown:
  template:
    - devices_common
  name: "[[[ return entity.attributes.friendly_name; ]]]"
  size: 30%
  styles:
    name:
      - color: var(--state-icon-color)
    card:
      - font-size: 12px
  hold_action:
    action: call-service
    haptic: heavy
    service: script.shutdown_remote_host
    service_data:
      name: "[[[ return entity.attributes.friendly_name; ]]]"
      host: "[[[ return entity.attributes.friendly_name.toLowerCase(); ]]]"  # must match .ssh/config
    confirmation:
      text: "[[[ return `Are you sure you want to shut down ${entity.attributes.friendly_name}?` ]]]"
restart:
  template:
    - devices_common
  name: "[[[ return variables.name; ]]]"
  size: 20%
  styles:
    name:
      - color: var(--state-icon-color)
    card:
      - font-size: 12px
  double_tap_action:
    action: call-service
    haptic: medium
    service: switch.turn_on
    service_data:
      entity_id: "[[[ return variables.switch_entity; ]]]"
    confirmation:
      text: "[[[ return `Are you sure you want to restart the ${variables.name.toLowerCase()} device?`; ]]]"
remote:
  template:
    - old_colors
  variables:
    selection: "Remote State"
  entity: input_select.selected_remote
  name: "[[[ return variables.selection; ]]]"
  size: 50%
  color_type: icon
  styles:
    name:
      - color: var(--state-icon-color)
    label:
      - color: var(--state-icon-color)
      - padding-left: 1ex
    card:
      - font-size: 12px
    icon:
      - color: |
          [[[
            if (entity.state == variables.selection) {
              return "var(--state-icon-active-color)";
            } else  {
              return "var(--state-icon-color)";
            }
          ]]]
  tap_action:
    action: call-service
    haptic: light
    service: input_select.select_option
    service_data:
      entity_id: input_select.selected_remote
      option: "[[[ return variables.selection; ]]]"
pollen:
  size: 20%
  show_entity_picture: true
  color_type: card
  show_label: true
  label: >
    [[[
      return entity.attributes.label;
    ]]]
  styles:
    name:
      - color: var(--primary-background-color)
    icon:
      - color: var(--primary-background-color)
    label:
      - color: var(--primary-background-color)
    grid:
      - grid-template-areas: '"n" "i" "l"'
    card:
      - font-size: 12px
  state:
    - value: 1
      color: "#40b100"
    - value: 2
      color: "#ffe500"
    - value: 3
      color: "#ffa800"
    - value: 4
      color: "#ff5800"
    - value: 5
      color: "#aa0000"
smoke_detector:
  template:
    - old_colors
  size: 20%
  show_label: true
  label: Mute
  styles:
    name:
      - color: var(--state-icon-color)
    label:
      - color: var(--state-icon-color)
    grid:
      - grid-template-areas: '"l" "i" "n"'
    card:
      - font-size: 12px
climate_led_display:
  icon: mdi:television-ambient-light
  size: 20%
  show_name: false
  triggers_update:
    - "[[[ return entity.entity_id.replace('switch.', 'climate.').replace('_display', '') ]]]"
  styles:
    card:
      - padding: 3%
  state:
    - operator: template
      value: >
        [[[
          return states[`${entity.entity_id}`.replace("switch.", "climate.").replace("_display", "")].state != 'off' && entity.state == 'on';
        ]]]
      color: var(--state-binary_sensor-active-color)
    - operator: template
      value: >
        [[[
          return states[`${entity.entity_id}`.replace("switch.", "climate.").replace("_display", "")].state != 'off' && entity.state == 'off';
        ]]]
      color: var(--state-icon-color)
    - operator: default
      color: var(--state-unavailable-color)
climate_fan:
  variables:
    icon_map:
      auto: mdi:fan-auto
      high: mdi:fan-speed-3
      medium: mdi:fan-speed-2
      low: mdi:fan-speed-1
      silent: mdi:fan-off
  icon: >
    [[[
      if (variables.fan_mode in variables.icon_map) {
        return variables.icon_map[variables.fan_mode];
      }
      else {
        return 'mdi:fan';
      }
    ]]]
  size: 80%
  show_name: false
  tap_action:
    action: call-service
    haptic: light
    service: climate.set_fan_mode
    service_data:
      entity_id: entity
      fan_mode: "[[[ return variables.fan_mode; ]]]"
  styles:
    card:
      - padding: 15%
  state:
    - operator: template
      value: >
        [[[
          return entity.state != 'off' && entity.attributes.fan_mode == variables.fan_mode;
        ]]]
      color: var(--state-binary_sensor-active-color)
    - operator: template
      value: >
        [[[
          return entity.state != 'off';
        ]]]
      color: var(--state-icon-color)
    - operator: default
      color: var(--state-unavailable-color)
climate_timer:
  variables:
    climate_entity: "[[[ return `${entity.entity_id}`.replace('timer.', 'climate.').replace('_timer', ''); ]]]"
    climate_entity_state: "[[[ return states[variables.climate_entity].state ]]]"
  triggers_update:
    - "[[[ return variables.climate_entity ]]]"
  layout: icon_state
  show_name: false
  show_state: true
  icon: mdi:camera-timer
  size: 40%
  styles:
    card:
      - height: 100%
      - font-size: 12px
      - pointer-events: all
    state:
      - justify-self: start
      - color: |
          [[[
            if (variables.climate_entity_state != 'off' && entity.state === 'active') {
              return 'var(--state-binary_sensor-active-color)';
            }
            if (variables.climate_entity_state != 'off' && entity.state === 'idle') {
              return 'var(--state-icon-color)';
            }
            return 'var(--state-unavailable-color)';
          ]]]
    icon:
      - justify-self: end
    grid:
      - grid-template-areas: '"i s"'
      - grid-template-rows: 1fr
      - grid-template-columns: 1fr 1fr
  state:
    - operator: template
      value: >
        [[[
          return variables.climate_entity_state != 'off' && entity.state === 'active';
        ]]]
      color: var(--state-binary_sensor-active-color)
    - operator: template
      value: >
        [[[
          return variables.climate_entity_state != 'off' && entity.state === 'idle';
        ]]]
      color: var(--state-icon-color)
    - operator: default
      color: var(--state-unavailable-color)
  tap_action:
    action: call-service
    haptic: light
    service: >
      [[[
        if (variables.climate_entity_state !== "off")
          return "timer.start";
      ]]]
    service_data:
      entity_id: entity
      duration: "00:30:00"
  double_tap_action:
    action: call-service
    haptic: medium
    service: >
      [[[
        if (entity.state !== "idle")
          return "timer.cancel";
      ]]]
    service_data:
      entity_id: entity
  hold_action:
    action: more-info
    haptic: heavy
fan_with_timer:
  variables:
    timer_entity: >
      [[[ return entity.entity_id
            .replace('light.', 'timer.')
            .replace('switch.', 'timer.')
            .replace('cover.', 'timer.') + '_timer';
      ]]]
  triggers_update:
    - "[[[ return variables.timer_entity ]]]"
  size: 20%
  color_type: icon
  styles:
    card:
      # map haâ€™s theme vars into cbc's shadow dom
      - '--state-icon-active-color': var(--state-active-color)
      - '--state-unavailable-color': var(--state-icon-unavailable-color)
      # legacy (polymer) vars
      - '--paper-item-icon-color': var(--state-icon-color)
      - '--paper-item-icon-active-color': var(--state-icon-active-color)
      - font-size: 12px
    name:
      - color: var(--state-icon-color)
    label:
      - color: var(--state-icon-color)
    grid:
      - grid-template-areas: '"t" "i" "n"'
      - grid-template-rows: 1.2em 1fr min-content
      - grid-template-columns: 1fr
  custom_fields:
    t:
      card:
        type: custom:button-card
        template:
          - embedded_timer
        entity: "[[[ return variables.timer_entity; ]]]"
  state:
    - value: "on"
      color: var(--state-icon-active-color)
      styles:
        icon:
          - animation: spin 2s linear infinite
    - value: "off"
      color: var(--state-icon-color)
      styles:
        icon:
          - animation: none
    - value: "unavailable"
      color: var(--state-unavailable-color)
      styles:
        icon:
          - animation: none
    - value: "unknown"
      color: var(--state-unavailable-color)
      styles:
        icon:
          - animation: none
  extra_styles: |
    @keyframes spin {
      from { transform: rotate(0deg); }
      to { transform: rotate(360deg); }
    }
  tap_action:
    action: toggle
    haptic: light
  hold_action:
    action: more-info
    haptic: selection
