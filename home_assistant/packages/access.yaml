homeassistant:
  customize:
    binary_sensor.main_gate_gate_status:
      icon: mdi:gate
    binary_sensor.garage_doors_lhs_occupied:
      icon: mdi:car-connected
    binary_sensor.garage_doors_rhs_occupied:
      icon: mdi:car-connected
    cover.garage_doors:
      device_class: garage
      icon: mdi:garage-variant

input_datetime:
  main_gate_opened:
    has_date: true
    has_time: true
  garage_doors_lhs_opened:
    has_date: true
    has_time: true
  garage_doors_rhs_opened:
    has_date: true
    has_time: true

cover:
  - platform: template
    covers:
      main_gate:
        friendly_name: "Main Gate"
        device_class: gate
        open_cover:
          # https://community.home-assistant.io/t/cover-template-open-close/248449
          - condition: state
            entity_id: binary_sensor.main_gate_gate_status
            state: "off"
          - service: switch.turn_on
            data:
              entity_id: switch.main_gate_remote
        close_cover:
          - condition: state
            entity_id: binary_sensor.main_gate_gate_status
            state: "on"
          - service: switch.turn_on
            data:
              entity_id: switch.main_gate_remote
        stop_cover:
          service: switch.turn_on
          data:
            entity_id: switch.main_gate_remote
        # true (on) means open
        value_template: "{{ is_state('binary_sensor.main_gate_gate_status', 'on') }}"
        icon_template: >-
          {%- from 'security.jinja' import get_cover_icon -%}
          {{ get_cover_icon('binary_sensor.main_gate_gate_status', 'binary_sensor.main_gate_alert', 'mdi:gate') }}
        availability_template: "{{ not is_state('binary_sensor.main_gate_gate_status', 'unavailable') }}"

  - platform: template
    covers:
      garage_doors_lhs:
        friendly_name: "Garage Doors LHS"
        device_class: garage
        open_cover:
          - condition: state
            entity_id: binary_sensor.garage_doors_lhs_status
            state: "off"
          - service: switch.turn_on
            data:
              entity_id: switch.garage_doors_lhs_remote
        close_cover:
          - condition: state
            entity_id: binary_sensor.garage_doors_lhs_status
            state: "on"
          - service: switch.turn_on
            data:
              entity_id: switch.garage_doors_lhs_remote
        stop_cover:
          service: switch.turn_on
          data:
            entity_id: switch.garage_doors_lhs_remote
        # true (on) means open
        value_template: "{{ is_state('binary_sensor.garage_doors_lhs_status', 'on') }}"
        icon_template: >-
          {%- from 'security.jinja' import get_cover_icon -%}
          {{ get_cover_icon('binary_sensor.garage_doors_lhs_status', 'binary_sensor.garage_doors_lhs_alert', 'mdi:garage') }}
        availability_template: "{{ not is_state('binary_sensor.garage_doors_lhs_status', 'unavailable') }}"

  - platform: template
    covers:
      garage_doors_rhs:
        friendly_name: "Garage Doors RHS"
        device_class: garage
        open_cover:
          - condition: state
            entity_id: binary_sensor.garage_doors_rhs_status
            state: "off"
          - service: switch.turn_on
            data:
              entity_id: switch.garage_doors_rhs_remote
        close_cover:
          - condition: state
            entity_id: binary_sensor.garage_doors_rhs_status
            state: "on"
          - service: switch.turn_on
            data:
              entity_id: switch.garage_doors_rhs_remote
        stop_cover:
          service: switch.turn_on
          data:
            entity_id: switch.garage_doors_rhs_remote
        # true (on) means open
        value_template: "{{ is_state('binary_sensor.garage_doors_rhs_status', 'on') }}"
        icon_template: >-
          {%- from 'security.jinja' import get_cover_icon -%}
          {{ get_cover_icon('binary_sensor.garage_doors_rhs_status', 'binary_sensor.garage_doors_rhs_alert', 'mdi:garage') }}
        availability_template: "{{ not is_state('binary_sensor.garage_doors_rhs_status', 'unavailable') }}"

  - platform: group
    name: "Garage Doors"
    entities:
      - cover.garage_doors_lhs
      - cover.garage_doors_rhs

group:
  covers_with_timers:
    name: Covers With Timers
    entities:
      - cover.main_gate
      - cover.garage_doors_lhs
      - cover.garage_doors_rhs

# https://www.dahuasecurity.com/products/All-Products/Video-Intercoms/IP-Products/Door-Stations/VTO2211G-WP
# https://amcrest.com/smarthome-2-megapixel-wireless-doorbell-security-camera-1920-x-1080p-wifi-doorbell-camera-ip55-weatherproof-two-way-audio-ad110.html
# https://www.hikvision.com/en/products/Video-Intercom-Products/
# https://community.home-assistant.io/t/amcrest-doorbell-ad110-api-local-only/223838
# https://community.home-assistant.io/t/dahua-vto-custom-integration/293693
# replaced with: https://github.com/rroller/dahua
# amcrest:
#   - name: Doorbell
#     host: !secret doorbell_host
#     username: !secret doorbell_username
#     password: !secret doorbell_password
#     binary_sensors:
#       - online
#       - motion_detected

template:
  # example:
  # {
  #     "event_type": "amcrest",
  #     "data": {
  #         "camera": "Doorbell",
  #         "event": "CallNoAnswered",
  #         "payload": {
  #             "Code": "CallNoAnswered",
  #             "action": "Start",
  #             "index": "0",
  #             "data": {
  #                 "CallID": "3"
  #             }
  #         }
  #     },
  #     "origin": "LOCAL",
  #     "time_fired": "2021-10-16T14:59:57.236917+00:00",
  #     "context": {
  #         "id": "381f8debeef10751b18edc4acf3f4491",
  #         "parent_id": null,
  #         "user_id": null
  #     }
  # }
  # explanation:
  # the first trigger updates the state to true, but at this point the icon template
  # using the sensor itself will still have the old value. the second trigger will be
  # triggered when the state changes due to the first trigger. this will cause the
  # icon template to update to whatever the current state of the sensor is. at the same
  # time, one must prevent an infinite loop, because even if the state doesn't get
  # updated, there will still be an event emitted. this is why the state template needs
  # to update only when the first trigger gets triggered.
  # - trigger:
  #   - platform: event
  #     event_type: amcrest
  #     event_data:
  #       event: CallNoAnswered
  #       payload:
  #         action: Start
  #   - platform: state
  #     entity_id: binary_sensor.doorbell_rang
  #     to: "off"
  #   binary_sensor:
  #     - name: Doorbell Rang
  #       # https://github.com/home-assistant/core/issues/39932
  #       # https://github.com/home-assistant/core/issues/58056
  #       # https://github.com/home-assistant/core/issues/66459
  #       # https://github.com/home-assistant/home-assistant.io/pull/22021
  #       icon: "{{ (trigger.platform == 'event') | iif('mdi:bell-ring-outline', 'mdi:bell-outline') }}"
  #       state: "{{ trigger.platform == 'event' }}"
  #       # https://github.com/home-assistant/core/issues/67397
  #       auto_off:
  #         seconds: 5
  - binary_sensor:
      - name: Doorbell Rang
        icon: "{{ state_attr('binary_sensor.doorbell_call_no_answered', 'icon') }}"
        # sensor remains on for 10 s
        state: "{{ states('binary_sensor.doorbell_call_no_answered') }}"

  - binary_sensor:
      - name: "Main Gate Alert"
        unique_id: "c0519290-d5b4-4c3f-9809-906316d94b04"
        state: >-
          {%- from 'security.jinja' import get_alert_status -%}
          {{ get_alert_status('binary_sensor.main_gate_gate_status',
                              'timer.main_gate_timer',
                              'input_datetime.main_gate_opened') }}
        device_class: problem
  - binary_sensor:
      - name: "Garage Doors LHS Alert"
        unique_id: "8683ff75-958e-44f0-9233-36a5a8bfe3c8"
        state: >-
          {%- from 'security.jinja' import get_alert_status -%}
          {{ get_alert_status('binary_sensor.garage_doors_lhs_status',
                              'timer.garage_doors_lhs_timer',
                              'input_datetime.garage_doors_lhs_opened') }}
        device_class: problem
  - binary_sensor:
      - name: "Garage Doors RHS Alert"
        unique_id: "74597585-0fb3-459e-b90f-3cd6ba034a1a"
        state: >-
          {%- from 'security.jinja' import get_alert_status -%}
          {{ get_alert_status('binary_sensor.garage_doors_rhs_status',
                              'timer.garage_doors_rhs_timer',
                              'input_datetime.garage_doors_rhs_opened') }}
        device_class: problem

script:
  open_pedestrian_gap:
    mode: single
    sequence:
      - condition: state
        entity_id: cover.main_gate
        state: "closed"
      - service: switch.turn_on
        entity_id: switch.main_gate_remote
      - delay: "00:00:05"
      - service: switch.turn_on
        entity_id: switch.main_gate_remote

  close_garage_door_and_main_gate:
    description: "Close the applicable garage door if it's open and also the main gate if it's open"
    fields:
      garage_door:
        description: "A cover entity"
        example: "cover.garage_door"
    mode: single
    sequence:
      - service: cover.close_cover
        data:
          entity_id: "{{ garage_door }}"
      - service: cover.close_cover
        entity_id: cover.main_gate

automation:
  - alias: "Notify If Doorbell Rang"
    id: "46054fb3-4e60-40ad-9e0f-e22b8137b23c"
    initial_state: true
    trigger:
      - platform: state
        entity_id: binary_sensor.doorbell_rang
        to: "on"
    mode: queued
    action:
      - parallel:
          - service: notify.family
            data:
              title: "ðŸ”” Security"
              message: "The doorbell rang."
              # todo: thumbnail, url
              data:
                group: "doorbell"
                # or open the amcrest app? (seems like it doesn't register a schema handler, so can't do it, unfortunately)
                url: homeassistant://navigate/lovelace/security
                entity_id: camera.doorbell
                sound:
                  name: "Doorbell.caf"
                  critical: 1
                  volume: 0.3
                attachment:
                  # url: !secret doorbell_camera_last_snapshot_url
                  hide-thumbnail: false
                  lazy: false
                actions:
                  - action: "PARTLY_OPEN_AND_CLOSE_GATE"
                    title: "Open and close (pedestrian)"
                  - action: "PARTLY_OPEN_GATE"
                    title: "Open (pedestrian)"
                  - action: "FULLY_OPEN_GATE"
                    title: "Open (fully)"
                  - action: "CLOSE_GATE"
                    title: "Close"
          # non-blocking call
          - service: script.turn_on
            target:
              entity_id: script.take_snapshot
            data:
              variables:
                camera_entity_id: camera.doorbell
                subdirectory: "doorbell"

  - alias: "Handle Doorbell Alert Action"
    id: "c39b4bb0-9a1d-475c-ac7d-ee93fbee8e69"
    trigger:
      - platform: event
        event_type: mobile_app_notification_action
        event_data:
          action: PARTLY_OPEN_AND_CLOSE_GATE
      - platform: event
        event_type: mobile_app_notification_action
        event_data:
          action: PARTLY_OPEN_GATE
      - platform: event
        event_type: mobile_app_notification_action
        event_data:
          action: FULLY_OPEN_GATE
      - platform: event
        event_type: mobile_app_notification_action
        event_data:
          action: CLOSE_GATE
    action:
      - choose:
          - conditions:
              - condition: template
                value_template: "{{ is_state('cover.main_gate', 'closed') and trigger.event.data.action == 'FULLY_OPEN_GATE' }}"
            sequence:
              - service: cover.open_cover
                data:
                  entity_id: cover.main_gate
          - conditions:
              - condition: template
                value_template: "{{ is_state('cover.main_gate', 'closed') and trigger.event.data.action == 'PARTLY_OPEN_GATE' }}"
            sequence:
              # non-blocking call
              - service: script.turn_on
                target:
                  entity_id: script.open_pedestrian_gap
          - conditions:
              - condition: template
                value_template: "{{ is_state('cover.main_gate', 'closed') and trigger.event.data.action == 'PARTLY_OPEN_AND_CLOSE_GATE' }}"
            sequence:
              # non-blocking call
              - service: script.turn_on
                target:
                  entity_id: script.open_pedestrian_gap
              - delay:
                  seconds: 15
              - condition: "{{ is_state('cover.main_gate', 'open') }}"
              - service: cover.close_cover
                data:
                  entity_id: cover.main_gate
          - conditions:
              - condition: template
                value_template: "{{ is_state('cover.main_gate', 'open') and trigger.event.data.action == 'CLOSE_GATE' }}"
            sequence:
              - service: cover.close_cover
                data:
                  entity_id: cover.main_gate
        # default: intentionally omitted. for safety, do nothing.
