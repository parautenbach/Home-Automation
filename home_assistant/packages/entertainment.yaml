homeassistant:
  customize:
    script.entertainment_apple_tv_on:
      friendly_name: Apple TV System On
      icon: mdi:apple
    script.entertainment_satellite_on:
      friendly_name: Satellite System On
      icon: mdi:set-top-box
    script.entertainment_off:
      friendly_name: System Off
      icon: mdi:power
    switch.tivoli_audio:
      friendly_name: Tivoli Audio
      icon: mdi:radio
    sensor.apple_tv_playing:
      device_class: duration
      unit_of_measurement: h
      state_class: total_increasing

input_select:
  selected_remote:
    name: Remote
    options:
      - TV
      - Audio
      - Apple TV
      - Satellite
    initial: Audio
    icon: mdi:remote-tv

media_player:
  - platform: universal
    name: Living Room Universal
    children:
      - media_player.living_room
    commands:
      turn_on:
        service: script.entertainment_apple_tv_on
      turn_off:
        service: script.entertainment_off
      volume_up:
        service: script.hk_3380_vol_up
      volume_down:
        service: script.hk_3380_vol_down
      volume_mute:
        service: script.hk_3380_mute
  - platform: shairport_sync
    name: Main Bedroom
    topic: shairport-sync/main-bedroom
  - platform: universal
    name: Main Bedroom Universal
    children:
      - media_player.main_bedroom
    commands:
      turn_on:
        service: switch.turn_on
        target:
          entity_id: switch.tivoli_audio
      turn_off:
        service: switch.turn_off
        target:
          entity_id: switch.tivoli_audio
    attributes:
      state: switch.tivoli_audio

sensor:
  - platform: history_stats
    name: Apple TV Playing
    entity_id: media_player.living_room
    state: "playing"
    type: time
    start: "{{ now().replace(hour=0, minute=0, second=0) }}"
    end: "{{ now() }}"

  - platform: template
    sensors:
      apple_tv_playing_hours_minutes:
        value_template: >-
          {% set decimal_hours = states('sensor.apple_tv_playing') | float(0) %}
          {% set hours = (decimal_hours - (decimal_hours % 1)) | int(0) %}
          {% set minutes = ((decimal_hours % 1) * 60) | int(0) %}
          {{ '%02i:%02i' % (hours, minutes) }}

script:
  entertainment_apple_tv_on:
    mode: single
    sequence:
      - service: input_select.select_option
        target:
          entity_id: input_select.selected_remote
        data:
          option: Apple TV
      - service: script.turn_on
        entity_id: script.samsung_tv_power_on
      - delay: "00:00:01"
      - service: script.turn_on
        entity_id: script.hk_3380_power_on
      - delay: "00:00:01"
      # this will also trigger automation "Turn Audio On When Apple TV Turned On"
      # either just call this and set the input select, while the automation does the rest,
      # or disable and re-enable the automation in this script
      # (or just ignore it, because it's probably harmless)
      - service: remote.send_command
        data:
          entity_id: remote.living_room
          command: wakeup
      - delay: "00:00:05"
      - service: script.turn_on
        entity_id: script.samsung_tv_hdmi2

  entertainment_satellite_on:
    mode: single
    sequence:
      - service: input_select.select_option
        target:
          entity_id: input_select.selected_remote
        data:
          option: Satellite
      - service: script.turn_on
        entity_id: script.samsung_tv_power_on
      - delay: "00:00:01"
      - service: script.turn_on
        entity_id: script.hk_3380_power_on
      - delay: "00:00:01"
      - service: script.turn_on
        entity_id: script.dstv_power
      - delay: "00:00:05"
      - service: script.turn_on
        entity_id: script.samsung_tv_hdmi1

  entertainment_off:
    mode: single
    sequence:
      - service: input_select.select_option
        target:
          entity_id: input_select.selected_remote
        data:
          option: Audio
      - service: script.turn_on
        entity_id: script.samsung_tv_power_off
      - delay: "00:00:01"
      - service: script.turn_on
        entity_id: script.hk_3380_power_off
      # state is idle when not playing or off (suspended)
      # in that case, just let it turn off automatically
      # we just want to stop anything currently playing (e.g. streaming music) to stop
      - condition: state
        entity_id: media_player.living_room
        state: "playing"
      # https://github.com/postlund/pyatv/blob/6018ba22851287afaf7c99dafa42de5766b97acf/pyatv/interface.py#L94
      # the proper way to turn it off
      - service: remote.send_command
        data:
          entity_id: remote.living_room
          command: home_hold
      - delay: "00:00:02"
      - service: remote.send_command
        data:
          entity_id: remote.living_room
          command: select

  play_radio_paradise:
    mode: single
    sequence:
      - if:
          - condition: state
            entity_id: media_player.living_room
            state: "standby"
        then:
          # blocking call
          - service: script.entertainment_apple_tv_on
          - delay: "00:00:05"
      - service: media_player.select_source
        target:
          entity_id: media_player.living_room
        data:
          source: "Radio Paradise"
      - delay: "00:00:05"
      - service: script.turn_on
        entity_id: script.apple_tv_play_pause

automation:
  - alias: "Turn Audio On When Apple TV Turned On"
    id: "7c3646d2-8fe8-4378-a6f5-979e16cc40ff"
    initial_state: true
    trigger:
      platform: state
      entity_id: media_player.living_room
      from: standby
      not_to: "off"
      # seems like an apple tv can turn on and be in a paused state immediately
      # would this be the alternative?
      # to:
      #   - "idle"
      #   - "paused"
    mode: single
    action:
      - service: script.turn_on
        entity_id: script.hk_3380_power_on
      - delay: "00:00:05"
      - service: script.turn_on
        entity_id: script.samsung_tv_hdmi2
