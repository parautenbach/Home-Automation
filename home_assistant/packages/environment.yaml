homeassistant:
  customize:
    sensor.conditions_temperature:
      friendly_name: Temperature
    sensor.conditions_humidity:
      friendly_name: Humidity
    sensor.ambient_temperature_filtered:
      friendly_name: Temperature
    # sensor.uva_irradiance:
    #   icon: mdi:weather-sunny-alert
    # sensor.uvb_irradiance:
    #   icon: mdi:weather-sunny-alert
    # sensor.saaqis_pm_coarse:
    #   icon: mdi:grain
    # sensor.saaqis_pm_10:
    #   icon: mdi:grain
    #   device_class: pm10
    # sensor.saaqis_pm_2_5:
    #   icon: mdi:grain
    #   device_class: pm25
    sensor.saaqis_o3:
      icon: mdi:skull-outline
    sensor.saaqis_no2:
      icon: mdi:smog
    sensor.saaqis_so2:
      icon: mdi:smog
    sensor.wemmershoek_dam_level:
      icon: mdi:waves
      scan_interval: 3600
    sensor.steenbras_lower_dam_level:
      icon: mdi:waves
      scan_interval: 3600
    sensor.steenbras_upper_dam_level:
      icon: mdi:waves
      scan_interval: 3600
    sensor.voelvlei_dam_level:
      icon: mdi:waves
      scan_interval: 3600
    sensor.theewaterskloof_dam_level:
      icon: mdi:waves
      scan_interval: 3600
    sensor.bergrivier_dam_level:
      icon: mdi:waves
      scan_interval: 3600
    sensor.total_dam_level:
      icon: mdi:waves
      state_class: measurement
      scan_interval: 3600
    sensor.total_dam_level_previous_year:
      icon: mdi:waves
      scan_interval: 3600
    sensor.dam_levels_last_update:
      icon: mdi:update
      device_class: timestamp
      scan_interval: 3600
    sensor.owm_pollution_overall_air_quality:
      unit_of_measurement: aqi
    sensor.bedroom_ht_temperature:
      friendly_name: Bedroom Temperature
      state_class: measurement
    sensor.bedroom_ht_humidity:
      friendly_name: Bedroom Humidity
    sensor.main_bedroom_ht_temperature:
      friendly_name: Main Bedroom Temperature
      state_class: measurement
    sensor.main_bedroom_ht_humidity:
      friendly_name: Main Bedroom Humidity
    sensor.home_sun_daylight:
      state_class: measurement
    sensor.outside_temperature:
      state_class: measurement
    sensor.temperature_difference:
      state_class: measurement
    # binary_sensor.baby_monitor_sound_alarm:
    #   device_class: sound
    sensor.overall_pollen_risk:
      unit_of_measurement: None
    sensor.grass_pollen:
      unit_of_measurement: None
    sensor.tree_pollen:
      unit_of_measurement: None
    sensor.weed_pollen:
      unit_of_measurement: None
    sensor.mould_spores:
      unit_of_measurement: None
    sensor.winelands_fdi:
      unit_of_measurement: None
    # https://github.com/Limych/ha-average/issues/193

shell_command:
  download_latest_dam_levels: "/home/homeassistant/scripts/download_latest_dam_levels.sh"

# convert to modern format: https://www.home-assistant.io/integrations/template/
weather:
  # https://community.home-assistant.io/t/mapping-weather-conditions-in-the-ui/289207
  - platform: template
    name: "Forecast Tomorrow"
    condition_template: "{{ state_attr('sensor.weather_tomorrow_hourly', 'forecast')[0]['condition'] }}"
    temperature_template: "{{ state_attr('sensor.weather_tomorrow_hourly', 'forecast')[0]['temperature'] }}"
    temperature_unit: "°C"
    # workaround: https://github.com/home-assistant/core/issues/91620
    humidity_template: "{{ 0.0 | float(0) }}"
    pressure_template: "{{ state_attr('sensor.weather_tomorrow_hourly', 'forecast')[0]['pressure'] }}"
    pressure_unit: "hPa"
    wind_speed_template: "{{ state_attr('sensor.weather_tomorrow_hourly', 'forecast')[0]['wind_speed'] }}"
    wind_speed_unit: "km/h"
    wind_bearing_template: "{{ state_attr('sensor.weather_tomorrow_hourly', 'forecast')[0]['wind_bearing'] }}"
    precipitation_unit: "mm"
    # forecast_template: "{{ state_attr('sensor.weather_tomorrow_hourly', 'forecast')[0:] }}"
    attribution_template: "{{ state_attr('sensor.weather_tomorrow_hourly', 'attribution') }}"

# https://community.home-assistant.io/t/outdoor-illuminance-template-sensor/228581
# https://community.home-assistant.io/t/automations-to-turn-on-lights-based-on-actual-season/252830/19
# https://www.engineeringtoolbox.com/light-level-rooms-d_708.html
illuminance:
    name: Weather-Based Sun Illuminance
    unique_id: "ad67d49a-4db4-49c0-81b1-1e068df41b31"
    entity_id: weather.openweathermap_hourly
    mode: normal
    fallback: 10
    scan_interval:
      minutes: 5

binary_sensor:
  - platform: template
    sensors:
      golden_hour:
        # https://community.home-assistant.io/t/wth-is-there-no-golden-hour-data-available-to-trigger-light-automations/220359/3
        friendly_name: Golden Hour
        value_template: >
          {{ -4 <  states('sensor.solar_angle') | float(0) < 6 }}
        icon_template: mdi:weather-sunset
      low_light:
        friendly_name: Low Light
        # alternatives:
        # value_template: "{{ states('sensor.sun_illuminance') != 'unknown' and (states('sensor.sun_illuminance') | int < 15320) }}"
        # value_template: >
        #   {{ states('sensor.sun_illuminance') | int(0) < 7500 or
        #      states('sensor.solar_angle') | int(0) < 5 or
        #      'fog' in states('weather.openweathermap_hourly') or
        #      'cloudy' in states('weather.openweathermap_hourly') or
        #      'rain' in states('weather.openweathermap_hourly') or
        #      'pouring' in states('weather.openweathermap_hourly') }}
        # don't use office illuminance, because we might turn on the desk lamp, which will then trigger a low light condition
        # value_template: "{{ states('sensor.office_illuminance') | int(0) <= 25 }}"
        value_template: >
          {{ states('sensor.weather_based_sun_illuminance') | int(0) < 35000 or is_state('binary_sensor.is_fair_weather', 'off') }}
      # https://github.com/pnbruckner/ha-sun2/blob/master/custom_components/sun2/const.py
      # keep value in sync with the fair weather binary sensor
      nighttime:
        friendly_name: Night-time
        value_template: "{{  states('sensor.solar_angle') | float(0) < -0.833 }}"
      daytime:
        friendly_name: Day-time
        value_template: "{{  states('sensor.solar_angle') | float(0) >= -0.833 }}"

sensor:
  - platform: openweathermap_all
    api_key: !secret open_weather_map_api_key
    latitude: !secret home_latitude
    longitude: !secret home_longitude

  - platform: filter
    name: ambient_temperature_filtered
    entity_id: sensor.conditions_temperature
    filters:
      filter: lowpass
      time_constant: 10
      precision: 1

  - platform: history_stats
    name: Fair Weather Time
    entity_id: binary_sensor.is_fair_weather
    state: "on"
    type: time  # duration
    start: "{{ today_at() }}"
    end: "{{ now() }}"

  - platform: template
    sensors:
      solar_angle:
        friendly_name: "Sun Angle"
        unit_of_measurement: '°'
        value_template: "{{ '%+.1f' | format(state_attr('sun.sun', 'elevation')) }}"
        icon_template: mdi:sun-angle-outline
      outside_temperature:
        friendly_name: "Outside Temperature"
        value_template: >-
          {{ state_attr('weather.openweathermap_hourly', 'temperature') | float(None) }}
          {# states('sensor.saaqis_ambient_temperature') | float(None) #}
        device_class: temperature
        unit_of_measurement: "°C"
        icon_template: mdi:thermometer
      outside_feels_like:
        friendly_name: "Outside Temperature Feels Like"
        value_template: >-
          {{ states('sensor.openweathermap_feels_like_temperature') | round(1)  }}
        device_class: temperature
        unit_of_measurement: "°C"
        icon_template: mdi:thermometer
      daylight_hm:
        friendly_name: "Daylight Length"
        value_template: >-
          {{ state_attr('sensor.home_sun_daylight', 'today_hms')[:5] }}
        icon_template: mdi:weather-sunny
      nighttime_number:
        value_template: "{{ iif(is_state('binary_sensor.nighttime', 'on'), 1, 0) }}"
      temperature_difference:
        friendly_name: "Inside vs Outside Temperature"
        value_template: >-
          {{ (states('sensor.office_temperature') | float(0) - states('sensor.outside_temperature') | float(0)) | round(1) }}
        device_class: temperature
        unit_of_measurement: "°C"
      fair_weather_time_share:
        friendly_name: "Fair Weather Time Share"
        value_template: >-
          {{ min((states('sensor.fair_weather_time') | float(0) / states('sensor.home_sun_daylight') | float(0) * 100) | round(0), 100) if has_value('sensor.home_sun_daylight') else 0 }}
        unit_of_measurement: "%"
      time_of_day:
        friendly_name: Time of Day
        value_template: "{{ 'Day' if states('sensor.solar_angle') | float(0) >= -0.833 else 'Night' }}"

template:
  - binary_sensor:
      # https://www.home-assistant.io/integrations/weather/#condition-mapping
      # see day-time and night-time sensors regarding the value of -0.833
      - name: Is Fair Weather
        # only for daytime
        state: >-
          {# technically it should be -0.833 (not -1), but due to sensor update timings we're stretching it a little bit #}
          {{ (is_state('weather.openweathermap_hourly', 'sunny') or
              is_state('weather.openweathermap_hourly', 'partlycloudy')) and
             states('sensor.solar_angle') | float(0) >= -1 }}
      # this is just to be able to plot a simple state history,
      # because the history graph chart will do a fancy plot if it sees a climate entity
      - name: Living Room AC
        state: "{{ has_value('climate.living_room_ac') and not is_state('climate.living_room_ac', 'off') }}"
      - name: Main Bedroom AC
        state: "{{ has_value('climate.main_bedroom_ac') and not is_state('climate.main_bedroom_ac', 'off') }}"

  - sensor:
      - name: Overall Pollen Risk for Badge
        state: >-
          {{ states('sensor.overall_pollen_risk') }}
        attributes:
          label: >-
            {% set mapping = {
                                1: "Very Low",
                                2: "Low",
                                3: "Moderate",
                                4: "High",
                                5: "Very High" } %}
            {% set key = states('sensor.overall_pollen_risk') | int(0) %}
            {{ mapping[key] if key in mapping else "Unknown" }}
          color: >-
            {% set mapping = {
                                1: "#40b100",
                                2: "#ffe500",
                                3: "#ffa800",
                                4: "#ff5800",
                                5: "#aa0000" } %}
            {% set key = states('sensor.overall_pollen_risk') | int(0) %}
            {{ mapping[key] if key in mapping else "#ffffff" }}
        icon: >-
          {% set mapping = {
                              1: "mdi:gauge-empty",
                              2: "mdi:gauge-low",
                              3: "mdi:gauge",
                              4: "mdi:gauge-full",
                              5: "mdi:gauge-full" } %}
          {% set key = states('sensor.overall_pollen_risk') | int(0) %}
          {{ mapping[key] if key in mapping else "mdi:alert" }}

  # https://www.home-assistant.io/integrations/template/#trigger-based-handling-of-service-response-data
  # https://community.home-assistant.io/t/petition-dont-delete-the-forecast-attribute/609298/38
  # https://community.home-assistant.io/t/petition-dont-delete-the-forecast-attribute/609298/240
  - trigger:
    - platform: time_pattern
      # every 5 minutes past the hour
      hours: "*"
      minutes: "5"
    - platform: state
      entity_id: weather.openweathermap_hourly
    action:
      - service: weather.get_forecasts
        target:
          entity_id: weather.openweathermap_hourly
        data:
          type: hourly
        response_variable: hourly
    sensor:
      - name: Weather Tomorrow Hourly
        unique_id: "3e214cd0-be86-4ec9-b9ae-d9f7133a35a2"
        # make temperature? (and then device_class and uom)
        state: "{{ now().isoformat() }}"
        # device_class: duration
        # unit_of_measurement: s
        attributes:
          forecast: "{{ hourly['weather.openweathermap_hourly']['forecast'][24:] }}"
          attribution: "{{ state_attr('sensor.weather_tomorrow_hourly', 'attribution') }}"
  - trigger:
    - platform: time_pattern
      # every 5 minutes past the hour
      hours: "*"
      minutes: "5"
    - platform: state
      entity_id: weather.openweathermap_daily
    action:
      - service: weather.get_forecasts
        target:
          entity_id: weather.openweathermap_daily
        data:
          type: daily
        response_variable: daily
    sensor:
      - name: Weather Forecast Precipitation Tomorrow
        unique_id: "2f58f787-0427-462d-a5c1-c2e1b568f0c7"
        state: >-
          {{ daily['weather.openweathermap_daily']['forecast'][1]['precipitation'] }}
        device_class: precipitation
        unit_of_measurement: "mm"
        icon: >-
          {% if daily['weather.openweathermap_daily']['forecast'][1]['precipitation'] > 0 %}
            mdi:water
          {% else %}
            mdi:water-off
          {% endif %}

multiscrape:
  - resource: https://pollencount.co.za/
    scan_interval: 21600  # 60*60*6 or 4 updates per day
    timeout: 30
    sensor:
      - name: Overall Pollen Risk
        icon: mdi:flower-pollen-outline
        select: "#wpv-view-layout-300 > div > div > div.image-resize > div:nth-child(2) > div:nth-child(2) > div"
        attribute: "class"
        value_template: >-
          {# set value = ["pollen-darkorange"] #}
          {%- from 'pollen.jinja' import color_level_map -%}
          {%- set key = value | first -%}
          {{ color_level_map[key] if key in color_level_map else "unknown" }}
        on_error:
          value: last
        attributes:
          - name: Label
            select: "#wpv-view-layout-300 > div > div > div.image-resize > div:nth-child(2) > div:nth-child(2) > div"
            attribute: "class"
            value_template: >-
              {%- from 'pollen.jinja' import color_label_map -%}
              {%- set key = value | first -%}
              {{ color_label_map[key] if key in color_label_map else "Unavailable" }}
            on_error:
              value: last
          # this looks like massive duplication, but we want attributes here so that we can trigger on state
          # changes of this sensor if an individual pollen level has changed. we need the individual sensors
          # so that we can set a name and an icon for use on dashboards. granted, we can make these normal
          # template sensors that extracts the attributes from here.
          - name: Tree Pollen
            select: "#wpv-view-layout-300 > div > div > div.image-resize > div:nth-child(2) > div:nth-child(3) > div"
            attribute: "class"
            value_template: >-
              {%- from 'pollen.jinja' import color_label_map -%}
              {%- set key = value | first -%}
              {{ color_label_map[key] if key in color_label_map else "unknown" }}
            on_error:
              value: last
          - name: Grass Pollen
            select: "#wpv-view-layout-300 > div > div > div.image-resize > div:nth-child(2) > div:nth-child(4) > div"
            attribute: "class"
            value_template: >-
              {%- from 'pollen.jinja' import color_label_map -%}
              {%- set key = value | first -%}
              {{ color_label_map[key] if key in color_label_map else "unknown" }}
            on_error:
              value: last
          - name: Weed Pollen
            select: "#wpv-view-layout-300 > div > div > div.image-resize > div:nth-child(2) > div:nth-child(5) > div"
            attribute: "class"
            value_template: >-
              {%- from 'pollen.jinja' import color_label_map -%}
              {%- set key = value | first -%}
              {{ color_label_map[key] if key in color_label_map else "unknown" }}
            on_error:
              value: last
          - name: Mould Spores
            select: "#wpv-view-layout-300 > div > div > div.image-resize > div:nth-child(2) > div:nth-child(6) > div"
            attribute: "class"
            value_template: >-
              {%- from 'pollen.jinja' import color_label_map -%}
              {%- set key = value | first -%}
              {{ color_label_map[key] if key in color_label_map else "unknown" }}
            on_error:
              value: last
      - name: Tree Pollen
        icon: mdi:pine-tree
        select: "#wpv-view-layout-300 > div > div > div.image-resize > div:nth-child(2) > div:nth-child(3) > div"
        attribute: "class"
        value_template: >-
          {%- from 'pollen.jinja' import color_level_map -%}
          {%- set key = value | first -%}
          {{ color_level_map[key] if key in color_level_map else "unknown" }}
        on_error:
          value: last
        attributes:
          - name: Label
            select: "#wpv-view-layout-300 > div > div > div.image-resize > div:nth-child(2) > div:nth-child(3) > div"
            attribute: "class"
            value_template: >-
              {%- from 'pollen.jinja' import color_label_map -%}
              {%- set key = value | first -%}
              {{ color_label_map[key] if key in color_label_map else "Unavailable" }}
            on_error:
              value: last
      - name: Grass Pollen
        icon: mdi:grass
        select: "#wpv-view-layout-300 > div > div > div.image-resize > div:nth-child(2) > div:nth-child(4) > div"
        attribute: "class"
        value_template: >-
          {%- from 'pollen.jinja' import color_level_map -%}
          {%- set key = value | first -%}
          {{ color_level_map[key] if key in color_level_map else "unknown" }}
        on_error:
          value: last
        attributes:
          - name: Label
            select: "#wpv-view-layout-300 > div > div > div.image-resize > div:nth-child(2) > div:nth-child(4) > div"
            attribute: "class"
            value_template: >-
              {%- from 'pollen.jinja' import color_label_map -%}
              {%- set key = value | first -%}
              {{ color_label_map[key] if key in color_label_map else "Unavailable" }}
            on_error:
              value: last
      - name: Weed Pollen
        icon: mdi:sprout
        select: "#wpv-view-layout-300 > div > div > div.image-resize > div:nth-child(2) > div:nth-child(5) > div"
        attribute: "class"
        value_template: >-
          {%- from 'pollen.jinja' import color_level_map -%}
          {%- set key = value | first -%}
          {{ color_level_map[key] if key in color_level_map else "unknown" }}
        on_error:
          value: last
        attributes:
          - name: Label
            select: "#wpv-view-layout-300 > div > div > div.image-resize > div:nth-child(2) > div:nth-child(5) > div"
            attribute: "class"
            value_template: >-
              {%- from 'pollen.jinja' import color_label_map -%}
              {%- set key = value | first -%}
              {{ color_label_map[key] if key in color_label_map else "Unavailable" }}
            on_error:
              value: last
      - name: Mould Spores
        icon: mdi:grain
        select: "#wpv-view-layout-300 > div > div > div.image-resize > div:nth-child(2) > div:nth-child(6) > div"
        attribute: "class"
        value_template: >-
          {%- from 'pollen.jinja' import color_level_map -%}
          {%- set key = value | first -%}
          {{ color_level_map[key] if key in color_level_map else "unknown" }}
        on_error:
          value: last
        attributes:
          - name: Label
            select: "#wpv-view-layout-300 > div > div > div.image-resize > div:nth-child(2) > div:nth-child(6) > div"
            attribute: "class"
            value_template: >-
              {%- from 'pollen.jinja' import color_label_map -%}
              {%- set key = value | first -%}
              {{ color_label_map[key] if key in color_label_map else "Unavailable" }}
            on_error:
              value: last
  - resource: https://forestry.co.za/fire-danger-index/
    scan_interval: 3600  # 60*60 or hourly updates
    timeout: 30
    log_response: true
    sensor:
      # http://envirowildfire.co.za/the-fire-danger-index/
      # Blue   :  0 –  20 : SAFE           : Cold and wet.
      # Green  : 21 –  45 : MODERATE       : Low fire risk. Care to be taken for burning operations.
      # Yellow : 46 –  60 : DANGEROUS      : Caution advised.
      # Orange : 61 –  75 : VERY DANGEROUS : Teams kept on stand by. No open flames.
      # Red    : 81 – 100 : EXTREME        : Warnings presented on radio and TV forecasts.
      - name: Winelands FDI
        icon: >-
          {% if value | int(0) > 45 %}
            mdi:fire-alert
          {% else %}
            mdi:fire
          {% endif %}
        # https://community.home-assistant.io/t/scrape-sensor-improved-scraping-multiple-values/218350/469
        # copy soup file locally
        # from bs4 import BeautifulSoup
        # f = open('page_soup.txt')
        # soup = BeautifulSoup(f, 'html.parser')
        # prettyHtml = soup.prettify()
        # with open('pretty.html', 'w') as o:
        #   o.write(prettyHtml)
        # open file in browser
        # copy selector
        # test selector with:
        # soup.select_one("...")
        select: "main > div.page-content > div.elementor-8676 > section.elementor-element-b51f73d > div > div.elementor-element-72d9bb2 > div > div.elementor-element-b529cf5 > div > div > div.postie-post > table:nth-of-type(12) > tr:nth-child(10) > td:nth-child(3) > font"
        value_template: >-
          {{ value | int(0) }}
        on_error:
          value: last

rest:
  # https://jsoncrack.com/editor

  # - resource_template: 'http://weather.sun.ac.za/api/getSonbesie.php?start={{ utcnow() | as_timestamp | int - 300 }}&end={{ utcnow() | as_timestamp | int }}'
  #   method: GET
  #   scan_interval: 300
  #   timeout: 15
  #   sensor:
  #     - name: Sun Illuminance
  #       device_class: illuminance
  #       # http://weather.sun.ac.za/
  #       # http://weather.sun.ac.za/api/Sonbesie%20metadata.pdf
  #       # we're using the GHI (global horizontal irradiance here)
  #       # https://www.ammonit.com/en/wind-solar-wissen/solarmessung
  #       # https://www.nrel.gov/grid/solar-resource/solar-glossary.html#globalhorizontalradiation
  #       # GHI = DHI + DNI · cos (θ) (where θ is the solar zenith angle)
  #       # The total amount of radiation received from above by a horizontal surface. This value includes both Direct Normal Irradiation (DNI) and Diffuse Horizontal Irradiation (DHI).
  #       # https://physics.stackexchange.com/questions/135618/rm-lux-and-w-m2-relationship
  #       # https://www.nasa.gov/pdf/583137main_Inverse_Square_Law_of_Light.pdf
  #       # Identification of residential electricity consumption profiles for building dynamic simulation through smart-meter data:
  #       # There is no simple conversion from lux to W/m2, since it depends on the wavelength or color of the light. However, a simplification was adapted: for the sun light there is
  #       # an approximate conversion of 0.0079 W/m2 per lux [72], valid for direct sunlight, while for daylight the appropriate conversion drops to 10% of that value [73].
  #       # https://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=&cad=rja&uact=8&ved=2ahUKEwjFuLDfl6TwAhXISxUIHQ_yA8sQFjAFegQICBAD&url=https%3A%2F%2Ffenix.tecnico.ulisboa.pt%2FdownloadFile%2F1970719973966843%2FMasterThesis_70481.pdf&usg=AOvVaw35OzdODshLT6JlqkKa_hGJ
  #       # https://www.researchgate.net/publication/347362859_A_conversion_guide_solar_irradiance_and_lux_illuminance
  #       # comparing the last two papers: 1/0.0079 W/mˆ2 = 126 lx ~= 122 +- 1 lx
  #       # general:
  #       # https://en.wikipedia.org/wiki/Irradiance
  #       # https://depts.washington.edu/mictech/optics/me557/Radiometry.pdf
  #       # https://www.jvejournals.com/article/21667
  #       # https://bg.copernicus.org/preprints/6/10625/2009/bgd-6-10625-2009.pdf
  #       # https://www.nrel.gov/docs/legosti/old/2436.pdf
  #       value_template: "{{ value_json[-1].SunWM_Avg | float | multiply(1/0.0079) if value_json else 'unknown' }}"
  #       unit_of_measurement: "lx"
  #     - name: Sun Irradiance
  #       value_template: "{{ value_json[-1].SunWM_Avg | float if value_json else 'unknown' }}"
  #       unit_of_measurement: "W/m²"
  #     # https://www.epa.gov/sunsafety/calculating-uv-index-0
  #     # https://www.canada.ca/en/conservation-institute/services/conservation-preservation-publications/canadian-conservation-institute-notes/measurement-ultraviolet-radiation.html
  #     # https://www.kippzonen.com/Download/137/Brochure-UV-Radiometers-CUV-5-and-UVS-range -> KippZonen_Brochure_UV_Radiometers_V1508.pdf
  #     # https://www.kippzonen.com/News/411/Choosing-the-Right-UV-Radiometer#.YRkvs4Qq2Ak
  #     # To avoid this confusion, United Nations organisations combined to produce the
  #     # Global Solar UV Index (UVI). This is now accepted world-wide as the basis for
  #     # public health. information. The erythemal spectral response function is defined
  #     # by ISO: 17166:1999 / CIE S 007/E-1998. The Global Solar UV Index can be calculated
  #     # by multiplying the UVE radiation value in W/m² by 40 m²/W. For example, 0.25 W/m²
  #     # of UVE represents a UV Index of 10. A UVB radiometer is not ideal for the
  #     # measurement of UVE. The UVS-E-T and UVS-AE-T radiometers are specifically designed
  #     # for this application.
  #     # https://www.who.int/uv/publications/en/UVIGuide.pdf
  #     # https://www.esrl.noaa.gov/gmd/grad/neubrew/docs/UVindex.pdf
  #     # http://www.dfisica.ubi.pt/~hgil/Fotometria/HandBook/ch07.html
  #     # https://www.ncbi.nlm.nih.gov/books/NBK401584/
  #     # https://www.who.int/uv/publications/Protecting_Workers_UV_pub.pdf
  #     # http://strang.smhi.se/extraction/units-conversion.html
  #     - name: UVA Irradiance
  #       value_template: "{{ value_json[-1].UVA_Avg | float if value_json else 'unknown' }}"
  #       unit_of_measurement: "W/m²"
  #     - name: UVB Irradiance
  #       value_template: "{{ value_json[-1].UVB_Avg | float if value_json else 'unknown' }}"
  #       unit_of_measurement: "W/m²"
  - resource_template: >-
      {# station ID: 156 (Stellenbosch) #}
      {% set from = (now() - timedelta(minutes=30)) | as_timestamp | timestamp_custom('%Y-%m-%dT%H:%M') %}
      {% set to = now() | as_timestamp | timestamp_custom('%Y-%m-%dT%H:%M') %}
      https://saaqis.environment.gov.za:44301/v1/envista/stations/156/Average?from={{ from }}&to={{ to }}&fromTimebase=1&toTimebase=1&timeBeginning=false&useBackWard=false&includeSummary=false&roundType=1&unitid=-1
    headers:
      Accept-Language: 'en-ZA;q=1.0'
      User-Agent: 'SouthAfricaAQM/2.0.28 (com.Envitech.SouthAfricaAQM; build:1.0.0; iOS 14.7.1) Alamofire/4.0.1'
      Accept: '*/*'
      Authorization: !secret saaqis_api_token
    method: GET
    verify_ssl: false
    scan_interval: 600  # 10 min
    timeout: 15
    sensor:
      # these don't seem to be available anymore
      # - name: SAAQIS PM Coarse
      #   value_template: >-
      #     {% if value_json is defined and "data" in value_json %}
      #       {% set data_list = (value_json.data | last).channels | selectattr('name', '==', 'PM Coarse') | list %}
      #       {% if data_list != [] %}
      #         {% set data = data_list | first %}
      #         {% if data.valid %}
      #           {% if data.value >= 0 %}
      #             {{ data.value }}
      #           {% else %}
      #             0
      #           {% endif %}
      #         {% else %}
      #           0
      #         {% endif %}
      #       {% else %}
      #         0
      #       {% endif %}
      #     {% else %}
      #       0
      #     {% endif %}
      #   unit_of_measurement: "µg/m³"
      # - name: SAAQIS PM 10
      #   value_template: >-
      #     {% if value_json is defined and "data" in value_json %}
      #       {% set data_list = (value_json.data | last).channels | selectattr('name', '==', 'PM10') | list %}
      #       {% if data_list != [] %}
      #         {% set data = data_list | first %}
      #         {% if data.valid %}
      #           {% if data.value >= 0 %}
      #             {{ data.value }}
      #           {% else %}
      #             0
      #           {% endif %}
      #         {% else %}
      #           0
      #         {% endif %}
      #       {% else %}
      #         0
      #       {% endif %}
      #     {% else %}
      #       0
      #     {% endif %}
      #   device_class: pm10
      #   unit_of_measurement: "µg/m³"
      # - name: SAAQIS PM 2.5
      #   value_template: >-
      #     {% if value_json is defined and "data" in value_json %}
      #       {% set data_list = (value_json.data | last).channels | selectattr('name', '==', 'PM2.5') | list %}
      #       {% if data_list != [] %}
      #         {% set data = data_list | first %}
      #         {% if data.valid %}
      #           {% if data.value >= 0 %}
      #             {{ data.value }}
      #           {% else %}
      #             0
      #           {% endif %}
      #         {% else %}
      #           0
      #         {% endif %}
      #       {% else %}
      #         0
      #       {% endif %}
      #     {% else %}
      #       0
      #     {% endif %}
      #   device_class: pm25
      #   unit_of_measurement: "µg/m³"
      # https://www2.dmu.dk/atmosphericenvironment/expost/database/docs/ppm_conversion.pdf
      # https://cfpub.epa.gov/ncer_abstracts/index.cfm/fuseaction/display.files/fileid/14285
      # https://www.breeze-technologies.de/blog/air-pollution-how-to-convert-between-mgm3-%C2%B5gm3-ppm-ppb/
      - name: SAAQIS O3
        value_template: >-
          {% if value_json is defined and "data" in value_json %}
            {% set data_list = (value_json.data | last).channels | selectattr('name', '==', 'O3') | list %}
            {% if data_list != [] %}
              {% set data = data_list | first %}
              {% if data.valid %}
                {% if data.value >= 0 %}
                  {% set temp_kelvin = 273.15 + states('sensor.outside_temperature') | float(0) %}
                  {% set const = 12.187 %}
                  {% set molecular_weight = 48 %}
                  {{ (data.value*const*molecular_weight/temp_kelvin) | round(3) }}
                {% else %}
                  0
                {% endif %}
              {% else %}
                0
              {% endif %}
            {% else %}
              0
            {% endif %}
          {% else %}
            0
          {% endif %}
        device_class: ozone
        unit_of_measurement: "µg/m³"
      - name: SAAQIS NO2
        value_template: >-
          {% if value_json is defined and "data" in value_json %}
            {% set data_list = (value_json.data | last).channels | selectattr('name', '==', 'NO2') | list %}
            {% if data_list != [] %}
              {% set data = data_list | first %}
              {% if data.valid %}
                {% if data.value >= 0 %}
                  {% set temp_kelvin = 273.15 + states('sensor.outside_temperature') | float(0) %}
                  {% set const = 12.187 %}
                  {% set molecular_weight = 46.0055 %}
                  {{ (data.value*const*molecular_weight/temp_kelvin) | round(3) }}
                {% else %}
                  0
                {% endif %}
              {% else %}
                0
              {% endif %}
            {% else %}
              0
            {% endif %}
          {% else %}
            0
          {% endif %}
        device_class: nitrogen_dioxide
        unit_of_measurement: "µg/m³"
      - name: SAAQIS SO2
        value_template: >-
          {% if value_json is defined and "data" in value_json %}
            {% set data_list = (value_json.data | last).channels | selectattr('name', '==', 'SO2') | list %}
            {% if data_list != [] %}
              {% set data = data_list | first %}
              {% if data.valid %}
                {% if data.value >= 0 %}
                  {% set temp_kelvin = 273.15 + states('sensor.outside_temperature') | float(0) %}
                  {% set const = 12.187 %}
                  {% set molecular_weight = 64.066 %}
                  {{ (data.value*const*molecular_weight/temp_kelvin) | round(3) }}
                {% else %}
                  0
                {% endif %}
              {% else %}
                0
              {% endif %}
            {% else %}
              0
            {% endif %}
          {% else %}
            0
          {% endif %}
        device_class: sulphur_dioxide
        unit_of_measurement: "µg/m³"
      - name: SAAQIS Ambient Temperature
        value_template: >-
          {% if value_json is defined and "data" in value_json %}
            {% set data_list = (value_json.data | last).channels | selectattr('name', '==', 'Amb Temp') | list %}
            {% if data_list != [] %}
              {% set data = data_list | first %}
              {% if data.valid %}
                {% if data.value >= 0 %}
                  {{ data.value | round(1) }}
                {% else %}
                  0
                {% endif %}
              {% else %}
                0
              {% endif %}
            {% else %}
              0
            {% endif %}
          {% else %}
            0
          {% endif %}
        device_class: temperature
        unit_of_measurement: "°C"
  # https://www.weatherapi.com/docs/#apis-forecast
  # https://api.weatherapi.com/v1/forecast.json?q=<lat>%2C<long>&days=1&alerts=yes&key=<key>
  # https://www.baeldung.com/linux/jq-command-json
  - resource: !secret weather_api_alerts_url
    headers:
      Accept: 'application/json'
    method: GET
    # an alert seems to last 6 hours, but then they'll re-issue the same alert 6 hours later
    scan_interval: 43200  # 60*60*12
    timeout: 15
    sensor:
      - name: Weather Alerts
        icon: mdi:alert-outline
        value_template: "{{ value_json.alerts.alert | count }}"
        unit_of_measurement: count
        json_attributes_path: "$.alerts"
        json_attributes:
          - alert

automation:
  - alias: "Download Dam Levels Data"
    id: "0cb4d6ba-5a63-45f7-8adc-efb98724a44e"
    trigger:
      - platform: time
        at: "05:00:00"
    action:
      - service: shell_command.download_latest_dam_levels

  - alias: "Pollen Levels Update"
    id: "eeb7f4a7-367d-4aee-b4d5-cf84da3b1323"
    initial_state: true
    trigger:
      # If only entity_id is given, the trigger will fire for all state changes, even if only state attributes change.
      # https://www.home-assistant.io/docs/automation/trigger/#state-trigger
      - platform: state
        entity_id:
          - sensor.overall_pollen_risk
          - sensor.tree_pollen
          - sensor.grass_pollen
          - sensor.weed_pollen
          - sensor.mould_spores
    mode: single
    action:
      - service: notify.family
        data:
          title: "⛑️ Health"
          # https://community.home-assistant.io/t/trigger-to-from-attribute/325345
          # https://community.home-assistant.io/t/access-attribute-of-from-state/380497
          message: >-
            {%- macro build_item(sensor, name) -%}
              {%- set attribute = sensor.split('.')[1] -%}
              {%- set from = trigger.from_state.attributes[attribute] | lower -%}
              {%- set to = trigger.to_state.attributes[attribute] | lower -%}
              {%- if from != to and (from != 'unavailable' or to != 'unavailable') -%}
                {{ name }}: {{ from }} → {{ to }}
              {%- else -%}
                {{ name }}: {{ to }}
              {%- endif -%}
            {%- endmacro -%}
            {%- set sensors = [('sensor.tree_pollen', 'Trees'), ('sensor.grass_pollen', 'Grasses'), ('sensor.weed_pollen', 'Weeds'), ('sensor.mould_spores', 'Mould')] -%}
            {%- set summary = '' -%}
            {%- set from_state_label = trigger.from_state.attributes.label | lower -%}
            {%- set to_state_label = trigger.to_state.attributes.label | lower -%}
            {%- if from_state_label != to_state_label -%}
              {%- set summary = 'Pollen levels changed from ' ~ from_state_label ~ ' to ' ~ to_state_label ~ '.' -%}
            {%- else -%}
              {%- set summary = 'Pollen levels are ' ~ to_state_label ~ '.' -%}
            {%- endif -%}
            {{ summary }}
            {%- for (sensor, name) in sensors %}
              - {{ build_item(sensor, name) }}
            {%- endfor %}
          data:
            group: "environment"
            url: homeassistant://navigate/lovelace/environment

  - alias: "High UV Notification"
    id: "101c7f2d-6839-4a8c-be1a-0de46ed70477"
    initial_state: true
    trigger:
      - platform: numeric_state
        entity_id: sensor.openweathermap_uv_index
        above: 7
    mode: single
    action:
      - service: notify.family
        data:
          title: "☀️ Health"
          message: >
            UV radiation is high. Remember to apply sunscreen.
          data:
            group: "environment"
            url: homeassistant://navigate/lovelace/environment

  - alias: "High Fire Risk Notification"
    id: "657e1700-f69f-416e-9b62-269d702e8a38"
    initial_state: true
    trigger:
      - platform: numeric_state
        entity_id: sensor.winelands_fdi
        above: 45
    mode: single
    action:
      - service: notify.mobile_app_ceres
        data:
          title: "🔥 Environment"
          message: >-
            The risk of fires is high. FDI: {{ states('sensor.winelands_fdi') }}.
          data:
            group: "environment"
            url: homeassistant://navigate/lovelace/environment

  - alias: "Weather Alert Notification"
    id: "c0b01006-be9e-41e9-b1b5-adafc3ecae1b"
    initial_state: true
    trigger:
      - platform: state
        entity_id: sensor.weather_alerts
    condition:
      # not to 0 is obvious: there's no alert, so nothing to notify
      # otherwise, we can go from 0 to 1, or 0 to 2, or more
      # we only want to alert the first time going from 0
      # and not for e.g. 1 to 2
      - condition: template
        value_template: >-
          {% set from = trigger.from_state.state | int(0) %}
          {% set to = trigger.to_state.state | int(0) %}
          {{ from == 0 and to != 0 }}
    action:
      - repeat:
          for_each: "{{ state_attr('sensor.weather_alerts', 'alert') | sort(attribute='effective') }}"
          sequence:
            - variables:
                message: >-
                  {%- set event = repeat.item['event'] %}
                  {%- set from = repeat.item['effective'] | as_datetime(0) | as_local %}
                  {%- set from_str = from.strftime('%A %-d %B') %}
                  {%- set to = repeat.item['expires'] | as_datetime(0) | as_local %}
                  {%- set to_str = to.strftime('%A %-d %B') %}
                  {%- set event_body = event | capitalize %}
                  {# api encoding bug #}
                  {%- set desc = repeat.item['desc'] | replace('Â', '') %}
                  {%- if from.date() == to.date() -%}
                    {{ event_body }} for {{ from_str }}:
                  {%- else -%}
                    {{ event_body }} from {{ from_str }} until {{ to_str }}:
                  {%- endif %}
                  {%- for line in desc.split('\n') %}
                    - {{ line }}
                  {%- endfor %}
            # only a critical sound notification when it's not night
            - choose:
                - conditions:
                    - condition: time
                      after: "08:00:00"
                      before: "20:00:00"
                  sequence:
                    - service: notify.family
                      data:
                        title: "⚠️ Extreme Weather"
                        message: "{{ message }}"
                        data:
                          group: "weather"
                          url: homeassistant://navigate/lovelace/environment
                          push:
                            sound:
                              name: default
                              critical: 1
                              volume: 0.5
              default:
                - service: notify.family
                  data:
                    title: "⚠️ Extreme Weather"
                    message: "{{ message }}"
                    data:
                      group: "weather"
                      url: homeassistant://navigate/lovelace/environment
