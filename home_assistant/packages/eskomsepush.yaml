# credit: https://github.com/tinuva/home-assistant-config/blob/8b16e0fa53be37682e4add2f338d8777bfd9896e/packages/energy/eskomsepush.yaml
---
### EskomSePush API Docs: https://documenter.getpostman.com/view/1296288/UzQuNk3E
### To sign up for a key, scroll down on their page for the API Request link: https://sepush.co.za/
### Direct link to sign-up form: https://docs.google.com/forms/d/e/1FAIpQLSeZhAkhDaQX_mLT2xn41TkVjLkOH3Py3YWHi_UqQP4niOY01g/viewform

# other interesting links:
# https://www.eskom.co.za/eskom-divisions/tx/system-adequacy-reports/

rest:
  - resource: "https://developer.sepush.co.za/business/2.0/area"
    scan_interval: 3600  # rate limit
    headers:
      Token: !secret eskomsepush
    params:
      id: "westerncape-2-stellenboschmunicipality"
    sensor:
      - name: EskomSePush
        force_update: true
        value_template: "OK"
        json_attributes:
          - events
          - info
          - schedule

sensor:
  # Eskom se Push sensor
  - platform: rest
    name: EskomSePush Allowance
    resource: "https://developer.sepush.co.za/business/2.0/api_allowance"
    headers:
      Token: !secret eskomsepush
    json_attributes_path: "$.allowance"
    json_attributes:
      - count
      - limit
      - type
    value_template: "OK"
    scan_interval: 3600

  # template sensors abased on ESP above
  # todo: what if there's no loadshedding?
  - platform: template
    sensors:
      loadshedding_start_time:
        unique_id: loadshedding_start_time
        friendly_name: Loadshedding Start Time
        device_class: timestamp
        value_template: "{{ (state_attr('sensor.eskomsepush', 'events') | first).start }}"
      loadshedding_end_time:
        unique_id: loadshedding_end_time
        friendly_name: Loadshedding End Time
        device_class: timestamp
        value_template: "{{ (state_attr('sensor.eskomsepush', 'events') | first).end }}"
      loadshedding_stage:
        unique_id: loadshedding_stage
        friendly_name: Loadshedding Stage
        icon_template: >-
          {% if states('sensor.eskomsepush')
                and state_attr('sensor.eskomsepush', 'events') != []
                and 'note' in (state_attr('sensor.eskomsepush', 'events') | first) %}
            {% set stage = (state_attr('sensor.eskomsepush', 'events') | first).note %}
            {% if stage == 'Stage 1' %}
              mdi:gauge-empty
            {% elif stage == 'Stage 2' %}
              mdi:gauge-low
            {% elif stage == 'Stage 3' %}
              mdi:gauge
            {% else %}
              mdi:gauge-full
            {% endif %}
          {% else %}
            mdi:checkbox-marked-circle
          {% endif %}
        value_template: "{{ (state_attr('sensor.eskomsepush', 'events') | first).note }}"
      loadshedding_duration:
        friendly_name: Loadshedding Duration
        unique_id: loadshedding_duration
        device_class: duration
        unit_of_measurement: m
        value_template: >-
          {%- if states('sensor.eskomsepush') and state_attr('sensor.eskomsepush', 'events') != [] -%}
            {{ states('sensor.loadshedding_end_time') | as_datetime - states('sensor.loadshedding_start_time') | as_datetime }}
          {%- else -%}
            {{ "00:00"  | as_timedelta }}
          {%- endif -%}
      eskomsepush_calls_remaining:
        unique_id: eskomsepush_api_calls_remaining
        friendly_name: EskomSePush API Calls Remaining
        icon_template: mdi:api
        value_template: "{{ state_attr('sensor.eskomsepush_allowance', 'limit') | int(0) - state_attr('sensor.eskomsepush_allowance', 'count') | int(0) }}"
      loadshedding_slot_forecast:
        unique_id: loadshedding_forecast
        friendly_name: Loadshedding Forecast
        value_template: >
          {%- if state_attr('sensor.eskomsepush', 'events') != [] -%}
            {% for event in states['sensor.eskomsepush'].attributes.events -%}
              {%- set date = as_timestamp(event['start']) | timestamp_custom('%a %d %b') -%}
              {%- set stage = event['note'] -%}
              {%- set start_time = as_timestamp(event['start']) | timestamp_custom('%H:%M') -%}
              {%- set end_time = as_timestamp(event['end']) | timestamp_custom('%H:%M') -%}
              {{ date ~ ': ' ~ stage ~ ' from ' ~ start_time ~ ' to ' ~ end_time ~ '\n'}}
            {%- endfor -%}
          {%- else -%}
            No forecast available.
          {%- endif -%}

binary_sensor:
  - platform: template
    sensors:
      loadshedding_active:
        friendly_name: Loadshedding Active
        device_class: problem
        value_template: >-
          {%- if state_attr('sensor.eskomsepush', 'events') == [] -%}
            False
          {%- else -%}
            {% set start = (state_attr('sensor.eskomsepush', 'events') | first).start | as_datetime %}
            {% set end = (state_attr('sensor.eskomsepush', 'events') | first).end | as_datetime %}
            {{ start <= now() <= end }}
          {%- endif -%}

timer:
  loadshedding_duration:
    name: Loadshedding Duration Remaining
    restore: true

automation:
  - alias: Start Loadshedding Timer
    id: "ed1036a6-3399-4e6b-a4ca-889e75da896f"
    trigger:
      - platform: time
        at: sensor.loadshedding_start_time
    condition:
      - condition: state
        entity_id: timer.loadshedding_duration
        state: 'idle'
    action:
      - service: timer.start
        data:
          entity_id: timer.loadshedding_duration
          duration: >-
            {% set start = (state_attr('sensor.eskomsepush', 'events') | first).start | as_datetime %}
            {% set end = (state_attr('sensor.eskomsepush', 'events') | first).end | as_datetime %}
            {{ end - start }}

#   - alias: Loadshedding forecast notification
#     initial_state: 'on'
#     trigger:
#       - entity_id: sensor.loadshedding_slot_forecast
#         platform: state
#     action:
#       - alias: "Alert change"
#         service: script.alert
#         data:
#           icon: ':zap:'
#           object: 'Loadshedding forecast'
#           target: 'alerts-david'
#           message: >
#             {{ states.sensor.loadshedding_slot_forecast.state }}

#   - alias: Upcoming slot notification
#     initial_state: 'on'
#     trigger:
#       - entity_id: sensor.time_till_loadshedding
#         platform: state
#         to: '15'
#     action:
#       - alias: "Alert change"
#         service: script.alert
#         data:
#           icon: ':zap:'
#           object: 'Loadshedding slot'
#           target: 'alerts-david'
#           message: >
#             Loadshedding slot in 15 minutes
