homeassistant:
  customize:
    person.pieter_rautenbach:
      entity_picture: '/local/pieter.jpg'
    person.rouve_rautenbach:
      entity_picture: '/local/rouve.jpg'
    sensor.google_travel_time:
      device_class: duration
    sensor.google_travel_time_filtered:
      device_class: duration
    sensor.baby_sleeping:
      device_class: duration
      unit_of_measurement: h
      icon: mdi:bed-clock
      state_class: total_increasing
    script.take_snapshot:
      friendly_name: Take Camera Snapshot
      icon: mdi:camera
    switch.bug_zapper:
      friendly_name: Bug Zapper
      icon: mdi:bug-outline
    switch.main_bathroom_fan:
      icon: mdi:fan
    switch.bathroom_fan:
      icon: mdi:fan

input_datetime:
  wake_up_time:
    has_time: true
    icon: mdi:alarm
  vacation_start:
    has_date: true
  vacation_end:
    has_date: true
  go_home_reminder:
    has_time: true
    icon: mdi:home-clock-outline

input_boolean:
  pieter_present:
    name: Pieter Presence
    icon: mdi:account
  rouve_present:
    name: Rouvé Presence
    icon: mdi:account
  guest_mode:
    name: Guest Mode
    icon: mdi:briefcase-outline
  contractor_mode:
    name: Contractor Mode
    icon: mdi:account-hard-hat-outline
  tenant_mode:
    name: Tenant Mode
    icon: mdi:account
  skip_next_wake_up_time:
    name: Skip Next Wake Up Time
    icon: mdi:alarm-off
  baby_sleep_mode:
    name: Baby's Sleep Mode
    icon: mdi:bell-sleep-outline
  everyday_routine:
    name: Everyday Routine
    icon: mdi:sun-clock-outline
  trash_reminder:
    name: Trash Reminder
    icon: mdi:trash-can-outline
  ac_maintenance_mode:
    name: AC Maintenance Mode
    icon: mdi:wrench-clock
  disable_auto_on_ac:
    name: Disable Auto On AC
    icon: mdi:hvac-off

input_number:
  baby_current_sleep_session:
    name: Baby's Current Sleep Session
    icon: mdi:timer-outline
    min: 0
    max: 86400

notify:
  - name: family
    platform: group
    services:
      - service: mobile_app_ceres
      - service: mobile_app_rouve

timer:
  main_bathroom_light_timer:
    duration: "00:15:00"
    restore: true
  main_bathroom_fan_timer:
    duration: "00:30:00"
    restore: true
  bathroom_light_timer:
    duration: "00:15:00"
    restore: true
  bathroom_fan_timer:
    duration: "00:15:00"
    restore: true
  go_home_reminder:
    duration: "00:05:00"
    restore: true
  living_room_ac_timer:
    duration: "00:30:00"
    restore: true
  main_bedroom_ac_timer:
    duration: "00:30:00"
    restore: true

binary_sensor:
  - platform: template
    sensors:
      # https://www.home-assistant.io/integrations/bayesian/
      pieter_present:
        friendly_name: "Pieter Present"
        # DO NOT change this to an or condition
        # false positives for not being home will trigger automations when it changes to home
        value_template: >-
          {{ is_state("input_boolean.pieter_present", "on") or
             is_state("person.pieter_rautenbach", "home") }}
      rouve_present:
        friendly_name: "Rouvé Present"
        value_template: >-
          {{ is_state("input_boolean.rouve_present", "on") or
             is_state("person.rouve_rautenbach", "home") }}
      tenant_present:
        friendly_name: "Tenant Present"
        delay_off:
          minutes: 20
        # ping succeeded and alarm is not armed
        value_template: >-
          {{ is_state("binary_sensor.tenant_mobile_phone", "on") and is_state('alarm_control_panel.flatlet', 'disarmed') }}
      housekeeper_present:
        friendly_name: "Housekeeper Present"
        delay_off:
          minutes: 20
        value_template: >-
          {{ is_state("binary_sensor.housekeeper_mobile_phone", "on") }}
      anybody_home:
        friendly_name: "Anybody Home"
        value_template: >-
          {{ (is_state("binary_sensor.pieter_present", "on") or is_state("binary_sensor.rouve_present", "on") or
              is_state("input_boolean.guest_mode", "on") or is_state("input_boolean.contractor_mode", "on")) and
             not is_state("alarm_control_panel.home", "armed_away") }}
        icon_template: >-
          {% if (is_state("binary_sensor.pieter_present", "on") or is_state("binary_sensor.rouve_present", "on") or
                 is_state("input_boolean.guest_mode", "on") or is_state("input_boolean.contractor_mode", "on")) and
                not is_state("alarm_control_panel.home", "armed_away") %}
            mdi:home-account
          {% else %}
            mdi:home
          {% endif %}

  # - platform: ffmpeg_noise
  #   name: Baby Monitor Sound Alarm
  #   input: !secret baby_monitor_stream
  #   peak: -30
  #   # don't detect ptz movement!
  #   duration: 3
  #   extra_arguments: -nostats

  - platform: group
    name: "Family Present"
    device_class: presence
    entities:
      - binary_sensor.pieter_present
      - binary_sensor.rouve_present

sensor:
  - platform: history_stats
    unique_id: "3bfae997-a2dc-4af4-a654-680733bd66ef"
    name: Baby Sleeping
    entity_id: input_boolean.baby_sleep_mode
    state: "on"
    type: time
    # because we want to track across midnight; we're assuming they've woken up from the night session by 9 am
    start: "{{ today_at('17:00') - timedelta(days=1) }}"
    end: "{{ today_at('17:00') }}"

template:
  - binary_sensor:
      - name: "Baby Sleeping"
        unique_id: "8543fff9-562e-47e7-9d12-0a8f9349168d"
        state: "{{ is_state('input_boolean.baby_sleep_mode', 'on') }}"
        icon: >-
          {% if is_state('input_boolean.baby_sleep_mode', 'on') %}
            mdi:sleep
          {% else %}
            mdi:sleep-off
          {% endif %}

  # https://community.home-assistant.io/t/template-sensor-to-tell-me-how-long-a-door-remained-open-for-the-last-time/419416/8?u=parautenbach
  - trigger:
      - platform: state
        entity_id: input_boolean.baby_sleep_mode
        from: "on"
        to: "off"
    sensor:
      - name: "Baby Last Sleep Session"
        unique_id: "27531163-2af9-4f3c-b67d-a75f78703705"
        state: "{{ (trigger.to_state.last_updated | as_timestamp(0) - trigger.from_state.last_updated | as_timestamp(0)) | int(0) }}"
        device_class: duration
        unit_of_measurement: s
        icon: mdi:timer-outline

  # https://community.home-assistant.io/t/time-elapsed-counter/139907/10
  # https://community.home-assistant.io/t/timer-and-stopwatch/188524/4
  # alternative: https://community.home-assistant.io/t/display-remaining-seconds-of-timer-in-frontend/119835/76
  - sensor:
      - name: "Baby Current Sleep Session"
        unique_id: "33230253-7dd3-4074-b4fd-d5d5406f7114"
        state: "{{ max(states('input_number.baby_current_sleep_session') | int(0) - 1, 0) }}"
        device_class: duration
        unit_of_measurement: s
        icon: mdi:timer-outline

script:
  send_pieter_work_cape_town_to_home_eta:
    mode: single
    sequence:
      - service: notify.family
        data:
          title: "🕓 Home ETA"
          # subtract 5 min because we're already on our way when we leave the zone
          message: "Pieter left work and will be home at {{ (now().timestamp() + (states('sensor.google_travel_time') | float - 5)*60) | timestamp_custom('%H:%M', True) }}."
          data:
            group: "travel-eta"
            url: homeassistant://navigate/lovelace/main
  take_snapshot:
    fields:
      camera_entity:
        description: "A camera entity"
        example: "camera.my_camera"
      subdirectory:
        description: "The subdirectory under www/gallery/ to write the snapshot to."
        example: "my_subdirectory"
    mode: parallel
    sequence:
      - variables:
          timestamp: "{{ now().strftime('%Y%m%d-%H%M%S') }}"
          filename: "/config/www/gallery/{{ subdirectory }}/{{ camera_entity }}_{{ timestamp }}.jpg"
      - service: camera.snapshot
        target:
          entity_id: "{{ camera_entity }}"
        data:
          filename: "{{ filename }}"
      - service: shell_command.copy_last_snapshot_image
        data:
          subdirectory: "{{ subdirectory }}"
          camera_entity: "{{ camera_entity }}"
  notify_tenant:
    fields:
      message:
        description: "A text message to send via SMS."
        example: "Lorem ipsum dolor sit amet..."
    mode: parallel
    sequence:
      - condition: state
        entity_id: input_boolean.tenant_mode
        state: "on"
      - service: notify.tenant_sms
        data:
          message: "{{ message }}"

automation:
  - alias: "Away Mode"
    description: "Activate away mode when leaving home"
    id: "93bac20d-eeba-48f6-87ef-d6c7f754ddcc"
    initial_state: true
    trigger:
      platform: state
      entity_id: binary_sensor.anybody_home
      to: "off"
    condition:
      - condition: state
        entity_id: binary_sensor.anybody_home
        state: "off"
    action:
      - parallel:
          - service: light.turn_off
            entity_id: all
          - service: script.turn_on
            entity_id: script.entertainment_off
          - service: switch.turn_off
            entity_id: switch.tivoli_audio
          - service: switch.turn_off
            entity_id: switch.bug_zapper
          - service: climate.turn_off
            entity_id: all

  - alias: "Run Morning Routine At Wake Up Time"
    id: "5486f6f9-da52-4cf0-8a23-e54f40a80721"
    # don't reset this after a reload/restart, since we might've disabled this deliberately via the ui
    # initial_state: true
    trigger:
      - platform: time
        at: input_datetime.wake_up_time
    condition:
      - condition: or
        conditions:
          # because baby, every day is a workday :-D
          - condition: state
            entity_id: binary_sensor.workday
            state: "on"
          - condition: state
            entity_id: input_boolean.everyday_routine
            state: "on"
      - condition: or
        conditions:
          - condition: state
            entity_id: light.pieter_bedside
            state: "off"
          - condition: state
            entity_id: light.rouve_bedside
            state: "off"
          - condition: state
            entity_id: light.hallway
            state: "off"
    action:
      - if:
          - condition: state
            entity_id: input_boolean.skip_next_wake_up_time
            state: "on"
        then:
          - service: input_boolean.turn_off
            target:
              entity_id: input_boolean.skip_next_wake_up_time
        else:
          - service: scene.turn_on
            target:
              entity_id: scene.normal_lights
          # it's a bit wild if alarms go off and lights turn on all at the same time – be gentle
          - delay:
              seconds: 10
          # add a condition for only if we are home – but if it's a workday, why wouldn't we?
          # only run the fade-in if all lights are off for a soft awakening
          - if:
              - condition: and
                conditions:
                  - condition: or
                    conditions:
                      - condition: state
                        entity_id:
                          - light.pieter_bedside
                        state: "off"
                      - condition: numeric_state
                        entity_id: light.pieter_bedside
                        attribute: brightness
                        below: 13  # 13/255 ~= 5%
                  - condition: or
                    conditions:
                      - condition: state
                        entity_id:
                          - light.rouve_bedside
                        state: "off"
                      - condition: numeric_state
                        entity_id: light.rouve_bedside
                        attribute: brightness
                        below: 13  # 13/255 ~= 5%
                  - condition: or
                    conditions:
                      - condition: state
                        entity_id:
                          - light.hallway
                        state: "off"
                      - condition: numeric_state
                        entity_id: light.hallway
                        attribute: brightness
                        below: 13  # 13/255 ~= 5%
            then:
              - if:
                  - condition: or
                    conditions:
                      - condition: state
                        entity_id:
                          - light.pieter_bedside
                        state: "off"
                      - condition: numeric_state
                        entity_id: light.pieter_bedside
                        attribute: brightness
                        below: 13  # 13/255 ~= 5%
                then:
                  - service: light.turn_on
                    target:
                      entity_id: light.pieter_bedside
                    data:
                      profile: low_shelly_duo
              - if:
                  - condition: or
                    conditions:
                      - condition: state
                        entity_id:
                          - light.rouve_bedside
                        state: "off"
                      - condition: numeric_state
                        entity_id: light.rouve_bedside
                        attribute: brightness
                        below: 13  # 13/255 ~= 5%
                then:
                  - service: light.turn_on
                    target:
                      entity_id: light.rouve_bedside
                    data:
                      profile: low_shelly_duo
              - if:
                  - condition: state
                    entity_id: input_boolean.baby_sleep_mode
                    state: "off"
                  - condition: or
                    conditions:
                      - condition: state
                        entity_id:
                          - light.hallway
                        state: "off"
                      - condition: numeric_state
                        entity_id: light.hallway
                        attribute: brightness
                        below: 13  # 13/255 ~= 5%
                then:
                  - service: light.turn_on
                    target:
                      entity_id:
                        - light.hallway
                    data:
                      profile: low_tp_link_rgb
              - if:
                  - condition: state
                    entity_id: input_boolean.baby_sleep_mode
                    state: "off"
                  - condition: or
                    conditions:
                      - condition: state
                        entity_id:
                          - light.foyer
                        state: "off"
                      - condition: numeric_state
                        entity_id: light.foyer
                        attribute: brightness
                        below: 13  # 13/255 ~= 5%
                then:
                  - service: light.turn_on
                    target:
                      entity_id:
                        - light.foyer
                    data:
                      profile: low_tp_link_rgb
              - delay:
                  minutes: 1
              # these script calls don't block/wait, so the transitions will start at almost the same time
              # https://www.home-assistant.io/integrations/script/#waiting-for-script-to-complete
              - service: script.turn_on
                target:
                  entity_id: script.fade_light
                data:
                  variables:
                    light: light.pieter_bedside
                    target_brightness_pct: 30
                    transition_duration: 120
              - service: script.turn_on
                target:
                  entity_id: script.fade_light
                data:
                  variables:
                    light: light.rouve_bedside
                    target_brightness_pct: 30
                    transition_duration: 120
              - if:
                  - condition: state
                    entity_id: input_boolean.baby_sleep_mode
                    state: "off"
                then:
                  - service: script.turn_on
                    target:
                      entity_id: script.fade_light
                    data:
                      variables:
                        light: light.hallway
                        target_brightness_pct: 60
                        transition_duration: 120
                  - service: script.turn_on
                    target:
                      entity_id: script.fade_light
                    data:
                      variables:
                        light: light.foyer
                        target_brightness_pct: 60
                        transition_duration: 120
            else:
              - service: light.turn_on
                target:
                  entity_id: light.pieter_bedside
                data:
                  profile: normal_main_bedroom_bedlamps
              - service: light.turn_on
                target:
                  entity_id: light.rouve_bedside
                data:
                  profile: normal_main_bedroom_bedlamps
              - if:
                  - condition: state
                    entity_id: input_boolean.baby_sleep_mode
                    state: "off"
                then:
                  - service: light.turn_on
                    target:
                      entity_id:
                        - light.hallway
                        - light.foyer
                    data:
                      profile: normal_tp_link_rgb
          - condition: template
            value_template: >-
              {% set entity_id = 'climate.main_bedroom_ac' %}
              {% set current_temperature = state_attr(entity_id, 'current_temperature') | float(0) %}
              {% set target_temperature = state_attr(entity_id, 'temperature') | float(0) %}
              {{ is_state(entity_id, 'fan_only') or
                 (is_state(entity_id, 'cool') and current_temperature <= target_temperature) or
                 (is_state(entity_id, 'heat') and current_temperature >= target_temperature) }}
          - service: climate.turn_off
            target:
              entity_id: climate.main_bedroom_ac

  - alias: "Turn Off Morning AC"
    id: "53f73a27-8041-461f-a434-41a06c9fddbe"
    trigger:
      - platform: state
        entity_id: climate.main_bedroom_ac
        from: "off"
        # alternative?
        # not_to: "off"
        # remember that this will not survive a restart
        # either start a timer or set an input_datetime helper
        for:
          minutes: 60
    condition:
      - condition: time
        after: "06:00:00"
        before: "09:00:00"
    action:
      - service: climate.turn_off
        target:
          entity_id: climate.main_bedroom_ac

  - alias: "Turn Off Devices When Bedtime"
    description: "Assuming it's bedtime when the living room lamp is turned off after a certain time"
    id: "7976aaad-a575-442d-ae00-538e5412e92f"
    trigger:
      # todo: we don't know the decoder's state so we could be turning off the tv just because the apple tv isn't playing...
      # todo: make this a separate automation
      # - platform: state
      #   entity_id: media_player.living_room
      #   to: "idle"
      #   for:
      #     minutes: 15
      - platform: state
        entity_id: light.living_room_lamp
        to: "off"
    condition:
      - condition: time
        after: "21:00:00"
        before: "01:00:00"
    action:
      # future condition: if only we could know whether it's on
      - service: script.turn_on
        entity_id: script.entertainment_off
      - service: light.turn_off
        target:
          entity_id:
            # this group includes the foyer light, which could be on as warning light when there's no grid power/loadshedding/on backup power
            - light.living_area_group
            # group?
            - light.kitchen_counter
            - light.scullery_counter
            - light.office
      - service: script.turn_on
        target:
          entity_id: script.fade_light
        data:
          variables:
            light: light.hallway
            target_brightness_pct: 0
            transition_duration: 60
      # todo: make a group for all lights except bedlamps?
      - service: light.turn_off
        target:
          entity_id: light.bedroom_bedlamp
      - service: switch.turn_off
        target:
          entity_id: switch.bug_zapper
      - service: climate.turn_off
        target:
          entity_id: climate.living_room_ac

  - alias: "Switch On The Front Door Light When Arriving Home"
    id: "47e6883e-b9ab-4559-9603-765e80cdfa81"
    trigger:
      # when either of us arrive home, irrespective of whether anybody is home
      - platform: state
        entity_id:
          - binary_sensor.pieter_present
          - binary_sensor.rouve_present
        to: "on"
    mode: single
    condition:
      - condition: or
        conditions:
          - condition: sun
            after: sunset
          - condition: sun
            before: sunrise
      - condition: state
        entity_id: light.front_door
        state: "off"
    action:
      - service: script.turn_on
        target:
          entity_id: script.turn_on_light_and_timer
        data:
          variables:
            light: light.front_door
            duration: "00:03:00"

  - alias: "Remind To Leave A Window Open When Bedtime"
    id: "71f8ebc4-f512-44c1-aea3-b1f5ba0ca26c"
    trigger:
      - platform: state
        entity_id: light.living_room_lamp
        to: "off"
    condition:
      - condition: time
        after: "21:00:00"
        before: "01:00:00"
    action:
      - service: notify.mobile_app_ceres
        data:
          title: "⏰ Routine Reminder"
          message: "Remember to leave a window open for the cats."
          data:
            url: homeassistant://navigate/lovelace/main
            sound:
              name: default
              critical: 1
              volume: 0.01

  - alias: "Open The Gate When Arriving Home"
    id: "7dcb52a0-3ecc-4a6f-9b89-6d80a6720590"
    initial_state: true
    trigger:
      - platform: state
        entity_id: binary_sensor.pieter_present
        to: "on"
        # prevent false positive due to flaky connectivity or after loadshedding and sensors being unavailable
        not_from: "unavailable"
    mode: single
    condition:
      - condition: and
        conditions:
          # prevent a glitch in case the cover was recently closed
          # since there is also an availability template for the cover defined, it will usually also prevent the gate from opening
          # when the location gets updated after the power returns (after loadshedding)
          - condition: state
            entity_id: cover.main_gate
            state: "closed"
            for:
              minutes: 2
          - condition: time
            after: "07:00:00"
            before: "23:00:00"
    action:
      # what if the presence sensor is slow to update, so we trigger motion before we're detected as home?
      # i don't think it's a good idea to have a motion trigger and then choose between the wait below and one for presence
      # rather use a recency check
      - wait_template: >-
          {% set last_motion_detected = (now() - states.binary_sensor.doorbell_motion_detected.last_updated).total_seconds() %}
          {{ is_state('binary_sensor.doorbell_motion_detected', 'on') or
             (is_state('binary_sensor.doorbell_motion_detected', 'off') and last_motion_detected <= 30) }}
        timeout: "00:01:00"
        continue_on_timeout: false
      - wait_template: "{{ is_state('alarm_control_panel.home', 'disarmed') }}"
        timeout: "00:01:00"
        continue_on_timeout: false
      # it was closed, but check that it still is, otherwise we might toggle it
      - condition: state
        entity_id: cover.main_gate
        state: "closed"
      - if:
          - condition: state
            entity_id: binary_sensor.pieter_driving
            state: "on"
        then:
          - service: cover.open_cover
            entity_id: cover.main_gate
        else:
          - service: script.turn_on
            entity_id: script.open_pedestrian_gap

  # open garage door when arriving home:
  # when moving above a certain (last) speed (so i'm driving, not cycling or otherwise, or getting transported in some other way)
  #   - the above now done with an ios activity sensor
  # and connected to my car's bluetooth (thus, open my garage door only for my car)
  #   - because ios prompts you to run the automation to set the input boolean, it's not useful; installing ultrasonic sensors to track which door to open
  #   - check for one or both to open (edge case)
  # and rouve/someone is home (proxy for the alarm being off)
  # https://www.home-assistant.io/integrations/proximity/
  # https://www.home-assistant.io/docs/configuration/templating/ (distance function)
  # https://companion.home-assistant.io/docs/core/sensors/
  - alias: "Open Garage Door When Arriving"
    id: "0da9adc5-24df-4669-8160-bbc6782dc283"
    initial_state: true
    trigger:
      - platform: state
        entity_id: binary_sensor.pieter_present
        to: "on"
        # prevent false positive due to flaky connectivity or after loadshedding and sensors being unavailable
        not_from: "unavailable"
    condition:
      - condition: and
        conditions:
          # prevent a glitch in case the cover was recently closed
          - condition: state
            entity_id: cover.garage_doors_rhs
            state: "closed"
            for:
              minutes: 5
          - condition: time
            after: "07:00:00"
            before: "23:00:00"
          # i must be arriving by car
          - condition: state
            entity_id: binary_sensor.pieter_driving
            state: "on"
          # my cover for my car
          # what if i'm arriving by bicycle? might be useful too, but without a view of the garage it could be problematic
          - condition: state
            entity_id: binary_sensor.garage_doors_rhs_occupied
            state: "off"
          # replaced by the wait_for_triggers below
          # proxy for the alarm being off
          # - condition: or
          #   conditions:
          #     - condition: state
          #       entity_id: binary_sensor.rouve_present
          #       state: "on"
          #       for:
          #         minutes: 5
          #     - condition: state
          #       entity_id: input_boolean.contractor_mode
          #       state: "on"
          #     - condition: state
          #       entity_id: alarm_control_panel.home
          #       state: "disarmed"
          # if guest mode is on, someone could be parked in or in front of the garage
          - condition: state
            entity_id: input_boolean.guest_mode
            state: "off"
          # replaced by the wait template below
          # - condition: state
          #   entity_id: alarm_control_panel.home
          #   state: "disarmed"
    action:
      - wait_template: >-
          {% set last_motion_detected = (now() - states.binary_sensor.doorbell_motion_detected.last_updated).total_seconds() %}
          {{ is_state('binary_sensor.doorbell_motion_detected', 'on') or
             (is_state('binary_sensor.doorbell_motion_detected', 'off') and last_motion_detected <= 60) }}
        timeout: "00:01:00"
        continue_on_timeout: false
      - wait_template: "{{ is_state('alarm_control_panel.home', 'disarmed') }}"
        timeout: "00:01:00"
        continue_on_timeout: false
      # it was closed, but check that it still is, otherwise we might toggle it and close it instead
      - condition: state
        entity_id: cover.garage_doors_rhs
        state: "closed"
      - service: cover.open_cover
        entity_id: cover.garage_doors_rhs

  - alias: "Contractor Mode Enabled Alert"
    id: "86443a8d-cc5d-4017-a7f8-190e9eccc8cc"
    trigger:
      - platform: state
        entity_id: input_boolean.contractor_mode
        to: "on"
    mode: queued
    action:
      - service: notify.mobile_app_ceres
        data:
          title: "👷 Special Mode"
          message: "Contractor mode enabled."
          data:
            actions:
              - action: "DISABLE_CONTRACTOR_MODE"
                title: "Disable"
            # use threads but don't replace: we want to see whenever the state changed
            group: "contractor-mode"
            url: homeassistant://navigate/lovelace/main

  - alias: "Contractor Mode Disabled Alert"
    id: "123e8e79-6f0e-48f5-a400-951922bf9b80"
    trigger:
      - platform: state
        entity_id: input_boolean.contractor_mode
        to: "off"
    mode: queued
    action:
      - service: notify.mobile_app_ceres
        data:
          title: "👷 Special Mode"
          message: "Contractor mode disabled."
          data:
            actions:
              - action: "ENABLE_CONTRACTOR_MODE"
                title: "Enable"
            group: "contractor-mode"
            url: homeassistant://navigate/lovelace/main

  - alias: "Enable Contractor Mode"
    id: "47fc96f9-bf33-4f9e-97ed-8aaea4da1a12"
    initial_state: true
    trigger:
      - platform: state
        entity_id: calendar.housekeeping
        to: "on"
      - platform: homeassistant
        event: start
    condition:
      - condition: state
        entity_id: calendar.housekeeping
        state: "on"
      - condition: state
        entity_id: input_boolean.contractor_mode
        state: "off"
    action:
      - service: input_boolean.turn_on
        entity_id: input_boolean.contractor_mode
      # cleaning day lights
      - service: light.turn_on
        target:
          entity_id:
            - light.hallway
        data:
          profile: bright_tp_link_rgb
      - service: light.turn_on
        target:
          entity_id:
            - light.music_room
            - light.dining_room
            - light.office
        data:
          profile: bright_shelly_duo
      # only turn it on if it's not already on; it could be on already as the warning light due to load shedding
      - condition: state
        entity_id: light.foyer
        state: "off"
      - service: light.turn_on
        target:
          entity_id: light.foyer
        data:
          profile: bright_tp_link_rgb

  - alias: "Revert Cleaning Day Lights"
    id: "9b73e13c-449e-4b9c-82c3-2652156cd7e5"
    trigger:
      - platform: state
        entity_id: calendar.housekeeping
        to: "off"
        not_from: "unavailable"
    # not strictly necessary, but just make doubly sure it won't trigger at odd times
    # the bug we're fixing with not_from above was that the calendar went unavailable
    # late at night and when it became available, it turned on a bunch of lights
    condition:
      - condition: time
        after: "06:00:00"
        before: "18:00:00"
    action:
      - service: light.turn_off
        entity_id:
          - light.music_room
          - light.dining_room
          - light.office
      - service: light.turn_on
        entity_id: light.hallway
        data:
          profile: normal_tp_link_rgb
      # don't turn it off while being load shed, because this is the warning light and will be red
      - condition: state
        entity_id: binary_sensor.grid_feed
        state: "on"
      - service: light.turn_off
        entity_id: light.foyer

  - alias: "Disable Contractor Mode"
    id: "f63a3c52-fac8-4fc7-a000-0f41b2ee5e8d"
    initial_state: true
    trigger:
      - platform: time
        at: "16:00:00"
      - platform: homeassistant
        event: start
    condition:
      - condition: state
        entity_id: input_boolean.contractor_mode
        state: "on"
      - condition: time
        after: "16:00:00"
    action:
      - service: input_boolean.turn_off
        entity_id: input_boolean.contractor_mode

  - alias: "Contractor Mode Still Enabled Alert"
    id: "f64b90bf-9234-42d1-a3b7-b34443fd3ea6"
    initial_state: true
    trigger:
      - platform: time_pattern
        hours: "/1"
    condition:
      - condition: and
        conditions:
          - condition: state
            entity_id: input_boolean.contractor_mode
            state: "on"
          - condition: time
            after: "17:00:00"
            before: "21:00:00"
    action:
      - service: notify.mobile_app_ceres
        data:
          title: "👷 Special Mode"
          message: "Contractor mode is still enabled."
          data:
            actions:
              - action: "DISABLE_CONTRACTOR_MODE"
                title: "Disable"
            group: "contractor-mode"
            url: homeassistant://navigate/lovelace/main

  - alias: "Disable Contractor Mode From Alert Action"
    id: "496603d1-c6b1-46c0-9048-8601edd627d4"
    trigger:
      - platform: event
        event_type: mobile_app_notification_action
        event_data:
          action: DISABLE_CONTRACTOR_MODE
    action:
      - service: input_boolean.turn_off
        entity_id: input_boolean.contractor_mode

  - alias: "Enable Contractor Mode From Alert Action"
    id: "84c0360f-3154-4705-904e-ca50ffedce47"
    trigger:
      - platform: event
        event_type: mobile_app_notification_action
        event_data:
          action: ENABLE_CONTRACTOR_MODE
    action:
      - service: input_boolean.turn_on
        entity_id: input_boolean.contractor_mode

  - alias: "Disable Guest Mode When Getting Home"
    id: "a113f957-602f-44ca-b1a4-559bafab4835"
    initial_state: true
    trigger:
      # don't trigger on binary_sensor.anybody_home, because, should we be away when turning this on,
      # it will immediately be turned off, as guest mode will turn the binary sensor on
      # ideally, guest mode should be turned on while home, but reality doesn't always play out like that
      - platform: state
        entity_id: binary_sensor.family_present
        to: "on"
    condition:
      - condition: state
        entity_id: input_boolean.guest_mode
        state: "on"
    action:
      - service: input_boolean.turn_off
        entity_id: input_boolean.guest_mode

  - alias: "Guest Mode Enabled Alert"
    id: "6f1be18f-6a43-4512-b537-0bd8aa1581d2"
    trigger:
      - platform: state
        entity_id: input_boolean.guest_mode
        to: "on"
    mode: queued
    action:
      - service: notify.mobile_app_ceres
        data:
          title: "🧳 Special Mode"
          message: "Guest mode enabled."
          data:
            actions:
              - action: "DISABLE_GUEST_MODE"
                title: "Disable"
            group: "guest-mode"
            url: homeassistant://navigate/lovelace/main

  - alias: "Guest Mode Disabled Alert"
    id: "f0aff94c-3b99-4917-b399-6f709cdbf80b"
    trigger:
      - platform: state
        entity_id: input_boolean.guest_mode
        to: "off"
    mode: queued
    action:
      - service: notify.mobile_app_ceres
        data:
          title: "🧳 Special Mode"
          message: "Guest mode disabled."
          data:
            actions:
              - action: "ENABLE_GUEST_MODE"
                title: "Enable"
            group: "guest-mode"
            url: homeassistant://navigate/lovelace/main

  - alias: "Enable Guest Mode From Alert Action"
    id: "cfeb5963-4854-439b-952e-f1ac37fd125d"
    initial_state: true
    trigger:
      - platform: event
        event_type: mobile_app_notification_action
        event_data:
          action: ENABLE_GUEST_MODE
    action:
      - service: input_boolean.turn_on
        entity_id: input_boolean.guest_mode

  - alias: "Disable Guest Mode From Alert Action"
    id: "0ad8eed7-dbd3-412f-b1d8-99f3ee74368c"
    initial_state: true
    trigger:
      - platform: event
        event_type: mobile_app_notification_action
        event_data:
          action: DISABLE_GUEST_MODE
    action:
      - service: input_boolean.turn_off
        entity_id: input_boolean.guest_mode

  - alias: "Set Vacation"
    id: "a5e5cc6f-f66b-458e-9b63-0a60ef5be6a9"
    trigger:
      - platform: state
        entity_id: calendar.vacation
        to: "on"
      # add hourly trigger too in case changes are made to the event
      # (e.g. i forgot to add an event to the calendar on the night before)
      # this will override any manual changes made by setting the input datetimes directly
      - platform: time_pattern
        hours: "/1"
      - platform: homeassistant
        event: start
    action:
      - service: input_datetime.set_datetime
        entity_id: input_datetime.vacation_start
        data:
          datetime: "{{ ((state_attr('calendar.vacation', 'start_time') or states('input_datetime.vacation_start')) | as_datetime).date() }}"
      - service: input_datetime.set_datetime
        entity_id: input_datetime.vacation_end
        data:
          # all-day events are set by google to until midnight of the next day
          # also the timedelta will fail if it's None, so cater for that
          datetime: "{{ ((state_attr('calendar.vacation', 'end_time') | as_datetime - timedelta(seconds=1) if state_attr('calendar.vacation', 'end_time') else None) or (states('input_datetime.vacation_end') | as_datetime)).date() }}"

  - alias: "Alert Vacation Start"
    id: "f1be4ad3-042c-4cbd-bb91-99da7bdc5dab"
    initial_state: true
    trigger:
      platform: time
      at: "21:00:00"
    condition: "{{ (states('input_datetime.vacation_start') | as_datetime - timedelta(days=1)).date() == now().date() }}"
    action:
      - service: notify.mobile_app_ceres
        data:
          title: "⏰ Routine Change"
          message: "Wake-up lights will be suspended from tomorrow until {{ states('input_datetime.vacation_end') }}."
          data:
            group: "routine-change"
            url: homeassistant://navigate/lovelace/main

  - alias: "Alert Vacation End"
    id: "e1ce2573-356f-467d-93e4-c7bcb541db9a"
    initial_state: true
    trigger:
      platform: time
      at: "21:00:00"
    condition:
      - condition: state
        entity_id: input_boolean.everyday_routine
        state: "off"
      # google calendar all-day events go up to midnight of the next day – but this is already catered for when we set the helpers
      # old: condition: "{{ (states('input_datetime.vacation_end') | as_datetime).date() == now().date() }}"
      # new: if today is not a work day but tomorrow is (and today isn't weekend, unless it's part of the vacation)
      # but do we want this every sunday night to trigger? what if sunday is the end of the vacation?
      - condition: template
        value_template: >-
          {{
            is_state('binary_sensor.workday', 'off') and
            is_state('binary_sensor.workday_tomorrow', 'on') and
              (
                now().strftime('%a') != 'Sun' or
                (states('input_datetime.vacation_end') | as_datetime).date() == now().date()
              )
          }}
    action:
      - service: notify.mobile_app_ceres
        data:
          title: "⏰ Routine Change"
          message: "Wake-up lights will be resumed from tomorrow at {{ states('input_datetime.wake_up_time')[:5] }}."
          data:
            group: "routine-change"
            url: homeassistant://navigate/lovelace/main

  # https://developers.google.com/maps/documentation/routes/reference/rest/v2/TopLevel/computeRoutes#request-body
  #
  # curl -X POST -d '{
  #  "origin":{
  #    "address": "Stellenbosch, South Africa"
  #  },
  #  "destination":{
  #    "address": "Cape Town, South Africa"
  #  },
  #  "travelMode": "DRIVE",
  #  "languageCode": "en-US",
  #  "units": "METRIC"
  # }' \
  # -H 'Content-Type: application/json' -H 'X-Goog-Api-Key: <API_KEY>' \
  # -H 'X-Goog-FieldMask: routes.duration,routes.distanceMeters,routes.polyline.encodedPolyline' \
  # 'https://routes.googleapis.com/directions/v2:computeRoutes'
  - alias: "Notify Pieter Going Home from Work in Cape Town"
    id: "5515c06c-6c69-443d-9549-eb00999e8b95"
    trigger:
      platform: zone
      entity_id: person.pieter_rautenbach
      zone: zone.pieter_work_cape_town
      event: leave
    # this could potentially be improved by checking whether we are both together
    # in which case sending a notification won't make sense
    # seems unlikely though...
    condition:
      - condition: and
        conditions:
          - condition: time
            after: "16:00:00"
            weekday:
              - mon
              - tue
              - wed
              - thu
              - fri
          - condition: numeric_state
            entity_id: sensor.duration_pieter_work_cape_town
            above: 1
    action:
      - service: script.turn_on
        entity_id: script.send_pieter_work_cape_town_to_home_eta

  - alias: "Notify When Motion Detected In The Nursery"
    id: "c85b1a55-74fe-4576-8ef4-346d1c94c31e"
    initial_state: true
    trigger:
      - platform: state
        entity_id: binary_sensor.baby_monitor_motion_alarm
        to: "on"
    condition:
      - condition: state
        entity_id: input_boolean.baby_sleep_mode
        state: "on"
        for:
          minutes: 5
      # keep in sync with bedlamp on/off automation
      - condition: or
        conditions:
          - condition: time
            after: "12:15:00"
            before: "15:00:00"
          - condition: time
            after: "18:50:00"
            before: "22:30:00"
          - condition: time
            after: "05:45:00"
            before: "08:00:00"
      - condition: state
        entity_id: sensor.ceres_battery_state
        state: 'Not Charging'  # Can be to Charging or Full
    mode: single
    action:
      # only during night => critical?
      # example to split: "Alert If Garages Opened Or Closed When Not Supposed To"
      # todo: family (check who's home?)
      # blocking call
      - service: script.take_snapshot
        data:
          camera_entity: camera.baby_monitor_profile000
          subdirectory: "baby_monitor"
      - service: notify.mobile_app_ceres
        data:
          title: "👶 Nursery"
          message: "Motion detected!"
          data:
            group: "nursery"
            url: homeassistant://navigate/lovelace/baby
            # https://companion.home-assistant.io/docs/notifications/dynamic-content
            # just using a thumbnail instead
            # entity_id: camera.baby_monitor_profile000
            actions:
              - action: "SLEEP_OFF"
                title: "Sleep off"
            sound:
              # apple watch doesn't support custom sounds:
              # https://community.home-assistant.io/t/custom-notification-sounds-on-not-playing-on-apple-watch/540387
              # it may also not be used on iphone when it's locked:
              # https://stackoverflow.com/questions/72671060/ios-custom-notification-sound-unnotificationsound-doesnt-play-when-iphone-is
              name: "go_to_sleep_alert.caf"
              critical: 1
              volume: 0.3
            # https://companion.home-assistant.io/docs/notifications/notification-attachments#configuration
            attachment:
              url: !secret baby_monitor_last_snapshot_url
              hide-thumbnail: false
              lazy: false

  - alias: "Update Sleep Mode Based On Bed Occupancy"
    id: "106574a8-11b2-4679-aff1-f5b25b8e0b74"
    initial_state: true
    trigger:
      - platform: state
        entity_id: binary_sensor.bed_occupancy_bed_occupied
        to: "on"
        for:
          seconds: 10
      - platform: state
        entity_id: binary_sensor.bed_occupancy_bed_occupied
        to: "off"
        for:
          seconds: 10
    action:
      - service: "input_boolean.turn_{{ trigger.to_state.state }}"
        target:
          entity_id: input_boolean.baby_sleep_mode

  - alias: "Force To Night Light If Bedlamp Turned On During Bedtime"
    id: "712eabae-eb11-4b0e-95c0-ffa645113ac7"
    initial_state: true
    trigger:
      - platform: state
        entity_id: light.bedroom_bedlamp
        to: "on"
    mode: single
    condition:
      - condition: state
        entity_id: input_boolean.baby_sleep_mode
        state: "on"
      - condition: or
        conditions:
          - condition: time
            after: "12:15:00"
            before: "13:30:00"
          - condition: time
            after: "18:50:00"
            before: "05:15:00"
    actions:
      - service: script.turn_on
        target:
          entity_id: script.turn_on_light
        data:
          variables:
            light: light.bedroom_bedlamp
            profile: night_bedlamp
      - service: timer.start
        target:
          entity_id: timer.bedroom_bedlamp_timer
        data:
          duration: "00:00:30"

  - alias: "Offer To Toggle Sleep Mode"
    id: "9cfa00dd-077d-48b2-842b-3cd7fb2d0133"
    trigger:
      - platform: state
        entity_id: light.bedroom_bedlamp
        to:
          - "on"
          - "off"
        for:
          minutes: 1
    condition:
      # keep in sync with nursery motion detection automation
      - condition: or
        conditions:
          # ask to turn off
          - condition: time
            after: "12:15:00"
            before: "13:15:00"
          # ask to turn on
          - condition: time
            after: "13:30:00"
            before: "15:00:00"
          # ask to turn off
          - condition: time
            after: "18:50:00"
            before: "22:30:00"
          # ask to turn on
          - condition: time
            after: "05:30:00"
            before: "08:00:00"
    actions:
        # cannot template this, because the actions section's action and title isn't templateable
        # - variables:
        #     wanted_state: "{{ '' if states() and states() else '' }}"
        #
        # truth table:
        #
        # lamp | mode | e/d
        # -----------------
        # off  | off  | e
        # off  | on   | -
        # on   | off  | -
        # on   | on   | d
        - choose:
            - conditions:
                - condition: state
                  entity_id: light.bedroom_bedlamp
                  state: "off"
                - condition: state
                  entity_id: input_boolean.baby_sleep_mode
                  state: "off"
                - condition: or
                  conditions:
                    - condition: time
                      after: "12:15:00"
                      before: "13:15:00"
                    - condition: time
                      after: "18:50:00"
                      before: "22:30:00"
              sequence:
                - service: notify.mobile_app_ceres
                  data:
                    title: "🛌 Sleep Mode"
                    message: >-
                      Would you like to enable sleep mode?
                    data:
                      actions:
                        - action: "SLEEP_ON"
                          title: "Enable"
                      # action_data:
                      #   wanted_state: "foo"
                      group: "routine-bedtime"
                      url: homeassistant://navigate/lovelace/baby
                      push:
                        sound:
                          name: default
                          critical: 1
                          volume: 0.1
            - conditions:
                - condition: state
                  entity_id: light.bedroom_bedlamp
                  state: "on"
                - condition: state
                  entity_id: input_boolean.baby_sleep_mode
                  state: "on"
                - condition: or
                  conditions:
                    - condition: time
                      after: "13:30:00"
                      before: "15:00:00"
                    - condition: time
                      after: "05:30:00"
                      before: "08:00:00"
              sequence:
                - service: notify.mobile_app_ceres
                  data:
                    title: "🛌 Sleep Mode"
                    message: >-
                      Would you like to disable sleep mode?
                    data:
                      actions:
                        - action: "SLEEP_OFF"
                          title: "Disable"
                      group: "routine-bedtime"
                      url: homeassistant://navigate/lovelace/baby
                      push:
                        sound:
                          name: default
                          critical: 1
                          volume: 0.1

  - alias: "Handle Sleep Mode From Alert Action"
    id: "7a1711ca-b9c7-4e2b-b5ba-1dce04aca077"
    initial_state: true
    trigger:
      - platform: event
        event_type: mobile_app_notification_action
        event_data:
          action: SLEEP_OFF
        id: "off"
      - platform: event
        event_type: mobile_app_notification_action
        event_data:
          action: SLEEP_ON
        id: "on"
    action:
      - service: "input_boolean.turn_{{ trigger.id }}"
        target:
          entity_id: input_boolean.baby_sleep_mode
      - if:
          - "{{ trigger.id == 'off' and is_state('timer.bedroom_bedlamp_timer', 'active') }}"
        then:
          - service: timer.cancel
            target:
              entity_id: timer.bedroom_bedlamp_timer
      - service: light.turn_on
        target:
          entity_id: light.bedroom_bedlamp
        data:
          profile: normal_bedlamp

  - alias: "Turn On Bedlamp When Sleep Mode Disabled"
    id: "fb5d83c6-5e79-456b-a525-a75942d0165b"
    initial_state: true
    trigger:
      - platform: state
        entity_id: input_boolean.baby_sleep_mode
        to: "off"
    conditions:
      - condition: state
        entity_id: timer.bedroom_bedlamp_timer
        state: "active"
    action:
      - service: timer.cancel
        target:
          entity_id: timer.bedroom_bedlamp_timer
      - service: light.turn_on
        target:
          entity_id: light.bedroom_bedlamp
        data:
          profile: normal_bedlamp

  - alias: "Update Baby Sleep Session Counter"
    id: "3d9714c9-dc53-4114-8df8-49a6efc98cc6"
    initial_state: true
    trigger:
      - platform: time_pattern
        seconds: "/15"
    mode: single
    action:
      - service: input_number.set_value
        target:
          entity_id: input_number.baby_current_sleep_session
        data:
          value: >-
            {% if is_state('input_boolean.baby_sleep_mode', 'on') %}
              {{ states('input_number.baby_current_sleep_session') | int(0) + 15 }}
            {% else %}
              0
            {% endif %}

  - alias: "Turn On Bug Zapper"
    id: "dad30264-ab99-41df-83ee-a9ff0e768146"
    initial_state: true
    trigger:
      - platform: sun
        event: sunset
        offset: "-01:00:00"
      - platform: time
        at: "18:00:00"
      - platform: state
        entity_id: binary_sensor.anybody_home
        to: "on"
    condition:
      # https://community.home-assistant.io/t/time-condition-inclusive-or-exclusive/205909/26
      - condition: template
        value_template: >-
          {% set sunset_with_offset = state_attr('sun.sun', 'next_setting') | as_datetime - timedelta(hours=1) %}
          {% set lower_bound = min(today_at('18:00'), sunset_with_offset) %}
          {% set within_window = lower_bound <= now() <= today_at('20:00') %}
          {{ within_window }}
      - condition: template
        value_template: >-
          {# from sep until apr #}
          {{ now().month >=9 or now().month <= 4 }}
      - condition: state
        entity_id: binary_sensor.anybody_home
        state: "on"
      - condition: state
        entity_id: input_boolean.baby_sleep_mode
        state: "off"
      - condition: template
        value_template: >-
          {{ 'rain' not in states('weather.openweathermap') and
             'pouring' not in states('weather.openweathermap') }}
    action:
      - service: weather.get_forecasts
        target:
          entity_id: weather.openweathermap
        data:
          type: hourly
        response_variable: hourly
      # basically no rain atm
      # - condition: "{{ hourly.forecast[0]['precipitation'] | float(0) < 1 }}"
      # or (but remove the service call above then)
      # - condition: "{{ states('sensor.openweathermap_rain') | float(0) < 1 }}"
      # basically no rain in the next 5 hours
      # true if at least one forecast value has a precipitation value of greater or equal to 1 mm
      - condition: "{{ hourly['weather.openweathermap']['forecast'][0:5] | map(attribute='precipitation') | select('ge', 1) | list | length == 0 }}"
      - service: switch.turn_on
        target:
          entity_id: switch.bug_zapper

  - alias: "Switch Off Bug Zapper When We Go To Bed"
    id: "c54d5d40-a900-4013-98f5-e968be87a0b6"
    initial_state: true
    trigger:
      - platform: state
        entity_id: input_boolean.baby_sleep_mode
        to: "on"
      - platform: time
        at: "19:00:00"
      - platform: state
        entity_id:
          - light.bedroom_bedlamp
          - light.living_room_lamp
          - light.rouve_bedside
          - light.pieter_bedside
        to: "off"
    action:
      - service: switch.turn_off
        target:
          entity_id: switch.bug_zapper

  # doesn't seem my acs support this, sadly
  # - alias: "Notify On AC Filter Maintenance"
  #   id: "f049e41d-33ab-4ac9-82aa-a76c136c2490"
  #   initial_state: true
  #   trigger:
  #     - platform: state
  #       entity_id:
  #         - binary_sensor.living_room_ac_filter_alert
  #         - binary_sensor.main_bedroom_ac_filter_alert
  #       to: "on"
  #   action:
  #     - service: notify.mobile_app_ceres
  #       data:
  #         title: "🚧 Maintenance"
  #         message: >-
  #           {# example: Living Room AC Filter alert -> living room AC #}
  #           {% set name = state_attr(trigger.entity_id, 'friendly_name') | lower | replace('alert', '') | replace('filter', '') | replace('ac', 'AC') | trim %}
  #           Please check the filter in the {{ name }}.
  #         data:
  #           group: "maintenance"
  #           url: homeassistant://navigate/lovelace/main

  - alias: "Turn Off AC Display"
    id: "75417e23-4953-49e4-ae38-2e6833081120"
    initial_state: true
    trigger:
      - platform: state
        entity_id:
          - climate.main_bedroom_ac
        # trigger only on state changes
        to: null
        # attribute: preset_mode
        # to: "sleep"
      - platform: state
        entity_id: light.main_bedroom_group
        to: "off"
    condition:
      - condition: time
        after: "19:00:00"
        before: "06:00:00"
    action:
      # in case the ac was just turned on, some entities become available, so make sure they are before acting on them
      - wait_template: "{{ not is_state('climate.main_bedroom_ac', 'off') }}"
        timeout: "00:00:15"
        continue_on_timeout: false
      - service: switch.turn_off
        target:
          entity_id: switch.main_bedroom_ac_display

  # note (future): inside temperature lags the outside temperature by about 3 hours
  # https://docs.google.com/spreadsheets/d/1zaK87B1vGeipQYksiZTYTegJnJr0vQACHGWG4fAj0WE/edit?gid=1528212005#gid=1528212005
  - alias: "Turn On Living Room AC"
    id: "7c561ce0-7a57-4857-9516-ef638ce37293"
    initial_state: true
    trigger:
      - platform: state
        entity_id:
          - binary_sensor.pieter_present
          # - binary_sensor.rouve_present
        to: "on"
        id: "presence"
      - platform: state
        entity_id: alarm_control_panel.home
        from: "armed_away"
        to: "disarmed"
        id: "presence"
      - platform: numeric_state
        entity_id: sensor.office_temperature
        # same as matching condition below
        above: 24.4
        id: "rising_temp"
      - platform: template
        # same as matching condition below
        value_template: >-
          {% set outside_temp = states('sensor.outside_temperature_filtered') | float(0) %}
          {% set inside_temp = states('sensor.office_temperature') | float(0) %}
          {{ outside_temp > inside_temp + 1 }}
        id: "rising_temp"
      - platform: numeric_state
        entity_id: sensor.office_temperature
        # same as matching condition below
        below: 16.1
        id: "falling_temp"
      - platform: template
        # same as matching condition below
        value_template: >-
          {% set outside_temp = states('sensor.outside_temperature_filtered') | float(0) %}
          {% set inside_temp = states('sensor.office_temperature') | float(0) %}
          {{ outside_temp < inside_temp - 3 }}
        id: "falling_temp"
      # outside simmer trigger? perhaps not, since we really care what it feels like inside.
      - platform: state
        entity_id: sensor.thermal_comfort_inside_summer_simmer_perception
        # same as matching condition below
        to:
          # cool
          - cool
          - cold
          # warm
          - slightly_warm
          - increasing_discomfort
          - extremely_warm
          - danger_of_heatstroke
        for:
          minutes: 5
        id: "temp_perception"
      # check at regular intervals? why would we need to, if our triggers are otherwise correct?
      - platform: time
        at: "09:00:00"
        id: "time_based"
    condition:
      - condition: state
        entity_id: input_boolean.disable_auto_on_ac
        state: "off"
      - condition: state
        entity_id: input_boolean.ac_maintenance_mode
        state: "off"
      - condition: state
        entity_id: climate.living_room_ac
        state:
          - "off"
      - condition: state
        entity_id: alarm_control_panel.home
        state: "disarmed"
      - condition: or
        conditions:
          - condition: state
            entity_id: binary_sensor.pieter_present
            state: "on"
          # - condition: state
          #   entity_id: binary_sensor.rouve_present
          #   state: "on"
          #   enabled: false
      - condition: or
        conditions:
          # for cooling
          - condition: and
            conditions:
              - condition: numeric_state
                entity_id: sensor.office_temperature
                # same as matching trigger above
                above: 24.4
              - condition: state
                entity_id: sensor.thermal_comfort_inside_summer_simmer_perception
                # same as matching trigger above
                state:
                  - slightly_warm
                  - increasing_discomfort
                  - extremely_warm
                  - danger_of_heatstroke
              - condition: not
                conditions:
                  - condition: state
                    entity_id: sensor.thermal_comfort_outside_summer_simmer_perception
                    state:
                      - slightly_cool
                      - comfortable
              # - condition: numeric_state
              #   entity_id: sensor.outside_temperature_change
              #   above: 0.9
              - condition: template
                # same as matching trigger above
                value_template: >-
                  {% set outside_temp = states('sensor.outside_temperature_filtered') | float(0) %}
                  {% set inside_temp = states('sensor.office_temperature') | float(0) %}
                  {{ outside_temp >= inside_temp + 1 }}
          # for heating
          - condition: and
            conditions:
              - condition: numeric_state
                entity_id: sensor.office_temperature
                # same as matching trigger above
                below: 16.1
              - condition: state
                entity_id: sensor.thermal_comfort_inside_summer_simmer_perception
                # same as matching trigger above
                state:
                  - cool
                  - cold
              - condition: not
                conditions:
                  - condition: state
                    entity_id: sensor.thermal_comfort_outside_summer_simmer_perception
                    state:
                      - comfortable
                      - slightly_warm
              # - condition: numeric_state
              #   entity_id: sensor.outside_temperature_change
              #   below: -0.9
              # - condition: template
              #   # same as matching trigger above
              #   value_template: >-
              #     {% set outside_temp = states('sensor.outside_temperature') | float(0) %}
              #     {% set inside_temp = states('sensor.office_temperature') | float(0) %}
              #     {{ outside_temp <= inside_temp - 3 }}
      # check forecast min/max temp?
      # get_forecasts['weather.openweathermap']['forecast'][0]['temperature']
      - condition: or
        conditions:
          - condition: and
            conditions:
              - condition: time
                after: "09:00:00"
                before: "17:00:00"
              - condition: state
                entity_id: binary_sensor.workday
                state: "on"
          - condition: and
            conditions:
              - condition: time
                after: "10:00:00"
                before: "17:00:00"
              - condition: state
                entity_id: binary_sensor.workday
                state: "off"
      # be less conservative power-wise: don't check the battery variance.
      # just check that there's no scheduled loadshedding and that the grid is connected.
      # use binary_sensor.loadshedding_scheduled instead, but we don't really need this,
      # since ACs will be turned off when the grid drops
      # - condition: state
      #   entity_id: sensor.loadshedding_stage
      #   state: "No loadshedding"
      - condition: state
        entity_id: binary_sensor.grid_feed
        state: "on"
      # - condition: numeric_state
      #   entity_id: sensor.battery_charge_variance
      #   above: 15
    action:
      - service: climate.turn_on
        target:
          entity_id: climate.living_room_ac
      - wait_template: "{{ not is_state('climate.living_room_ac', 'off') }}"
        timeout: "00:00:15"
        continue_on_timeout: false
      - choose:
          - conditions:
              - condition: or
                conditions:
                  - condition: numeric_state
                    entity_id: sensor.office_temperature
                    # same as matching trigger/condition above
                    below: 16.1
                  - condition: state
                    entity_id: sensor.thermal_comfort_inside_summer_simmer_perception
                    # same as matching trigger/condition above
                    state:
                      - cold
            sequence:
             # https://github.com/mill1000/midea-ac-py/issues/284
              - service: climate.set_temperature
                target:
                  entity_id: climate.living_room_ac
                data:
                  temperature: 20
              - service: climate.set_hvac_mode
                target:
                  entity_id: climate.living_room_ac
                data:
                  hvac_mode: "heat"
        default:
          - service: climate.set_temperature
            target:
              entity_id: climate.living_room_ac
            data:
              temperature: 25
          - service: climate.set_hvac_mode
            target:
              entity_id: climate.living_room_ac
            data:
              hvac_mode: "cool"
      - service: climate.set_fan_mode
        target:
          entity_id: climate.living_room_ac
        data:
          fan_mode: "medium"
      - service: climate.set_swing_mode
        target:
          entity_id: climate.living_room_ac
        data:
          swing_mode: "both"
      - service: notify.mobile_app_ceres
        data:
          title: "🌡️ Climate Control"
          message: >-
            {% set mode = states('climate.living_room_ac') ~ 'ing' %}
            {% set outside_temp = states('sensor.outside_temperature_filtered', with_unit=True) %}
            {% set outside_perception = state_translated('sensor.thermal_comfort_outside_summer_simmer_perception') | lower %}
            {% set inside_temp = states('sensor.office_temperature', with_unit=True) %}
            {% set inside_perception = state_translated('sensor.thermal_comfort_inside_summer_simmer_perception') | lower %}
            {% if trigger.id == "presence" %}
              {% set reason = "you arrived home" %}
            {% else %}
              {% set reason = trigger.id | replace("_", " ") | replace("temp", "temperature") | replace("based", "-based")%}
            {% endif %}
            The living room's AC is {{ mode }} ({{ reason }}).


            Please close all doors and windows.


            It's {{ inside_temp }} inside ({{ inside_perception }}) and {{ outside_temp }} outside ({{ outside_perception }}).
          data:
            url: homeassistant://navigate/lovelace/environment
            group: "home-climate"
            push:
              sound:
                name: default
                critical: 1
                volume: 0.3
            actions:
              - action: "TURN_OFF_AC"
                title: "Turn off"
              - action: "TURN_OFF_AC_AND_DISABLE"
                title: "Turn off and disable"
                destructive: true
            action_data:
              entity_id: "climate.living_room_ac"

  - alias: "Turn Off Living Room AC"
    id: "ce0f5e96-3b69-466c-9e47-b9e0f3f292dc"
    initial_state: true
    trigger:
      - platform: numeric_state
        entity_id: sensor.outside_temperature
        # same as matching condition below
        below: 24.1
      - platform: numeric_state
        entity_id: sensor.outside_temperature
        # same as matching condition below
        above: 17.9
      - platform: state
        # we use the OUTSIDE sensor here, since the house will tend to this, but delayed due to thermal mass
        entity_id: sensor.thermal_comfort_outside_summer_simmer_perception
        # same as matching condition below
        to:
          - comfortable
        for:
          minutes: 5
      - platform: time
        at: "17:30:00"
      # sensor.living_room_ac_power < x for 30 min? => it's basically been running the fan only
      # unless temp diff more than 10 degrees
    condition:
      - condition: time
        after: "09:30:00"
        before: "17:31:00"
      - condition: state
        entity_id: input_boolean.ac_maintenance_mode
        state: "off"
      # proxy for whether it was turned on manually and prevent the ac from turning off again too quickly
      # e.g. if it was turned on manually, but before the conditions for automatic control was met
      - condition: state
        entity_id: binary_sensor.living_room_ac
        state: "on"
        for:
          minutes: 60
      - condition: not
        conditions:
          - condition: state
            entity_id: climate.living_room_ac
            state:
              - "off"
              - "fan_only"
      - condition: and
        conditions:
          - condition: or
            conditions:
              # cooling
              - condition: and
                conditions:
                  - condition: state
                    entity_id: climate.living_room_ac
                    state: "cool"
                  - condition: numeric_state
                    entity_id: sensor.office_temperature
                    below: 24.1
                  - condition: numeric_state
                    entity_id: sensor.outside_temperature
                    # same as matching trigger above
                    below: 24.1
                  - condition: numeric_state
                    entity_id: sensor.outside_temperature_change
                    below: -0.9
              # heating
              - condition: and
                conditions:
                  - condition: state
                    entity_id: climate.living_room_ac
                    state: "heat"
                  - condition: numeric_state
                    entity_id: sensor.office_temperature
                    above: 16.1
                  - condition: numeric_state
                    entity_id: sensor.outside_temperature
                    # same as matching trigger above
                    above: 17.9
                  - condition: numeric_state
                    entity_id: sensor.outside_temperature_change
                    above: 0.9
          # we trigger on "comfortable" outside, but we check the inside here
          - condition: state
            entity_id: sensor.thermal_comfort_inside_summer_simmer_perception
            state:
              - slightly_cool
              - comfortable
              - slightly_warm
    action:
      # or notify with actions to turn off or extend for 1 hour
      - service: climate.turn_off
        target:
          entity_id: climate.living_room_ac

  - alias: "Handle AC Event"
    id: "8b70e090-111b-43ee-8b08-53ebc65a19cb"
    initial_state: true
    trigger:
      - platform: event
        event_type: mobile_app_notification_action
        event_data:
          action: TURN_OFF_AC
      - platform: event
        event_type: mobile_app_notification_action
        event_data:
          action: TURN_OFF_AC_AND_DISABLE
        id: "disable"
    action:
      - wait_template: "{{ not is_state(trigger.event.data.action_data.entity_id, 'on') }}"
        timeout: "00:00:10"
        continue_on_timeout: false
      - service: climate.turn_off
        target:
          entity_id: "{{ trigger.event.data.action_data.entity_id }}"
      - condition: trigger
        id: "disable"
      - service: input_boolean.turn_on
        target:
          entity_id: input_boolean.disable_auto_on_ac

  - alias: "Reset Auto On AC Governor"
    id: "76301116-ecd0-493b-9afc-78411d601125"
    initial_state: true
    trigger:
      - platform: time
        at: "05:00:00"
    action:
      - service: input_boolean.turn_off
        target:
          entity_id: input_boolean.disable_auto_on_ac

  - alias: "Handle Bathroom Timers"
    id: "26ce241d-177b-4491-81ee-2738b2eee582"
    initial_state: true
    trigger:
      - platform: state
        entity_id:
          - switch.main_bathroom_light
          - switch.main_bathroom_fan
          - switch.bathroom_light
          - switch.bathroom_fan
    action:
      - variables:
          timer_id: "{{ trigger.entity_id | replace('switch', 'timer') ~ '_timer' }}"
          is_light: "{{ 'bathroom_light' in trigger.entity_id }}"
          is_daytime: "{{ is_state('binary_sensor.daytime', 'on') }}"
      - choose:
          - conditions:
              - condition: template
                value_template: "{{ is_state(trigger.entity_id, 'on') and is_light and is_daytime }}"
            sequence:
              - service: timer.start
                target:
                  entity_id: "{{ timer_id }}"
                data:
                  duration: "00:30:00"
          - conditions:
              - condition: template
                value_template: "{{ is_state(trigger.entity_id, 'on') and not is_light }}"
            sequence:
              - service: timer.start
                target:
                  entity_id: "{{ timer_id }}"
                data:
                  duration: "00:15:00"
        default:
          - service: timer.cancel
            target:
              entity_id: "{{ timer_id }}"

  - alias: "Handle Bathroom Timers At Sunrise"
    id: "c494ded5-c771-49c0-ad85-92013f0a9671"
    initial_state: true
    trigger:
      - platform: state
        entity_id: binary_sensor.daytime
        to: "on"
    action:
      - repeat:
          for_each:
            - switch.main_bathroom_light
            - switch.main_bathroom_fan
            - switch.bathroom_light
            - switch.bathroom_fan
          sequence:
            - variables:
                switch_id: "{{ repeat.item }}"
                timer_id: "{{ repeat.item | replace('switch', 'timer') ~ '_timer' }}"
                is_light: "{{ 'bathroom_light' in timer_id }}"
            - condition: template
              value_template: "{{ is_state(switch_id, 'on') and is_state(timer_id, 'idle') }}"
            - service: timer.start
              target:
                entity_id: "{{ timer_id }}"
              data:
                duration: "{{ '00:30:00' if is_light else '00:15:00' }}"

  - alias: "Handle Bathroom Timers At Sunset"
    id: "fde4eaca-5648-4eca-bfab-7f3d79552dfe"
    initial_state: true
    trigger:
      - platform: state
        entity_id: binary_sensor.daytime
        to: "off"
    action:
      - repeat:
          for_each:
            - switch.main_bathroom_light
            - switch.main_bathroom_fan
            - switch.bathroom_light
            - switch.bathroom_fan
          sequence:
            - variables:
                switch_id: "{{ repeat.item }}"
                timer_id: "{{ repeat.item | replace('switch', 'timer') ~ '_timer' }}"
                is_light: "{{ 'bathroom_light' in timer_id }}"
            - condition: template
              value_template: "{{ is_light and not is_state(timer_id, 'idle') }}"
            - service: timer.cancel
              target:
                entity_id: "{{ timer_id }}"

  - alias: "Turn Off Bathroom Fan"
    id: "de9d354c-912e-4683-b8df-42e9dca58425"
    initial_state: true
    trigger:
      - platform: event
        event_type: timer.finished
        event_data:
          entity_id: timer.main_bathroom_fan_timer
      - platform: event
        event_type: timer.finished
        event_data:
          entity_id: timer.bathroom_fan_timer
    action:
      - service: switch.turn_off
        target:
          entity_id: "{{ trigger.event.data.entity_id | replace('timer.', 'switch.') | replace('_timer', '') }}"

  - alias: "Turn Off Bathroom Light"
    id: "75b24d88-6e5a-4549-874c-02aec4a1d95b"
    initial_state: true
    trigger:
      - platform: event
        event_type: timer.finished
        event_data:
          entity_id: timer.main_bathroom_light_timer
      - platform: event
        event_type: timer.finished
        event_data:
          entity_id: timer.bathroom_light_timer
    condition:
      - condition: state
        entity_id: binary_sensor.daytime
        state: "on"
    action:
      - service: switch.turn_off
        target:
          entity_id: "{{ trigger.event.data.entity_id | replace('timer.', 'switch.') | replace('_timer', '') }}"

  - alias: "Set Trash Reminder"
    id: "0106ec38-40d7-49e5-be8f-e905c24519af"
    initial_state: true
    trigger:
      - platform: time
        at: "05:00:00"
    action:
      - service: input_boolean.turn_on
        target:
          entity_id: input_boolean.trash_reminder

  - alias: "Reminder To Take Out The Trash"
    id: "6f40cf58-7a12-456d-8a42-01ca56b95872"
    initial_state: true
    trigger:
      - platform: time
        at:
          - "06:45:00"
          - "07:00:00"
      - platform: time
        at:
          - "07:15:00"
        id: "final_reminder"
      - platform: state
        entity_id: binary_sensor.pieter_present
        to: "on"
    condition:
      - condition: state
        entity_id: input_boolean.trash_reminder
        state: "on"
      - condition: state
        entity_id: binary_sensor.pieter_present
        state: "on"
      - condition: time
        after: "05:00:00"
        before: "07:30:00"
        weekday:
          - tue
    action:
      - if:
          - condition: trigger
            id: "final_reminder"
        then:
          - service: notify.mobile_app_ceres
            data:
              title: "⏰ Routine"
              message: "Last chance to put out the trash!"
              data:
                group: "routine-trash"
                tag: "routine-trash"
                url: homeassistant://navigate/lovelace/main
                push:
                  sound:
                    name: default
                    critical: 1
                    volume: 0.3
          - service: input_boolean.turn_off
            target:
              entity_id: input_boolean.trash_reminder
        else:
          - service: notify.mobile_app_ceres
            data:
              title: "⏰ Routine"
              message: "Remember to put out the trash."
              data:
                actions:
                  - action: "TRASH_PUT_OUT"
                    title: "Done"
                    destructive: true
                group: "routine-trash"
                tag: "routine-trash"
                url: homeassistant://navigate/lovelace/main
                push:
                  sound:
                    name: default
                    critical: 1
                    volume: 0.3

  - alias: "Reset Trash Reminder"
    id: "84b06a96-a13b-46c1-b15c-41542bbcd05c"
    trigger:
      - platform: event
        event_type: mobile_app_notification_action
        event_data:
          action: TRASH_PUT_OUT
    action:
      - service: input_boolean.turn_off
        target:
          entity_id: input_boolean.trash_reminder

  - alias: "Reminder To Go Home"
    id: "463a0f9e-9fc5-4e5f-b8a3-8350ed2c452e"
    initial_state: true
    trigger:
      - platform: time
        at: input_datetime.go_home_reminder
      - platform: state
        entity_id: person.pieter_rautenbach
        to: "Park"
        for:
          minutes: 5
      - platform: event
        event_type: timer.finished
        event_data:
          entity_id: timer.go_home_reminder
    condition:
      - condition: state
        entity_id: person.pieter_rautenbach
        # https://community.home-assistant.io/t/device-tracker-zone-name-capitalization/22138/7
        state: "Park"
        for:
          minutes: 5
      - condition: time
        after: input_datetime.go_home_reminder
      - condition: state
        entity_id: timer.go_home_reminder
        state: "idle"
    action:
      - service: notify.mobile_app_ceres
        data:
          title: "⏰ Routine"
          message: >-
            Time to go home!
          data:
            group: "routine-go-home"
            tag: "routine-go-home"
            url: homeassistant://navigate/lovelace/main
            push:
              sound:
                name: default
                critical: 1
                volume: 0.3
      - service: timer.start
        target:
          entity_id: timer.go_home_reminder
        data:
          duration: "00:05:00"

  - alias: "Cancel Go Home Reminder"
    id: "e4e4b1e9-c759-476f-9816-f169b783839c"
    initial_state: true
    trigger:
      - platform: state
        entity_id: person.pieter_rautenbach
        to: "home"
    condition:
      - condition: state
        entity_id: timer.go_home_reminder
        state: "active"
    action:
      - service: notify.mobile_app_ceres
        data:
          message: "clear_notification"
          data:
            tag: "routine-go-home"
      - service: timer.cancel
        target:
          entity_id: timer.go_home_reminder

  - alias: "Turn On Living Room Fairy Lights"
    id: "646d2364-7e74-4f89-841b-d2ccb9c1ba8b"
    initial_state: true
    trigger:
      - platform: sun
        event: sunset
        # 1 hour before sunset
        offset: "-01:00:00"
    condition:
      - condition: state
        entity_id: binary_sensor.anybody_home
        state: "on"
      - condition: template
        value_template: >-
          {% set d = (now().month, now().day) %}
          {{  (11, 25) <= d or d <= (1, 15) }}
    actions:
      - service: light.turn_on
        target:
          entity_id: light.living_room_fairy_lights

  - alias: "Turn Off Living Room Fairy Lights"
    id: "7bce466b-cfb9-4257-9bc2-bba06373ad69"
    initial_state: true
    trigger:
      - platform: time
        at: "21:30:00"
      - platform: state
        entity_id: light.living_room_lamp
        to: "off"
    condition:
      - condition: state
        entity_id: light.living_room_fairy_lights
        state: "on"
    actions:
      - service: light.turn_off
        target:
          entity_id: light.living_room_fairy_lights

  - alias: "Send Bedtime Update"
    id: "a57345d4-eec3-42b6-970d-84e2b77fb646"
    initial_state: true
    trigger:
      # note: we cannot use this, since we're using a positive offset
      # https://www.home-assistant.io/docs/automation/trigger/#sensors-of-datetime-device-class-with-offsets
      - platform: template
        value_template: >-
          {% set current = now().replace(second=0).replace(microsecond=0) %}
          {% set target = states('input_datetime.go_home_reminder') | today_at + timedelta(minutes=30) %}
          {{ current == target }}
    actions:
      - service: notify.family
        data:
          title: "⏰ Bedtime Update"
          message: >-
            {% set current = states('sensor.bedroom_ht_temperature', with_unit=True) %}
            {% set current_raw = states('sensor.bedroom_ht_temperature') | float(0) %}
            {% set yesterday = states('sensor.bedroom_temperature_24_hours_ago', with_unit=True) %}
            {% set yesterday_raw = states('sensor.bedroom_temperature_24_hours_ago') | float(0) %}
            {% set difference = (current_raw - yesterday_raw) | abs | round(1) %}
            {% set direction = 'similar' %}
            {% if difference > 0.5 %}
              {% set direction = 'warmer' if current_raw > yesterday_raw else 'cooler' %}
            {% endif %}
            {% set inside_perception = state_translated('sensor.thermal_comfort_inside_summer_simmer_perception') | lower %}
            {% set inside_min = states('sensor.bedroom_minimum_temperature_12_hours', with_unit=True) %}
            {% set inside_max = states('sensor.bedroom_maximum_temperature_12_hours', with_unit=True) %}
            {% set outside_min = states('sensor.minimum_temperature_tomorrow', with_unit=True) %}
            Julia's bedroom temperature update:
              - Current: {{ current }} ({{ inside_perception }}).
              - Last night: {{ yesterday }} ({{ difference ~ ' °C ' ~ direction if not direction == 'similar' else direction }} now).
              - Min/max past 12 hours: {{ inside_min }} / {{ inside_max }}.
              - Forecasted min: {{ outside_min }}.
          data:
            group: "routine-bedtime"
            url: homeassistant://navigate/lovelace/baby
