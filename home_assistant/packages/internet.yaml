homeassistant:
  customize:
    sensor.internet_speed_in:
      friendly_name: 'Download Traffic'
      icon: mdi:download
    sensor.internet_speed_out:
      friendly_name: 'Upload Traffic'
      icon: mdi:upload
    sensor.internet_usage_in:
      friendly_name: 'Download Usage'
      icon: mdi:download
    sensor.internet_usage_out:
      friendly_name: 'Upload Usage'
      icon: mdi:upload
    sensor.daily_internet_usage_in:
      friendly_name: 'Daily Downloads'
      icon: mdi:download
      state_class: total_increasing
    sensor.daily_internet_usage_out:
      friendly_name: 'Daily Uploads'
      icon: mdi:upload
      state_class: total_increasing
    sensor.monthly_internet_usage_in:
      friendly_name: 'Monthly Downloads'
      icon: mdi:download
    sensor.monthly_internet_usage_out:
      friendly_name: 'Monthly Uploads'
      icon: mdi:upload
    binary_sensor.internet:
      scan_interval: 60
    sensor.internet_packet_loss:
      friendly_name: Internet Packet Loss
      icon: mdi:cancel
    sensor.internet_round_trip_time_avg:
      friendly_name: Internet Mean Ping Time
      icon: mdi:timer-outline
    sensor.internet_round_trip_time_mdev:
      friendly_name: Internet Mean Ping Deviation
      icon: mdi:sigma-lower
    binary_sensor.front_extender:
      scan_interval: 30
    sensor.front_extender_packet_loss:
      friendly_name: Front Extender Packet Loss
      icon: mdi:cancel
    sensor.front_extender_round_trip_time_avg:
      friendly_name: Front Extender Mean Ping Time
      icon: mdi:timer-outline
    sensor.front_extender_round_trip_time_mdev:
      friendly_name: Front Extender Mean Ping Deviation
      icon: mdi:sigma-lower
    binary_sensor.back_extender:
      scan_interval: 30
    sensor.back_extender_packet_loss:
      friendly_name: Back Extender Packet Loss
      icon: mdi:cancel
    sensor.back_extender_round_trip_time_avg:
      friendly_name: Back Extender Mean Ping Time
      icon: mdi:timer-outline
    sensor.back_extender_round_trip_time_mdev:
      friendly_name: Back Extender Mean Ping Deviation
      icon: mdi:sigma-lower
    input_number.wan_traffic_delta_in:
      friendly_name: WAN Traffic Delta In
    input_number.wan_traffic_delta_out:
      friendly_name: WAN Traffic Delta Out

# why these when you can just look at the last_changed property?
# because this is more resilient against restarts
input_datetime:
  front_extender_disconnected:
    has_date: true
    has_time: true
  back_extender_disconnected:
    has_date: true
    has_time: true

input_number:
  wan_traffic_delta_in:
    # snmp counter is 32-bit unsigned int
    min: 0
    max: 4294967295
  wan_traffic_delta_out:
    # snmp counter is 32-bit unsigned int
    min: 0
    max: 4294967295

timer:
  front_extender_disconnected:
    duration: "00:1:00"
    restore: true
  back_extender_disconnected:
    duration: "00:1:00"
    restore: true

utility_meter:
  daily_internet_usage_in:
    unique_id: "f6f3293b-81e9-4427-95ad-ed467f642ee3"
    source: sensor.internet_usage_in
    cycle: daily
  monthly_internet_usage_in:
    unique_id: "692217cc-cb53-4ade-aaf2-a7810c1dd287"
    source: sensor.internet_usage_in
    cycle: monthly
  daily_internet_usage_out:
    unique_id: "f967f73e-cd3e-428d-873e-0f11ce703c7e"
    source: sensor.internet_usage_out
    cycle: daily
  monthly_internet_usage_out:
    unique_id: "00f46f8f-f570-4e3f-a883-7b747d36d47f"
    source: sensor.internet_usage_out
    cycle: monthly

command_line:
  - sensor:
      name: internet_packet_loss
      command: 'ping -c 5 www.google.com 2> /dev/null | grep -o -P "(?<= )(\d+)(?=%)" || echo 100'
      command_timeout: 15
      unit_of_measurement: "%"
      value_template: '{{ value | int(0) }}'
      scan_interval: 60

  - sensor:
      name: front_extender_packet_loss
      command: 'ping -c 5 front_extender 2> /dev/null | grep -o -P "(?<= )(\d+)(?=%)" || echo 100'
      command_timeout: 15
      unit_of_measurement: "%"
      value_template: '{{ value | int(0) }}'
      scan_interval: 30

  - sensor:
      name: back_extender_packet_loss
      command: 'ping -c 5 AccessPointWiFi6Pro 2> /dev/null | grep -o -P "(?<= )(\d+)(?=%)" || echo 100'
      command_timeout: 15
      unit_of_measurement: "%"
      value_template: '{{ value | int(0) }}'
      scan_interval: 30

binary_sensor:
  - platform: template
    sensors:
      internet_connection:
        friendly_name: "Internet"
        device_class: connectivity
        value_template: >-
          {{ is_state('binary_sensor.internet', 'on') }}
        icon_template: >-
          {% if is_state('binary_sensor.internet', 'on') %}
            mdi:server-network
          {% else %}
            mdi:server-network-off
          {% endif %}

sensor:
  - platform: snmp
    name: snmp_wan_in
    host: 192.168.0.1
    community: !secret router_snmp_community
    version: 2c
    baseoid: 1.3.6.1.2.1.2.2.1.10.26  # ifInOctets.26 / nas0_0
    unit_of_measurement: octets

  - platform: snmp
    name: snmp_wan_out
    host: 192.168.0.1
    community: Router
    version: 2c
    baseoid: 1.3.6.1.2.1.2.2.1.16.26  # ifOutOctets.26 / nas0_0
    unit_of_measurement: octets

  - platform: template
    sensors:
      # https://github.com/home-assistant/core/blob/dev/homeassistant/const.py#L571
      internet_speed_in:
        value_template: '{{ ((states.input_number.wan_traffic_delta_in.state  | float(0) ) / 1000000 ) | round(3) }}'
        device_class: data_rate
        unit_of_measurement: 'Mbit/s'
      internet_speed_out:
        value_template: '{{ ((states.input_number.wan_traffic_delta_out.state | float(0) ) / 1000000 ) | round(3) }}'
        device_class: data_rate
        unit_of_measurement: 'Mbit/s'
      internet_usage_in:
        value_template: "{{ ((states('sensor.snmp_wan_in')  | float(0) ) / 1000000000 ) | round(3) }}"
        device_class: data_size
        unit_of_measurement: 'GB'
      internet_usage_out:
        value_template: "{{ ((states('sensor.snmp_wan_out') | float(0) ) / 1000000000 ) | round(3) }}"
        device_class: data_size
        unit_of_measurement: 'GB'
      internet_round_trip_time_avg:
        value_template: "{{ state_attr('binary_sensor.internet', 'round_trip_time_avg') }}"
        unit_of_measurement: 'ms'
      internet_round_trip_time_mdev:
        value_template: "{{ state_attr('binary_sensor.internet', 'round_trip_time_mdev') }}"
        unit_of_measurement: 'ms'
      front_extender_round_trip_time_avg:
        value_template: "{{ state_attr('binary_sensor.front_extender', 'round_trip_time_avg') }}"
        unit_of_measurement: 'ms'
      front_extender_round_trip_time_mdev:
        value_template: "{{ state_attr('binary_sensor.front_extender', 'round_trip_time_mdev') }}"
        unit_of_measurement: 'ms'
      back_extender_round_trip_time_avg:
        value_template: "{{ state_attr('binary_sensor.back_extender', 'round_trip_time_avg') }}"
        unit_of_measurement: 'ms'
      back_extender_round_trip_time_mdev:
        value_template: "{{ state_attr('binary_sensor.back_extender', 'round_trip_time_mdev') }}"
        unit_of_measurement: 'ms'

  # alternative: https://community.home-assistant.io/t/snmp-bandwidth-monitor-using-statistics/96684/82
  - platform: statistics
    name: 'Internet Traffic In'
    entity_id: sensor.internet_speed_in
    state_characteristic: mean
    # it's a little unclear how to set this, but let's say if this updates every second,
    # 100 samples should cover 1 minute even with some misses
    # https://www.home-assistant.io/integrations/statistics/#an-important-note-on-max_age-and-sampling_size
    sampling_size: 100
    max_age:
      minutes: 1

  - platform: statistics
    name: 'Internet Traffic Out'
    entity_id: sensor.internet_speed_out
    state_characteristic: mean
    sampling_size: 100
    max_age:
      minutes: 1

automation:
  # https://community.home-assistant.io/t/snmp-bandwidth-monitor/7122
  # https://community.home-assistant.io/t/snmp-bandwidth-monitor-using-statistics-and-a-utility-meter/176971
  - alias: "Monitor Inbound Internet Traffic"
    id: "244f20ae-8cc6-4442-b3aa-0336763508f8"
    trigger:
      platform: state
      entity_id: sensor.snmp_wan_in
    action:
      - service: input_number.set_value
        data:
          entity_id: input_number.wan_traffic_delta_in
          value: >-
            {# safe delta catering for wrap-around of a 32-bit unsigned int (snmp counter is 32-bit unsigned int) #}
            {# basically taking 2's complement #}
            {% set from = trigger.from_state.state | int(0) %}
            {% set to = trigger.to_state.state | int(0) %}
            {% set traffic_delta = (to - from) if (to >= from) else (4294967295 - from + to + 1) %}
            {% set time_delta = as_timestamp(trigger.to_state.last_updated) - as_timestamp(trigger.from_state.last_updated) %}
            {{ (traffic_delta * 8) / time_delta }}

  - alias: "Monitor Outbound Internet Traffic"
    id: "719b1fd6-bfc1-40b3-bf0e-5a07cff11aea"
    trigger:
      platform: state
      entity_id: sensor.snmp_wan_out
    action:
      - service: input_number.set_value
        data:
          entity_id: input_number.wan_traffic_delta_out
          value: >-
            {# safe delta catering for wrap-around of a 32-bit unsigned int (snmp counter is 32-bit unsigned int) #}
            {# basically taking 2's complement #}
            {% set from = trigger.from_state.state | int(0) %}
            {% set to = trigger.to_state.state | int(0) %}
            {% set traffic_delta = (to - from) if (to >= from) else (4294967295 - from + to + 1) %}
            {% set time_delta = as_timestamp(trigger.to_state.last_updated) - as_timestamp(trigger.from_state.last_updated) %}
            {{ (traffic_delta * 8) / time_delta }}

  - alias: "Notify If Internet Status Changed"
    id: "ff386c09-1dd5-4381-b404-abad62bffb01"
    initial_state: true
    trigger:
      - platform: state
        entity_id: binary_sensor.internet_connection
    mode: queued
    condition:
      - condition: state
        entity_id: binary_sensor.pieter_present
        state: "on"
      - condition: time
        after: "05:00:00"
        before: "23:00:00"
    action:
      - service: notify.mobile_app_ceres
        data:
          title: "⚠️ Internet"
          message: >-
            {% from 'datetime.jinja' import sec_to_hour_and_min %}
            {% set seconds = max((as_timestamp(utcnow()) - as_timestamp(trigger.from_state.last_changed)) | int(0), 60) %}
            {% set duration = sec_to_hour_and_min(seconds) %}
            The Internet {{ 'is unavailable' if trigger.to_state.state == 'off' else 'was unavailable for ' ~  duration }}.
          data:
            group: "home-internet"
            url: homeassistant://navigate/lovelace/internet
            tag: "internet-status"

  - alias: "Detect When Extender Disconnected"
    id: "b5d61b3c-516a-4428-9141-969d9fc47b4c"
    initial_state: true
    trigger:
      - platform: state
        entity_id:
          - binary_sensor.front_extender
          - binary_sensor.back_extender
        from: "on"
        to: "off"
    mode: parallel
    action:
      - service: timer.start
        target:
          entity_id: "{{ trigger.entity_id | replace('binary_sensor', 'timer') }}_disconnected"
        data:
          # test duration
          # if changed here, change it in "Notify When Extender Disconnected" too
          duration: "00:01:00"
      - service: input_datetime.set_datetime
        target:
          entity_id: "{{ trigger.entity_id | replace('binary_sensor', 'input_datetime') }}_disconnected"
        data:
          datetime: "{{ now() }}"

  - alias: "Detect When Extender Reconnected"
    id: "a80aad69-169e-4a24-aec0-088512a443ae"
    initial_state: true
    trigger:
      - platform: state
        entity_id:
          - binary_sensor.front_extender
          - binary_sensor.back_extender
        from: "off"
        to: "on"
        # this automation and the one to notify an extender has disconnect can race...
        for:
          seconds: 5
    mode: parallel
    action:
      # if the timer completed at least once
      - choose:
          - conditions:
              - condition: template
                value_template: >-
                  {% set timer_entity_id = trigger.entity_id | replace('binary_sensor', 'timer') ~ '_disconnected' %}
                  {% set duration = state_attr(timer_entity_id, 'duration') %}
                  {% set (hours, minutes, seconds) = duration.split(':') | map('int') %}
                  {% set threshold =  minutes*60 + seconds - 1 %}
                  {% set input_datetime_entity_id = trigger.entity_id | replace('binary_sensor', 'input_datetime') ~ '_disconnected' %}
                  {% set last_available = states(input_datetime_entity_id) | as_timestamp %}
                  {% set utc_now_ts = utcnow() | as_timestamp %}
                  {{ (utc_now_ts - last_available) | int(0) >= threshold }}
            sequence:
              - service: notify.mobile_app_ceres
                data:
                  title: "⚠️ Internet"
                  message: >-
                    {% set input_datetime_entity_id = trigger.entity_id | replace('binary_sensor', 'input_datetime') ~ '_disconnected' %}
                    {% set last_available = states(input_datetime_entity_id) | as_timestamp %}
                    {% set utc_now_ts = utcnow() | as_timestamp %}
                    {# note that we assume here and in the next automation that the timer's duration isn't less than 1 min #}
                    {# for some reason the calculated duration for a 1 min timer will be a second or two less #}
                    {# i guess this is due to some relative frame of intertia... #}
                    {% set minutes = ((utc_now_ts - last_available) // 60) | int(0) or 1 %}
                    {% set extender_name = state_attr(trigger.entity_id, 'friendly_name') | lower %}
                    The {{ extender_name }} was unavailable for {{ minutes }} min.
                  data:
                    group: "home-internet"
                    url: homeassistant://navigate/lovelace/internet
                    tag: "{{ trigger.entity_id }}"
      # add a wait for here?
      - service: timer.cancel
        target:
          entity_id: "{{ trigger.entity_id | replace('binary_sensor', 'timer') }}_disconnected"

  - alias: "Notify When Extender Disconnected"
    id: "8335b7df-93d6-4ea4-8022-9d0d2ed87e46"
    initial_state: true
    trigger:
      - platform: event
        event_type: timer.finished
        event_data:
          entity_id: timer.front_extender_disconnected
      - platform: event
        event_type: timer.finished
        event_data:
          entity_id: timer.back_extender_disconnected
    mode: parallel
    action:
      # check if sensor still off?
      - service: notify.mobile_app_ceres
        data:
          title: "⚠️ Internet"
          message: >-
            {% set binary_sensor_entity_id = trigger.event.data.entity_id | replace('timer', 'binary_sensor') | replace('_disconnected', '') %}
            {% set extender_name = state_attr(binary_sensor_entity_id, 'friendly_name') | lower %}
            {% set extender_slug = binary_sensor_entity_id | replace('binary_sensor.', '') %}
            {% set minutes = (now() - states.binary_sensor[extender_slug].last_updated).total_seconds() | multiply(1/60) | int(0) or 1 %}
            The {{ extender_name }} became unavailable {{ minutes }} min ago.
          data:
            group: "home-internet"
            url: homeassistant://navigate/lovelace/internet
            tag: >-
              {% set binary_sensor_entity_id = trigger.event.data.entity_id | replace('timer', 'binary_sensor') | replace('_disconnected', '') %}
              {{ binary_sensor_entity_id }}
      - service: timer.start
        target:
          entity_id: "{{ trigger.event.data.entity_id }}"
        data:
          # test duration
          # if changed here, change it in "Detect When Extender Disconnected" too
          duration: "00:01:00"
