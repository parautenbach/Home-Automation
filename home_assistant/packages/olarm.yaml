# features:
#  * real-time alarm state updates and triggers
#  * basic alarm management: arming/disarming (advanced management via the olarm app)
#  * presence aware: ask to arm/disarm when leaving/arriving
#  * extensible with more custom automations and integration of one's own sensors
#  * area/partition aware, but you'll need to customise it to your needs
#
# unsupported:
#  * zone monitoring (no real-time updates via webhooks or mqtt)
#  * bypassing zones (not implemented; not supported by the alarm integration)
#  * alarm action history (not implemented; not supported by the alarm integration)
#  * how or who armed/disarmed the alarm (complex)
#
# future:
#  * distinct alerts (notifications) for breach, panic, fire and emergency (currently no distinction)
#  * hoping for an mqtt integration with additional features (multiple requests made; apparently wip)
#
# known issues & bugs:
#  * arming when a zone is active (open) will not fail when calling the api (issue reported)
#
# references:
# https://community.home-assistant.io/t/olarm-integration/384560/28
# https://community.home-assistant.io/t/olarm-integration/384560/52
# https://github.com/rainepretorius/olarm-ha-integration
# https://github.com/rainepretorius/olarm-ha-integration/discussions/85

# https://www.home-assistant.io/integrations/alarm_control_panel/
# https://www.home-assistant.io/integrations/manual/
# https://www.home-assistant.io/integrations/alarm_control_panel.template/
# triggering the alarm:
#   * https://community.home-assistant.io/t/solved-alarm-control-panel-alarm-trigger-service-doesnt-trigger-the-alarm/72108
# might switch to this once we can properly monitor zones:
#   * https://github.com/nielsfaber/alarmo
alarm_control_panel:
  - platform: manual
    name: "Home"
    code: !secret alarm_code
    code_arm_required: true
    arming_time: 0
    delay_time: 0
    trigger_time: 120
    disarm_after_trigger: false
    disarmed:
      trigger_time: 120
    armed_home:
      arming_time: 0
      delay_time: 0
      trigger_time: 120
    armed_away:
      arming_time: 0
      delay_time: 0
      trigger_time: 120
  - platform: manual
    name: "Flatlet"
    code: !secret alarm_code
    code_arm_required: true
    arming_time: 0
    delay_time: 0
    trigger_time: 120
    disarm_after_trigger: false
    disarmed:
      trigger_time: 120
    armed_home:
      arming_time: 0
      delay_time: 0
      trigger_time: 120
    armed_away:
      arming_time: 0
      delay_time: 0
      trigger_time: 120

# https://www.home-assistant.io/integrations/rest_command/
# https://user.olarm.co/#/api
# https://user.olarm.co/#/api/documentation
rest_command:
  olarm_get_state:
    method: "GET"
    headers:
      Authorization: !secret olarm_bearer_token
    url: !secret olarm_device_endpoint
    content_type: "application/json"
  olarm_disarmed:
    method: "POST"
    headers:
      Authorization: !secret olarm_bearer_token
    url: !secret olarm_actions_endpoint
    # areas are 1-indexed (i.e. starts at 1 not 0)
    payload: >-
      {
        "actionCmd": "area-disarm",
        "actionNum": {{ area }}
      }
    content_type: "application/json"
  olarm_armed_home:
    method: "POST"
    headers:
      Authorization: !secret olarm_bearer_token
    url: !secret olarm_actions_endpoint
    payload: >-
      {
        "actionCmd": "area-stay",
        "actionNum": {{ area }}
      }
    content_type: "application/json"
  olarm_armed_away:
    method: "POST"
    headers:
      Authorization: !secret olarm_bearer_token
    url: !secret olarm_actions_endpoint
    payload: >-
      {
        "actionCmd": "area-arm",
        "actionNum": {{ area }}
      }
    content_type: "application/json"

automation:
  - alias: "Sync Alarm State"
    id: "e8f36533-e1c8-40d5-b35f-3001a159ec8e"
    initial_state: true
    trigger:
      - platform: homeassistant
        event: start
    action:
      - variables:
          state_map:
            notready: "disarm"
            disarm: "disarm"
            stay: "arm_home"
            arm: "arm_away"
      - service: rest_command.olarm_get_state
        response_variable: olarm_response
      # index 0 is area/partition 1 in this case, because we're indexing an array
      # it's not the olarm area/partition numbers which are 1-indexed
      # values are: stay, arm, disarm
      - service: "alarm_control_panel.alarm_{{ state_map[olarm_response.content.deviceState.areas[0]] }}"
        target:
          entity_id: alarm_control_panel.home
        data:
          code: !secret alarm_code
      - service: "alarm_control_panel.alarm_{{ state_map[olarm_response.content.deviceState.areas[1]] }}"
        target:
          entity_id: alarm_control_panel.flatlet
        data:
          code: !secret alarm_code

  # examples for state changes:
  # {'deviceId': '<uuid>', 'eventTime': 1708664464105, 'eventAction': 'area', 'eventState': 'disarm', 'eventNum': 1, 'eventMsg': 'DISARMED - Area 1 - Home', 'userFullname': ''}
  # {'deviceId': '<uuid>', 'eventTime': 1708797060201, 'eventAction': 'area', 'eventState': 'stay', 'eventNum': 1, 'eventMsg': 'STAY ARMED - Area 1 - Home', 'userFullname': ''}
  # {'deviceId': '<uuid>', 'eventTime': 1708882676603, 'eventAction': 'area', 'eventState': 'stay', 'eventNum': 1, 'eventMsg': 'STAY ARMED - Area 1 - Home', 'userFullname': 'Pieter Rautenbach'}
  # {'deviceId': '<uuid>', 'eventTime': 1709539839721, 'eventAction': 'area', 'eventState': 'arm', 'eventNum': 1, 'eventMsg': 'ARMED - Area 1 - Home', 'userFullname': ''}
  #
  # examples for triggers
  # {'deviceId': '<uuid>', 'eventTime': 1716790300370, 'eventAction': 'area', 'eventState': 'alarm', 'eventNum': 1, 'eventMsg': 'ALARM! - Area 1 - Home', 'userFullname': ''}
  # {'deviceId': '<uuid>', 'eventTime': 1716790300457, 'eventAction': 'zone_alarm', 'eventState': 'alarm', 'eventNum': 1, 'eventMsg': 'ZONE 1 IN ALARM - Zone 1 - Front Door', 'userFullname': ''}
  #
  # examples for emergencies
  # these are all panics. these two events seem to say that eventNum refers to the area/partition.
  # {'deviceId': '<uuid>', 'eventTime': 1709539853196, 'eventAction': 'area', 'eventState': 'emergency', 'eventNum': 1, 'eventMsg': 'EMERGENCY! - Area 1 - Home', 'userFullname': ''}
  # {'deviceId': '<uuid>', 'eventTime': 1709539853197, 'eventAction': 'area', 'eventState': 'emergency', 'eventNum': 2, 'eventMsg': 'EMERGENCY! - Area 2 - Flatlet', 'userFullname': ''}
  # but here eventNum seem to refer to the zone. thus, one needs to parse the eventMsg. seems like there are events for zones activated during a panic.
  # {'deviceId': '<uuid>', 'eventTime': 1709539853200, 'eventAction': 'area', 'eventState': 'emergency', 'eventNum': 5, 'eventMsg': 'EMERGENCY! - Area 5', 'userFullname': ''}
  # {'deviceId': '<uuid>', 'eventTime': 1709539853199, 'eventAction': 'area', 'eventState': 'emergency', 'eventNum': 4, 'eventMsg': 'EMERGENCY! - Area 4', 'userFullname': ''}
  # then there's this one (note the eventAction):
  # {'deviceId': '<uuid>', 'eventTime': 1709539853544, 'eventAction': 's_alm', 'eventState': 'panic', 'eventNum': 1, 'eventMsg': 'EMERGENCY! - Panic', 'userFullname': ''}
  - alias: "Receive Olarm Event"
    id: "fbf7afaa-c357-4a85-b50d-ba5d57b9e187"
    initial_state: true
    trace:
      stored_traces: 20
    trigger:
      - platform: webhook
        webhook_id: !secret olarm_webhook_id
        local_only: false
        allowed_methods:
          - POST
    mode: queued
    action:
      - variables:
          state_map:
            disarm: "disarm"
            stay: "arm_home"
            arm: "arm_away"
      - service: system_log.write
        data:
          message: "{{ trigger.webhook_id ~ ': ' ~ trigger.json }}"
          level: debug
          logger: "homeassistant.components.olarm"
      - choose:
          # if triggered
          - conditions:
              - condition: template
                value_template: "{{ trigger.json.eventState in ['panic', 'alarm'] }}"
            sequence:
              # todo: save panic type (mapped):
              # if panic
              #   'eventAction': 's_alm'   => general
              #   'eventAction': 's_alm_f' => fire
              #   'eventAction': 's_alm_m' => medical
              # elif alarm & partition 1 (not 2):
              #   ...
              - service: alarm_control_panel.alarm_trigger
                target:
                  entity_id: alarm_control_panel.home
                data:
                  code: !secret alarm_code
              - service: alarm_control_panel.alarm_trigger
                target:
                  entity_id: alarm_control_panel.flatlet
                data:
                  code: !secret alarm_code
          # elif state changed: home
          - conditions:
              # compare with current state (noop it if matches; means it was actioned from HA, so don't cause a loop)
              - condition: template
                value_template: >-
                  {# eventNum == 1 is the partition/area check #}
                  {% set new_state = state_map[trigger.json.eventState] %}
                  {{ trigger.json.eventNum == 1 and
                     trigger.json.eventState in ['disarm', 'stay', 'arm'] and
                     not is_state('alarm_control_panel.home', new_state) }}
            sequence:
              - service: "alarm_control_panel.alarm_{{ state_map[trigger.json.eventState] }}"
                target:
                  entity_id: alarm_control_panel.home
                data:
                  code: !secret alarm_code
          # elif state changed: flatlet
          - conditions:
              # compare with current state (noop it if matches; means it was actioned from HA, so don't cause a loop)
              - condition: template
                value_template: >-
                  {# eventNum == 2 is the partition/area check #}
                  {% set new_state = state_map[trigger.json.eventState] %}
                  {{ trigger.json.eventNum == 2 and
                     trigger.json.eventState in ['disarm', 'arm'] and
                     not is_state('alarm_control_panel.flatlet', new_state) }}
            sequence:
              - service: "alarm_control_panel.alarm_{{ state_map[trigger.json.eventState] }}"
                target:
                  entity_id: alarm_control_panel.flatlet
                data:
                  code: !secret alarm_code
          # should we rather notify in the above sequence blocks? this would be a potential solution (workaround?) for the
          # api bug noted in the "Alarm State Changed" automation, because we will only execute this if the physical panel's
          # actual state changed. on the other hand, we might change the state from home assistant, and the panel's state
          # will then be set, but the call to olarm will still silently fail, so the state's will still be out of sync.
        default:
          - service: system_log.write
            data:
              message: "{{ trigger.webhook_id ~ ': Unknown event received: ' ~ trigger.json.eventState }}"
              level: warning
              logger: "homeassistant.components.olarm"

  - alias: "Notify When Alarm Triggered"
    id: "45f0ac46-8bbb-42cb-a051-64ea1ca695e2"
    initial_state: true
    trigger:
      - platform: state
        entity_id:
          - alarm_control_panel.home
          - alarm_control_panel.flatlet
        to: "triggered"
    action:
      - service: notify.mobile_app_ceres
        data:
          title: "🚨 Security"
          # todo: check for active zones
          # todo: specialise alert according to a panic, fire, medical alarm
          #       if we have this, we can e.g. contact the fire department or call for an ambulance automatically
          #       or maybe the security company will already triage this when receiving the panic signal
          #       can also trigger the fire alarm here if one of the smoke sensors went off and isn't muted after a set time
          message: "The alarm has been triggered at {{ now().strftime('%H:%M') }}!"
          data:
            group: "home-security"
            url: homeassistant://navigate/lovelace/security
            push:
              sound:
                name: default
                critical: 1
                volume: 0.5
            actions:
              - action: "DISARM_ALARM"
                title: "Disarm now"
                destructive: true

  - alias: "Ask To Arm Alarm When Last Person Left"
    id: "e8a63da5-4d84-40ab-9c05-dca93ba4900d"
    initial_state: true
    trigger:
      - platform: state
        entity_id: binary_sensor.pieter_present
        to: "off"
    mode: single
    action:
      - wait_template: "{{ is_state('binary_sensor.anybody_home', 'off') }}"
        timeout: "00:02:00"
        continue_on_timeout: false
      - condition: state
        entity_id: alarm_control_panel.home
        state: "disarmed"
      - service: notify.mobile_app_ceres
        data:
          title: "🔒 Security"
          message: >-
            The last person left home. Would you like to arm the alarm?
          data:
            group: "home-security"
            url: homeassistant://navigate/lovelace/security
            actions:
              - action: "ARM_ALARM"
                title: "Arm now"
                destructive: true
            push:
              sound:
                name: default
                critical: 1
                volume: 0.5

  - alias: "Ask To Disarm Alarm When Arriving"
    id: "85753536-12f8-4a94-b292-7672ac96a4c2"
    initial_state: true
    trigger:
      - platform: state
        entity_id: binary_sensor.pieter_present
        to: "on"
    condition:
      - condition: not
        conditions:
          - condition: state
            entity_id: alarm_control_panel.home
            state: "disarmed"
    action:
      # delivery of the notification can be slow
      # so, even if this triggers immediately, it may only be delivered after the garage door has been opened
      # the traces and history shows the order of events are correct
      - service: notify.mobile_app_ceres
        data:
          title: "🔒 Security"
          message: >-
            You arrived home. Would you like to disarm the alarm?
          data:
            group: "home-security"
            url: homeassistant://navigate/lovelace/security
            actions:
              - action: "DISARM_ALARM"
                title: "Disarm now"
                destructive: true
            push:
              sound:
                name: default
                critical: 1
                volume: 0.5

  - alias: "Turn On Yard Lights If Alarm Triggered"
    id: "50147e47-23b5-4ed4-973c-0c1e5243c731"
    initial_state: true
    trigger:
      - platform: state
        entity_id: alarm_control_panel.home
        to: "triggered"
    condition:
      - condition: state
        entity_id: binary_sensor.nighttime
        state: "on"
    action:
      - service: light.turn_on
        target:
          entity_id:
            - light.front_door
            - light.backyard

  - alias: "Remind To Arm Stay Alarm"
    id: "60793526-4de9-44d9-9ed9-db95a15a071f"
    initial_state: true
    trigger:
      - platform: time
        at: "20:00:00"
        id: "weekdays"
      - platform: time
        at: "22:00:00"
        id: "weekends"
    condition:
      - condition: state
        entity_id: alarm_control_panel.home
        state: "disarmed"
      - condition: state
        entity_id: binary_sensor.pieter_present
        state: "on"
      - condition: template
        value_template: >-
          {{ (trigger.id == 'weekdays' and is_state('binary_sensor.workday_tomorrow', 'on')) or trigger.id == 'weekends' }}
    action:
      - service: notify.mobile_app_ceres
        data:
          title: "🔒 Security"
          message: >-
            You haven't yet armed the stay alarm. Would you like to arm it?
          data:
            group: "home-security"
            url: homeassistant://navigate/lovelace/security
            actions:
              - action: "ARM_STAY_ALARM"
                title: "Arm (stay) now"
                destructive: true
            push:
              sound:
                name: default
                critical: 1
                volume: 0.5

  - alias: "Handle Alarm Notification Event"
    id: "c7a55b28-a909-4cf0-8f91-23f1d8a0e45a"
    initial_state: true
    trigger:
      - platform: event
        event_type: mobile_app_notification_action
        event_data:
          action: ARM_ALARM
        id: "arm_away"
      - platform: event
        event_type: mobile_app_notification_action
        event_data:
          action: ARM_STAY_ALARM
        id: "arm_home"
      - platform: event
        event_type: mobile_app_notification_action
        event_data:
          action: DISARM_ALARM
        id: "disarm"
    condition:
      - condition: template
        value_template: >-
          {% set new_state = trigger.id | replace('arm', 'armed') %}
          {{ not is_state('alarm_control_panel.home', new_state) }}
    action:
      - service: "alarm_control_panel.alarm_{{ trigger.id }}"
        target:
          entity_id: alarm_control_panel.home
        data:
          code: !secret alarm_code

  - alias: "Alarm State Changed"
    id: "c217ca42-8a3f-40c6-9945-2c77bdf16239"
    initial_state: true
    trigger:
      - platform: state
        entity_id:
          - alarm_control_panel.home
          - alarm_control_panel.flatlet
        to:
          - "disarmed"
          - "armed_home"
          - "armed_away"
    action:
      - variables:
          state_map:
            disarmed: "disarmed"
            armed_home: "armed (stay)"
            armed_away: "armed"
          state: "{{ state_map[trigger.to_state.state] }}"
      # this call will not fail if e.g. arming when a zone is active when it shouldn't be
      - service: "rest_command.olarm_{{ trigger.to_state.state }}"
        data:
          area: "{{ '1' if trigger.entity_id == 'alarm_control_panel.home' else '2' }}"
        response_variable: olarm_response
      - if: "{{ olarm_response.status == 200 and olarm_response.content.actionStatus == 'OK' }}"
        then:
          - service: notify.mobile_app_ceres
            data:
              title: "🔒 Security"
              # todo: user (can be from olarm or HA context; tricky to get right)
              message: >-
                {% set area = trigger.entity_id | replace('alarm_control_panel.', '') %}
                The alarm's {{ area }} partition was {{ state }} at {{ now().strftime('%H:%M') }}.
              data:
                group: "home-security"
                url: homeassistant://navigate/lovelace/security
        else:
          - service: system_log.write
            data:
              message: "{{ olarm_response.status }}: {{ olarm_response.content }}"
              level: error
              logger: "homeassistant.components.olarm"
          - service: notify.mobile_app_ceres
            data:
              title: "⛔️ Security"
              message: >-
                {% set area = trigger.entity_id | replace('alarm_control_panel.', '') %}
                The alarm's {{ area }} partition couldn't be {{ state }} at {{ now().strftime('%H:%M') }}. Check the log for errors.
              data:
                group: "home-security"
                url: homeassistant://navigate/config/logs

  # my alarm only has a stay mode – not also a night mode
  # the alarm frontend card used shouldn't have night mode as a valid feature
  # also, if exposing the alarm entity to homekit, you cannot specify the features that are supported
  # (so it will allow setting the alarm to home (stay), away, night or off)
  # neither this package, olarm, my alarm panel or homekit supports the vacation arm mode or a custom bypass command
  # and i don't care about the flatlet's alarm in this case, because it's not exposed to homekit
  - alias: "Set To Stay If Night Mode Activated"
    id: "651adacf-f189-48ef-814a-24a051e60bd5"
    initial_state: true
    trigger:
      - platform: state
        entity_id: alarm_control_panel.home
        to:
          - "armed_night"
    action:
      - service: "alarm_control_panel.alarm_arm_home"
        target:
          entity_id: alarm_control_panel.home
        data:
          code: !secret alarm_code
