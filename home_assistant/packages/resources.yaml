template:
  - binary_sensor:
      - name: "Grid Feed"
        device_class: power
        state: "{{ states('sensor.grid_frequency') | int(0) > 0 }}"
        icon: >-
          {% if states('sensor.grid_frequency') | int(0) > 0 %}
            mdi:transmission-tower
          {% else %}
            mdi:transmission-tower-off
          {% endif %}
  - sensor:
      - name: "Home Power"
        unique_id: "ec13fb72-1d08-427a-918b-e7549539a1be"
        unit_of_measurement: W
        device_class: power
        # battery power goes positive and negative (postive power means the battery is charging)
        state: "{{ states('sensor.grid_power') | int(0) + states('sensor.pv_power') | int(0) - states('sensor.battery_power') | int(0) }}"
      - name: "Home Power kW"
        unique_id: "0d70dd0f-a7e4-416b-a293-cb1d518bdfcf"
        unit_of_measurement: kW
        device_class: power
        state: "{{ ((states('sensor.home_power') | int(0)) / 1000) | round(3) }}"
      - name: "Solar Reserve"
        unique_id: "cdff01dd-8401-4c0e-a661-1a72d74dbb01"
        unit_of_measurement: W
        device_class: power
        state: >-
          {% set battery_threshold = 100 %}
          {% set pv_threshold = 10 %}
          {% set pv_potential = states('sensor.power_production_now') | int(0) %}
          {% set pv_power = states('sensor.pv_power_filtered') | int(0) %}
          {% set battery_power = states('sensor.battery_power_filtered') | int(0) %}
          {% if (pv_power > pv_potential and pv_power > pv_threshold) or (pv_power > pv_threshold and battery_power < -battery_threshold) %}
            0
          {% elif pv_potential > 0 %}
            {{ pv_potential - pv_power }}
          {% else %}
            0
          {% endif %}
      - name: "Solar Reserve kW"
        unique_id: "72bffd22-61c2-41f8-93d5-9dd79e60afc9"
        unit_of_measurement: kW
        device_class: power
        state: "{{ ((states('sensor.solar_reserve') | int(0)) / 1000) | round(3) }}"
      - name: "Solar Consumption Percentage"
        unique_id: "8b6d53fb-7111-4311-9f1c-e1eab4520499"
        icon: mdi:solar-power
        unit_of_measurement: "%"
        state: >
          {% set battery_threshold = 100 %}
          {% set pv_threshold = 10 %}
          {% set pv_potential = states('sensor.power_production_now') | int(0) %}
          {% set pv_power = states('sensor.pv_power_filtered') | int(0) %}
          {% set battery_power = states('sensor.battery_power_filtered') | int(0) %}
          {% if (pv_power > pv_potential and pv_power > pv_threshold) or (pv_power > pv_threshold and battery_power < -battery_threshold) %}
            100
          {% elif pv_potential > 0 %}
            {{ (pv_power / pv_potential * 100) | round(0) }}
          {% else %}
            0
          {% endif %}
      - name: "Solar Reserve Percentage"
        unique_id: "e60c25f9-22d2-435b-8b78-81502cc4a059"
        icon: mdi:solar-power
        unit_of_measurement: "%"
        state: >
          {% if states('sensor.power_production_now') | int(0) > 0 %}
            {{ 100 - states('sensor.solar_consumption_percentage') | int(0) }}
          {% else %}
            0
          {% endif %}
      - name: "Battery Status"
        unique_id: "74d66740-f331-4ff8-81ac-42c5b25d8ba9"
        icon: >-
          {% set state = states('sensor.battery_state_of_charge') | int(0) %}
          {% set charging = "-charging" if states('sensor.battery_status') == "Charging" else "" %}
          {% set suffix = ((state + 5) // 10) * 10 %}
          {# empty #}
          {% if suffix <= 0 %}
            mdi:battery-alert-variant-outline
          {# full #}
          {% elif suffix == 100 %}
            {# choose the right full battery #}
            {% if charging != "" %}
              mdi:battery-charging-100
            {% else %}
              mdi:battery
            {% endif %}
          {# everything in between #}
          {% else %}
            mdi:battery{{ charging }}-{{ suffix }}
          {% endif %}
        state: >
          {%- set threshold = 100 -%}
          {%- set battery_power = states('sensor.battery_power_filtered') | int(0) -%}
          {%- if battery_power > threshold -%}
            Charging
          {%- elif battery_power < -threshold -%}
            Discharging
          {%- else -%}
            Trickling
          {%- endif %}
      # https://community.home-assistant.io/t/template-sensor-using-this-variable/420200/30
      - name: "Battery Time To Full"
        unique_id: "af3949fd-fb4b-4b9c-b92a-e2f744c180a0"
        device_class: duration
        unit_of_measurement: s
        state: >
          {% set battery_status = states('sensor.battery_status') %}
          {% set rate = states('sensor.battery_change_of_charge') | float(0) | abs %}
          {% set current_charge = states('sensor.battery_state_of_charge') | float(0) %}
          {% if battery_status == 'Charging' %}
            {{ (100 - current_charge) * 60 * 60 / rate }}
          {% else %}
            0
          {% endif %}
        attributes:
          time_when_full: >-
            {% set battery_status = states('sensor.battery_status') %}
            {% set rate = states('sensor.battery_change_of_charge') | float(0) | abs %}
            {% set current_charge = states('sensor.battery_state_of_charge') | float(0) %}
            {% if battery_status == 'Charging' -%}
              {% set seconds_to_full = (current_charge - 20) * 60 * 60 / rate %}
              {{ now() + timedelta(seconds=seconds_to_full) }}
            {% else %}
              {{ 0 | as_datetime }}
            {% endif %}
      - name: "Battery Time To Empty"
        unique_id: "ecc75099-6fbf-4733-96a3-90b743a66dde"
        device_class: duration
        unit_of_measurement: s
        state: >
          {% set battery_status = states('sensor.battery_status') %}
          {% set rate = states('sensor.battery_change_of_charge') | float(0) | abs %}
          {% set current_charge = states('sensor.battery_state_of_charge') | float(0) %}
          {% if battery_status == 'Discharging' -%}
            {{ (current_charge - 20) * 60 * 60 / rate }}
          {% else %}
            0
          {% endif %}
        attributes:
          time_when_empty: >-
            {% set battery_status = states('sensor.battery_status') %}
            {% set rate = states('sensor.battery_change_of_charge') | float(0) | abs %}
            {% set current_charge = states('sensor.battery_state_of_charge') | float(0) %}
            {% if battery_status == 'Discharging' -%}
              {% set seconds_to_empty = (current_charge - 20) * 60 * 60 / rate %}
              {{ now() + timedelta(seconds=seconds_to_empty) }}
            {% else %}
              {{ 0 | as_datetime }}
            {% endif %}
      - name: "Solar Production Peak Today"
        unique_id: "8eb2701b-522d-436d-af68-7f86e27c20ad"
        icon: mdi:clock-outline
        state: "{{ (states('sensor.power_highest_peak_time_today') | as_datetime | as_local).strftime('%H:%m') }}"
      - name: "Solar Production Peak Tomorrow"
        unique_id: "f3797db7-8377-49f0-96ce-ddd40dd519bd"
        icon: mdi:clock-outline
        state: "{{ (states('sensor.power_highest_peak_time_tomorrow') | as_datetime | as_local).strftime('%H:%m') }}"
      - name: "Solar Energy Utilisation Today"
        unique_id: "33e98696-bb21-4e07-9487-98956c39ef00"
        icon: mdi:solar-power-variant-outline
        unit_of_measurement: "%"
        state: >
          {% set consumption = states('sensor.daily_solar_energy_consumption') | float(0) %}
          {% set production = states('sensor.energy_production_today') | float(0) %}
          {{ min((consumption / production * 100) | int(0), 100) }}

sensor:
  - platform: derivative
    source: sensor.battery_state_of_charge
    name: "Battery Change of Charge"
    round: 1
    unit_time: h
    unit: "%/h"
    time_window: "00:05:00"
  # digital power meter in db
  - platform: integration
    unique_id: "0e503fd7-9ae9-446b-8c73-28d8068b69eb"
    name: "Total Electricity Consumption"
    source: sensor.current_power
    unit_prefix: k
    unit_time: h
    method: left
    round: 3
  - platform: integration
    unique_id: "a2cc64a7-6d41-44cf-8f0f-ca6f89edba22"
    name: "Home Energy"
    source: sensor.home_power
    unit_prefix: k
    unit_time: h
    method: left
    round: 3
  - platform: template
    sensors:
      monthly_grid_energy_consumption_forecast:
        unique_id: "5a0d7a1b-0bbd-42b0-9b21-5daf97eeade0"
        unit_of_measurement: "kWh"
        # alternative:
        # {{ ((now().replace(day=1) + timedelta(days=31)).replace(day=1) - timedelta(days=1)).day }}
        # from: https://community.home-assistant.io/t/calculate-estimated-monthly-kwh-value/558816/4
        value_template: >
          {% set now = now() %}
          {% set month = now.month %}
          {% set year = now.year %}
          {% set days = None %}
          {# feb: leap years #}
          {% if month == 2 and year is divisibleby 4 and not year is divisibleby 400 %}
            {% set days = 29 %}
          {# jan, mar, may, jul, aug, oct, dec #}
          {% elif month in [1,3,5,7,8,10,12] %}
            {% set days = 31 %}
          {# apr, jun, sep, nov #}
          {% elif month in [4,6,9,11] %}
            {% set days = 30 %}
          {# feb #}
          {% else %}
            {% set days = 28 %}
          {% endif %}
          {{ ((states('sensor.monthly_grid_energy_consumption') | int) / now.day * days) | round(3) }}
      monthly_home_energy_consumption_forecast:
        unique_id: "9a1c2a4e-76cd-416d-8680-fe1ea588f254"
        unit_of_measurement: "kWh"
        value_template: >
          {% set n = now() %}
          {% set days = ((n.replace(day=1) + timedelta(days=-31)).replace(day=1) - timedelta(days=1)).day %}
          {{ ((states('sensor.monthly_home_energy_consumption') | int) / n.day * days) | round(3) }}
  - platform: filter
    unique_id: "a6c6e405-2939-43ae-a8fc-e63f5390eda6"
    name: "PV Power Filtered"
    entity_id: sensor.pv_power
    filters:
      filter: lowpass
      time_constant: 10
      precision: 0
  - platform: filter
    unique_id: "963000a0-5cbb-4b11-91f9-753bedb4f576"
    name: "Battery Power Filtered"
    entity_id: sensor.battery_power
    filters:
      filter: lowpass
      time_constant: 10
      precision: 0
  - platform: history_stats
    name: Daily Grid Feed Outage Time
    entity_id: binary_sensor.grid_feed
    state: "off"
    type: time  # duration
    start: "{{ now().replace(hour=0, minute=0, second=0) }}"
    end: "{{ now() }}"

mqtt:
  binary_sensor:
    # https://mosquitto.org/man/mosquitto-conf-5.html#idm45770162182128
    - name: SolarAssistant Bridge
      unique_id: "58287276-4eef-4d63-8ec1-8a5638731a0d"
      state_topic: $SYS/broker/connection/homeassistant.SolarAssistant/state
      payload_on: "1"
      payload_off: "0"
      device_class: connectivity
      icon: mdi:lan-connect

utility_meter:
  daily_grid_energy_consumption:
    unique_id: "cb11e11e-259d-43dc-bc65-a9752b0bd31a"
    source: sensor.grid_energy_in
    cycle: daily
  monthly_grid_energy_consumption:
    unique_id: "be9b3cac-80e0-4d59-8557-403d17100b22"
    source: sensor.grid_energy_in
    cycle: monthly
  daily_home_energy_consumption:
    unique_id: "765e119e-60ef-4e0b-87f0-e7d64adad81a"
    source: sensor.home_energy
    cycle: daily
  monthly_home_energy_consumption:
    unique_id: "ffcf90f5-5f22-47be-a389-8e74876ecead"
    source: sensor.home_energy
    cycle: monthly
  # why not just use sensor.pv_energy directly? because it's not cumulative per day, but resets it seemingly random times
  daily_solar_energy_consumption:
    unique_id: "c63e814c-4d6c-455c-bb2c-7f557a3af075"
    source: sensor.pv_energy
    cycle: daily

input_boolean:
  # avoid jitter when we're at 100% and the battery is trickling
  # let the batter drop to 90% or less before we'll notify again at 100%
  full_battery_notification_governor:
    name: Full Battery Notification Governor
    icon: mdi:speedometer

automation:
  - alias: "Notify If Grid Feed Status Changed"
    id: "b233b973-cf9b-44b5-94e4-5f0813e6eefa"
    initial_state: true
    trigger:
      - platform: state
        entity_id: binary_sensor.grid_feed
    action:
      - service: notify.mobile_app_ceres
        data:
          title: "Home"
          message: >-
            {% set after = "" %}
            {% set seconds = (as_timestamp(utcnow()) - as_timestamp(trigger.from_state.last_changed)) | int %}
            {% if seconds < 60 %}
              {% set after = seconds ~ " sec" %}
            {% elif seconds < 60*60 %}
              {% set after = seconds // 60 ~ " min" %}
            {% else %}
              {% set h = seconds // (60*60) %}
              {% set m = min(((seconds / (60*60) - seconds // (60*60)) * 60) | round(0), 59) %}
              {% if m < 10 %}
                {% set after = h ~ "h0" ~ m %}
              {% else %}
                {% set after = h ~ "h" ~ m %}
              {% endif %}
            {% endif %}
            The grid feed has been {{ 'restored after ' ~  after ~ '.' if is_state('binary_sensor.grid_feed', 'on') else 'cut.' }}
          data:
            group: "home-electricity"
            url: homeassistant://navigate/lovelace/resources
  - alias: "Update Backup Power Warning Light If Grid Feed Status Changed"
    id: "e6ddb31c-3723-429d-a6c4-38268b831ba9"
    initial_state: true
    trigger:
      - platform: state
        entity_id: binary_sensor.grid_feed
        to: "on"
    condition:
      - condition: state
        entity_id: light.foyer
        state: "on"
    action:
      - service: light.turn_off
        target:
          entity_id: light.foyer
  - alias: "Set Backup Power Warning Light Brightness"
    id: "09697150-0bf0-4dc7-9d6d-fbc5ac6cbdc7"
    initial_state: true
    trigger:
      - platform: state
        entity_id: binary_sensor.grid_feed
        to: "off"
      - platform: state
        entity_id: sensor.battery_state_of_charge
      - platform: state
        entity_id: binary_sensor.anybody_home
        to: "on"
    condition:
      - condition: state
        entity_id: binary_sensor.grid_feed
        state: "off"
      - condition: state
        entity_id: binary_sensor.anybody_home
        state: "on"
      - condition: time
        after: "05:00:00"
        before: "23:00:00"
    action:
      - service: light.turn_on
        target:
          entity_id: light.foyer
        data:
          profile: night
          # the function maps the state of charge range [100,30] of the battery to the brightness range [2,100] of the light
          # it's a linear function with a negative gradient
          brightness_pct: >-
            {% set state = states('sensor.battery_state_of_charge') | int(0) %}
            {# set state_bracketed = (state | int(0) + 5) // 10 * 10 #}
            {% set brightness = (-98/70*state + 142) | round(0) %}
            {{ min(brightness, 100) }}
  - alias: "Send Backup Power Battery Update"
    id: "0c451149-cda2-4b52-b714-f866034568d4"
    initial_state: true
    trigger:
      - platform: template
        # a multiple of 10
        value_template: >-
          {% set battery_soc = states('sensor.battery_state_of_charge') | int(0) %}
          {# we have a critical alert for when we reach 35% #}
          {{ battery_soc == battery_soc // 10 * 10 and battery_soc > 35 }}
    condition:
      - condition: state
        entity_id: input_boolean.full_battery_notification_governor
        state: "off"
    action:
      - variables:
          battery_soc: "{{ states('sensor.battery_state_of_charge') | int(0) }}"
          battery_status: "{{ states('sensor.battery_status') | lower }}"
      - service: notify.mobile_app_ceres
        data:
          title: "Home"
          message: >-
            {# we're assuming we never get to 0% SOC – not coding for that edge case; it will work, but the working will be awkward #}
            The backup power battery is {{ 'at ' ~ battery_soc ~ '% and ' ~ battery_status if battery_soc < 100 else 'fully charged.' }}
          data:
            group: "home-electricity"
            url: homeassistant://navigate/lovelace/resources
      # on when full, off when 90
      # this is basically hysteresis
      # https://www.home-assistant.io/integrations/threshold/
      - if:
          - condition: template
            value_template: "{{ battery_soc == 100 }}"
        then:
          - service: input_boolean.turn_on
            target:
              entity_id: input_boolean.full_battery_notification_governor
  - alias: "Reset Full Battery Notification Governor"
    id: "0ec6fde8-8919-4784-99f4-e7a0ffc7c71f"
    initial_state: true
    trigger:
      - platform: numeric_state
        entity_id: sensor.battery_state_of_charge
        below: 91
    action:
      - service: input_boolean.turn_off
        target:
          entity_id: input_boolean.full_battery_notification_governor
  - alias: "Backup Power Battery Critical Alert"
    id: "e40cf655-f2fd-4c12-91ca-1a4775c8ae7a"
    initial_state: true
    trigger:
      - platform: numeric_state
        entity_id: sensor.battery_state_of_charge
        below: 31
    condition:
      # we don't use a condition for whether someone's home – we always want to know if this happens
      - condition: template
        value_template: "{{ states('sensor.battery_status') | lower == 'discharging' }}"
    action:
      - service: notify.mobile_app_ceres
        data:
          title: "Home"
          message: >-
            {% set battery_soc = states('sensor.battery_state_of_charge') | int(0) %}
            {% set battery_status = states('sensor.battery_status') | lower %}
            The backup power battery is critical at {{ battery_soc }}% and {{ battery_status }}.
          data:
            group: "home-electricity"
            url: homeassistant://navigate/lovelace/resources
            push:
              sound:
                name: default
                critical: 1
                volume: 1.0
  - alias: "High Inverter Load Alert"
    id: "fb0e42ad-c503-4e94-92d6-e70c359c79bc"
    initial_state: true
    trigger:
      # https://mybroadband.co.za/forum/threads/essential-vs-non-essential-items-on-inverter-explain-please.1185382/
      - platform: numeric_state
        entity_id: sensor.load_percentage
        above: 79
    condition:
      # we think high load is only an issue of there isn't a grid feed for non-essentials to fall back to
      # we don't use a condition for whether someone's home – we always want to know if this happens
      - condition: state
        entity_id: binary_sensor.grid_feed
        state: "off"
    action:
      - service: notify.mobile_app_ceres
        data:
          title: "Home"
          message: >-
            {% set load_percentage = states('sensor.load_percentage') | int(0) %}
            The backup power inverter load is critical at {{ load_percentage }}%. Consider reducing consumption!
          data:
            group: "home-electricity"
            url: homeassistant://navigate/lovelace/resources
            push:
              sound:
                name: default
                critical: 1
                volume: 1.0
  - alias: "Notify If SolarAssistant MQTT Bridge Status Changed"
    id: "464bc626-ff8d-4f59-88af-71f2b557e69b"
    initial_state: true
    trigger:
      - platform: state
        entity_id: binary_sensor.solarassistant_bridge
    action:
      - service: notify.mobile_app_ceres
        data:
          title: "Home"
          message: >-
            {% set after = "" %}
            {% set seconds = (as_timestamp(utcnow()) - as_timestamp(trigger.from_state.last_changed)) | int %}
            {% if seconds < 60 %}
              {% set after = seconds ~ " sec" %}
            {% elif seconds < 60*60 %}
              {% set after = seconds // 60 ~ " min" %}
            {% else %}
              {% set h = seconds // (60*60) %}
              {% set m = min(((seconds / (60*60) - seconds // (60*60)) * 60) | round(0), 59) %}
              {% if m < 10 %}
                {% set after = h ~ "h0" ~ m %}
              {% else %}
                {% set after = h ~ "h" ~ m %}
              {% endif %}
            {% endif %}
            The SolarAssistant bridge has been {{ 'reconnected after ' ~  after ~ '.' if is_state('binary_sensor.solarassistant_bridge', 'on') else 'disconnected.' }}
          data:
            group: "home-electricity"
            url: homeassistant://navigate/lovelace/devices
