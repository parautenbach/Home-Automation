# https://andrewmarsh.com/software/sunpath3d-web/
# 
# Frequently Asked Questions for the Home Assistant Energy Dashboard:
# https://gist.github.com/langestefan/acbf7e42b15b302e9aacc08663039e57

homeassistant:
  customize:
    sensor.daily_grid_energy_consumption:
      friendly_name: Daily Grid Energy Consumption
      icon: mdi:power-plug
    sensor.monthly_grid_energy_consumption:
      friendly_name: Daily Grid Energy Consumption  # keywords: power plug guage light alert flash
      icon: mdi:power-plug
    # digital power meter in db
    sensor.total_electricity_consumption:
      device_class: energy
    sensor.monthly_grid_energy_consumption_forecast:
      friendly_name: Monthly Grid Energy Consumption Forecast
      icon: mdi:trending-up
    sensor.daily_solar_energy_consumption:
      state_class: total_increasing
    sensor.solar_energy_utilisation_today:
      state_class: total_increasing
    sensor.geyser_consumption_share:
      state_class: total_increasing
    sensor.daily_grid_feed_outage_time:
      state_class: total_increasing
    sensor.average_solar_energy_forecast_today:
      state_class: total
    sensor.battery_state_of_charge:
      state_class: measurement
    sensor.battery_change_of_charge:
      icon: mdi:delta
    binary_sensor.grid_charge_point_status:
      icon: mdi:transmission-tower
    climate.living_room_ac:
      non_essential: True
    climate.main_bedroom_ac:
      non_essential: True

binary_sensor:
  - platform: template
    sensors:
      # note: this refers to the national grid (aka eskom)
      electricity_feed:
        friendly_name: "Electricity"
        # https://www.home-assistant.io/integrations/binary_sensor/#device-class
        device_class: power
        value_template: >-
          {{ not is_state_attr('sensor.home_assistant_server_battery', 'status', 'Discharging') }}
        icon_template: >-
          {% if is_state_attr('sensor.home_assistant_server_battery', 'status', 'Discharging') %}
            mdi:power-plug-off
          {% else %}
            mdi:power-plug
          {% endif %}

template:
  - binary_sensor:
      - name: "Grid Feed"
        unique_id: "66590cb5-102a-4399-8d05-24ff17b96aba"
        state: "{{ states('sensor.grid_frequency') | int(0) > 0 }}"
        device_class: power
        icon: >-
          {% if states('sensor.grid_frequency') | int(0) > 0 %}
            mdi:transmission-tower
          {% else %}
            mdi:transmission-tower-off
          {% endif %}
  - sensor:
      # for charting purposes
      - name: "Grid Feed Outage Number"
        unique_id: "bd43dcb2-4c3b-4fd5-952c-a4a790634a1c"
        state: "{{ 0 if is_state('binary_sensor.grid_feed', 'on') else 1 }}"
      # want to save on state updates to the db?
      # cannot change this to a trigger-based sensor, since there's no one sensor that will always trigger
      # could use a time pattern trigger, but then we can just as well leave it as is
      - name: "Home Power"
        unique_id: "ec13fb72-1d08-427a-918b-e7549539a1be"
        unit_of_measurement: W
        device_class: power
        # battery power goes positive and negative (postive power means the battery is charging)
        state: "{{ states('sensor.grid_power') | int(0) + states('sensor.pv_power') | int(0) - states('sensor.battery_power') | int(0) }}"
      - name: "Home Power kW"
        unique_id: "0d70dd0f-a7e4-416b-a293-cb1d518bdfcf"
        unit_of_measurement: kW
        device_class: power
        state: "{{ ((states('sensor.home_power') | int(0)) / 1000) | round(3) }}"
      - name: "Solar Reserve"
        unique_id: "cdff01dd-8401-4c0e-a661-1a72d74dbb01"
        unit_of_measurement: W
        device_class: power
        state: >-
          {% set battery_threshold = 100 %}
          {% set pv_threshold = 10 %}
          {% set pv_potential = states('sensor.power_production_now') | int(0) %}
          {% set pv_power = states('sensor.pv_power_filtered') | int(0) %}
          {% set battery_power = states('sensor.battery_power_filtered') | int(0) %}
          {% if (pv_power > pv_potential and pv_power > pv_threshold) or
                (pv_power > pv_threshold and battery_power < -battery_threshold) or
                (states('sensor.battery_state_of_charge') | int(0) < 100) %}
            0
          {% elif pv_potential > 0 %}
            {{ pv_potential - pv_power }}
          {% else %}
            0
          {% endif %}
      - name: "Solar Reserve kW"
        unique_id: "72bffd22-61c2-41f8-93d5-9dd79e60afc9"
        unit_of_measurement: kW
        device_class: power
        state: "{{ ((states('sensor.solar_reserve') | int(0)) / 1000) | round(3) }}"
      - name: "Solar Consumption Percentage"
        unique_id: "8b6d53fb-7111-4311-9f1c-e1eab4520499"
        icon: mdi:solar-power
        unit_of_measurement: "%"
        state: >
          {% set battery_threshold = 100 %}
          {% set pv_threshold = 10 %}
          {% set pv_potential = states('sensor.power_production_now') | int(0) %}
          {% set pv_power = states('sensor.pv_power_filtered') | int(0) %}
          {% set battery_power = states('sensor.battery_power_filtered') | int(0) %}
          {% if (pv_power > pv_potential and pv_power > pv_threshold) or
                (pv_power > pv_threshold and battery_power < -battery_threshold) or
                (states('sensor.battery_state_of_charge') | int(0) < 100) %}
            100
          {% elif pv_potential > 0 %}
            {{ (pv_power / pv_potential * 100) | round(0) }}
          {% else %}
            0
          {% endif %}
      - name: "Solar Reserve Percentage"
        unique_id: "e60c25f9-22d2-435b-8b78-81502cc4a059"
        icon: mdi:solar-power
        unit_of_measurement: "%"
        state: >
          {% if states('sensor.power_production_now') | int(0) > 0 %}
            {{ 100 - states('sensor.solar_consumption_percentage') | int(0) }}
          {% else %}
            0
          {% endif %}
      - name: "Battery Status"
        unique_id: "74d66740-f331-4ff8-81ac-42c5b25d8ba9"
        icon: >-
          {% set state = states('sensor.battery_state_of_charge') | int(0) %}
          {% set charging = "-charging" if states('sensor.battery_status') == "Charging" else "" %}
          {% set suffix = ((state + 5) // 10) * 10 %}
          {# battery empty #}
          {% if suffix <= 0 %}
            mdi:battery-alert-variant-outline
          {# full #}
          {% elif suffix == 100 %}
            {# choose the right full battery #}
            {% if charging != "" %}
              mdi:battery-charging-100
            {% else %}
              mdi:battery
            {% endif %}
          {# everything in between #}
          {% else %}
            mdi:battery{{ charging }}-{{ suffix }}
          {% endif %}
        state: >
          {%- set threshold = 100 -%}
          {%- set battery_power = states('sensor.battery_power_filtered') | int(0) -%}
          {%- if battery_power > threshold -%}
            Charging
          {%- elif battery_power < -threshold -%}
            Discharging
          {%- else -%}
            Trickling
          {%- endif %}
      # https://community.home-assistant.io/t/template-sensor-using-this-variable/420200/30
      - name: "Battery Time To Full"
        unique_id: "af3949fd-fb4b-4b9c-b92a-e2f744c180a0"
        device_class: duration
        unit_of_measurement: s
        state: >
          {% set battery_status = states('sensor.battery_status') %}
          {% set rate = states('sensor.battery_change_of_charge') | float(0) | abs %}
          {% set current_charge = states('sensor.battery_state_of_charge') | float(0) %}
          {% if battery_status == 'Charging' and rate != 0 %}
            {{ (100 - current_charge) * 60 * 60 / rate }}
          {% else %}
            0
          {% endif %}
        attributes:
          time_when_full: >-
            {% set battery_status = states('sensor.battery_status') %}
            {% set rate = states('sensor.battery_change_of_charge') | float(0) | abs %}
            {% set current_charge = states('sensor.battery_state_of_charge') | float(0) %}
            {% if battery_status == 'Charging' and rate != 0 -%}
              {% set seconds_to_full = (100 - current_charge) * 60 * 60 / rate %}
              {{ now() + timedelta(seconds=seconds_to_full) }}
            {% else %}
              {{ 0 | as_datetime }}
            {% endif %}
          time_when_full_relative: >-
            {% set battery_status = states('sensor.battery_status') %}
            {% set rate = states('sensor.battery_change_of_charge') | float(0) | abs %}
            {% set current_charge = states('sensor.battery_state_of_charge') | float(0) %}
            {% set time_when_full = 0 | as_datetime %}
            {% if battery_status == 'Charging' and rate != 0 -%}
              {% set seconds_to_full = (100 - current_charge) * 60 * 60 / rate %}
              {% set time_when_full = now() + timedelta(seconds=seconds_to_full) %}
            {% endif %}
            {% if time_when_full > today_at() + timedelta(days=2) %}
              {{ time_when_full.strftime('%A at %H:%M') }}
            {% elif time_when_full > today_at() + timedelta(days=1) %}
              {{ time_when_full.strftime('Tomorrow at %H:%M') }}
            {% else %}
              {{ time_when_full.strftime('Today at %H:%M') }}
            {% endif %}
      - name: "Battery Time To Shutdown Threshold"
        unique_id: "ecc75099-6fbf-4733-96a3-90b743a66dde"
        device_class: duration
        unit_of_measurement: s
        state: >
          {% set threshold = states('number.output_shutdown_capacity') | int(0) %}
          {% set battery_status = states('sensor.battery_status') %}
          {% set rate = states('sensor.battery_change_of_charge') | float(0) | abs %}
          {% set current_charge = states('sensor.battery_state_of_charge') | float(0) %}
          {% if battery_status == 'Discharging' -%}
            {{ (current_charge - threshold) * 60 * 60 / rate }}
          {% else %}
            0
          {% endif %}
        attributes:
          time_when_at_shutdown_threshold: >-
            {% set threshold = states('number.output_shutdown_capacity') | int(0) %}
            {% set battery_status = states('sensor.battery_status') %}
            {% set rate = states('sensor.battery_change_of_charge') | float(0) | abs %}
            {% set current_charge = states('sensor.battery_state_of_charge') | float(0) %}
            {% if battery_status == 'Discharging' -%}
              {% set seconds_to_threshold = (current_charge - threshold) * 60 * 60 / rate %}
              {{ now() + timedelta(seconds=seconds_to_threshold) }}
            {% else %}
              {{ 0 | as_datetime }}
            {% endif %}
          time_when_at_shutdown_threshold_relative: >-
            {% set threshold = states('number.output_shutdown_capacity') | int(0) %}
            {% set battery_status = states('sensor.battery_status') %}
            {% set rate = states('sensor.battery_change_of_charge') | float(0) | abs %}
            {% set current_charge = states('sensor.battery_state_of_charge') | float(0) %}
            {% set time_when_at_threshold = 0 | as_datetime %}
            {% if battery_status == 'Discharging' -%}
              {% set seconds_to_threshold = (current_charge - threshold) * 60 * 60 / rate %}
              {% set time_when_at_threshold = now() + timedelta(seconds=seconds_to_threshold) %}
            {% endif %}
            {% if time_when_at_threshold > today_at() + timedelta(days=2) %}
              {{ time_when_at_threshold.strftime('%A at %H:%M') }}
            {% elif time_when_at_threshold > today_at() + timedelta(days=1) %}
              {{ time_when_at_threshold.strftime('Tomorrow at %H:%M') }}
            {% else %}
              {{ time_when_at_threshold.strftime('Today at %H:%M') }}
            {% endif %}
      - name: "Solar Production Peak Today"
        unique_id: "8eb2701b-522d-436d-af68-7f86e27c20ad"
        icon: mdi:clock-outline
        state: "{{ (states('sensor.power_highest_peak_time_today') | as_datetime | as_local).strftime('%H:%m') }}"
      - name: "Solar Production Peak Tomorrow"
        unique_id: "f3797db7-8377-49f0-96ce-ddd40dd519bd"
        icon: mdi:clock-outline
        state: "{{ (states('sensor.power_highest_peak_time_tomorrow') | as_datetime | as_local).strftime('%H:%m') }}"
      - name: "Solar Energy Utilisation Today"
        unique_id: "33e98696-bb21-4e07-9487-98956c39ef00"
        unit_of_measurement: "%"
        state: >
          {% set consumption = states('sensor.daily_solar_energy_consumption') | float(0) %}
          {% set production = states('sensor.average_solar_energy_forecast_today') | float(0) %}
          {% if production == 0.0 %}
            0
          {% else %}
            {{ min((consumption / production * 100) | int(0), 100) }}
          {% endif %}
        icon: >-
          {% set consumption = states('sensor.daily_solar_energy_consumption') | float(0) %}
          {% set production = states('sensor.average_solar_energy_forecast_today') | float(0) %}
          {% set yield = 0 %}
          {% if production != 0.0 %}
            {% set yield = min((consumption / production * 100) | int(0), 100) %}
          {% endif %}
          {% set index = (yield / 12.5) | int(0) %}
          {% if 0 < index <= 8 %}
            mdi:circle-slice-{{ index }}
          {% else %}
            mdi:circle-outline
          {% endif %}
      - name: "Solar Production Share"
        unique_id: "7dabd873-d811-4201-84a5-3f507d5b619b"
        unit_of_measurement: "%"
        state: >-
          {% set solar = states('sensor.daily_solar_energy_consumption') | float(0) -%}
          {% set grid = states('sensor.daily_grid_energy_consumption') | float(0) -%}
          {% set battery_out = states('sensor.daily_battery_energy_out') | float(0) -%}
          {% set share = 0 %}
          {% if (solar + grid + battery_out) != 0 %}
            {% set share = (solar / (solar + grid + battery_out)) | multiply(100) | round(0) %}
          {% endif %}
          {{ share }}
        icon: >-
          {% set solar = states('sensor.daily_solar_energy_consumption') | float(0) -%}
          {% set grid = states('sensor.daily_grid_energy_consumption') | float(0) -%}
          {% set battery_out = states('sensor.daily_battery_energy_out') | float(0) -%}
          {% set share = 0 %}
          {% if (solar + grid + battery_out) != 0 %}
            {% set share = (solar / (solar + grid + battery_out)) | multiply(100) | round(0) %}
          {% endif %}
          {% set index = (share/12.5) | int(0) %}
          {% if 0 < index <= 8 %}
            mdi:circle-slice-{{ index }}
          {% else %}
            mdi:circle-outline
          {% endif %}
      - name: "Solar Consumption Share"
        unique_id: "590c6a35-b311-4d8f-83df-1b49ee57de5f"
        unit_of_measurement: "%"
        state: >-
          {% set solar = states('sensor.daily_solar_energy_consumption') | float(0) -%}
          {% set grid = states('sensor.daily_grid_energy_consumption') | float(0) -%}
          {% set share = 0 %}
          {% if (solar + grid) != 0 %}
            {% set share = (solar / (solar + grid)) | multiply(100) | round(0) %}
          {% endif %}
          {{ share }}
        icon: >-
          {% set solar = states('sensor.daily_solar_energy_consumption') | float(0) -%}
          {% set grid = states('sensor.daily_grid_energy_consumption') | float(0) -%}
          {% set share = 0 %}
          {% if (solar + grid) != 0 %}
            {% set share = (solar / (solar + grid)) | multiply(100) | round(0) %}
          {% endif %}
          {% set index = (share/12.5) | int(0) %}
          {% if 0 < index <= 8 %}
            mdi:circle-slice-{{ index }}
          {% else %}
            mdi:circle-outline
          {% endif %}
      - name: "Geyser Consumption Share"
        unique_id: "502d81a1-70d7-4b1a-92a8-cf07bc03ac6e"
        unit_of_measurement: "%"
        state: >-
          {% set geyser = states('sensor.daily_geyser_energy_consumption') | float(0) -%}
          {% set home = states('sensor.daily_home_energy_consumption') | float(0) -%}
          {{ (geyser/home) | multiply(100) | round(0) if home > 0 else 0 }}
        icon: >-
          {% set geyser = states('sensor.daily_geyser_energy_consumption') | float(0) -%}
          {% set home = states('sensor.daily_home_energy_consumption') | float(0) -%}
          {% set share = (geyser/home) | multiply(100) | round(0) if home > 0 else 0 %}
          {% set index = (share/12.5) | int(0) %}
          {% if 0 < index <= 8 %}
            mdi:circle-slice-{{ index }}
          {% else %}
            mdi:circle-outline
          {% endif %}
      - name: "Battery Charge Variance"
        unique_id: "1ec45caf-70f4-4e15-b424-a16e86407b49"
        unit_of_measurement: "%"
        state: >-
          {{ states('sensor.battery_state_of_charge') | int(0) - states('sensor.capacity_charge_point') | int(0) }}
        icon: mdi:sigma-lower
      - name: "Resource Widget"
        unique_id: "e4c30e01-2108-42e8-8deb-85afef795199"
        state: "{{ now().isoformat() }}"
        attributes:
          battery_state_of_charge: "{{ states('sensor.battery_state_of_charge') }}"
          capacity_charge_point: "{{ states('sensor.capacity_charge_point') }}"
          pv_power: "{{ states('sensor.pv_power_5min_average') }}"
          solar_reserve_percentage: "{{ states('sensor.solar_reserve_percentage_5min_average') }}"
          home_power: "{{ states('sensor.home_power_5min_average') }}"
          grid_feed: "{{ states('binary_sensor.grid_feed') }}"
          solar_energy_utilisation_today: "{{ states('sensor.solar_energy_utilisation_today') }}"
          solar_energy_forecast_today: >
            {{ [states('sensor.average_solar_energy_forecast_today') | float(0),
                states('sensor.daily_solar_energy_consumption') | float(0)] | max | round(1) }}
          solar_energy_forecast_tomorrow: "{{ states('sensor.energy_production_tomorrow') }}"
          charge_mode: "{{ states('sensor.charge_mode') }}"
      - name: "Inverter Power"
        unique_id: "ec19a13f-de52-4a27-8047-b46b8744a16b"
        state: "{{ states('sensor.home_power') | int(0) - states('sensor.load_power') | int(0) }}"
        icon: mdi:generator-stationary
        device_class: power
        unit_of_measurement: "W"
      - name: "Inverter Efficiency"
        unique_id: "ee3e3151-3357-40f1-b52c-ad11b846bb82"
        # alternative: https://community.home-assistant.io/t/limit-a-value-to-fall-within-a-range/222188
        #   {% set x = -12 %}
        #   {{ ([0, x, 100]|sort)[1] }}
        state: "{{ min(max((states('sensor.load_power') | int(0) / states('sensor.home_power') | int(0)), 0), 1) | multiply(100) | round(0) }}"
        unit_of_measurement: "%"
        icon: mdi:autorenew
        availability: "{{ has_value('sensor.load_power') and has_value('sensor.home_power') and states('sensor.home_power') | int(0) > 0  }}"
        attributes:
          overhead: "{{ states('sensor.home_power') | int(0) - states('sensor.load_power') | int(0) }}"
      - name: "ACs Power"
        unique_id: "d450b906-159f-458d-ad46-0eb8a2b131f5"
        state: "{{ states('sensor.living_room_ac_power') | float(0) + states('sensor.main_bedroom_ac_power') | float(0) }}"
        icon: mdi:air-conditioner
        device_class: power
        unit_of_measurement: W
      - name: "Home Power Other"
        unique_id: "ce771aeb-49ae-4777-816a-2af98c4939d9"
        state: >-
          {% set home = states('sensor.home_power') | float(0) %}
          {% set geyser = states('sensor.geyser_power') | float(0) %}
          {% set outbuilding = states('sensor.outbuilding_power_meter_channel_1_power') | float(0) %}
          {% set acs = states('sensor.acs_power') | float(0) %}
          {{ home - (geyser + outbuilding + acs) }}
        icon: mdi:dots-horizontal
        device_class: power
        unit_of_measurement: W

  # https://community.home-assistant.io/t/trigger-based-template-sensor-using-time-pattern-not-updating/706860
  # https://github.com/home-assistant/core/issues/114195
  # - trigger:
  #   # note: the macro below uses now(), which will cause an automatic update every minute on the minute
  #   #       as well as for the current number entity
  #   - platform: time_pattern
  #     minutes: "/1"
  #   - platform: state
  #     entity_id:
  #       - number.capacity_point_1
  #       - number.capacity_point_2
  #       - number.capacity_point_3
  #       - number.capacity_point_4
  #       - number.capacity_point_5
  #       - number.capacity_point_6
  - sensor:
      - name: "Capacity Charge Point"
        unique_id: "12b69471-fdbc-4f9a-9a75-960545211e3e"
        state: >-
          {%- from 'resources.jinja' import get_current_entity_id -%}
          {{ states(get_current_entity_id('number.capacity_point_')) }}
        attributes:
          current_entity_id: >-
            {%- from 'resources.jinja' import get_current_entity_id -%}
            {{ get_current_entity_id('number.capacity_point_') }}
        # not really, but we get dynamic icons this way
        device_class: battery
        unit_of_measurement: "%"
  # - trigger:
  #   # note: the macro below uses now(), which will cause an automatic update every minute on the minute
  #   #       as well as for the current number entity
  #   - platform: time_pattern
  #     minutes: "/1"
  #   - platform: state
  #     entity_id:
  #       - switch.grid_charge_point_1
  #       - switch.grid_charge_point_2
  #       - switch.grid_charge_point_3
  #       - switch.grid_charge_point_4
  #       - switch.grid_charge_point_5
  #       - switch.grid_charge_point_6
  - binary_sensor:
      - name: "Grid Charge Point Status"
        state: >-
          {%- from 'resources.jinja' import get_current_entity_id -%}
          {{ states(get_current_entity_id('switch.grid_charge_point_')) }}
        attributes:
          current_entity_id: >-
            {%- from 'resources.jinja' import get_current_entity_id -%}
            {{ get_current_entity_id('switch.grid_charge_point_') }}
  - trigger:
    - platform: time_pattern
      seconds: "/10"
    binary_sensor:
      - name: "SolarAssistant Activity"
        state: >-
          {{ states.sensor.solarassistant_activity_counter.last_updated >= now() - timedelta(seconds=15) }}
        device_class: running
  # https://docs.google.com/spreadsheets/d/1bfyoQDx-s5W7BBBhJeABa-aw1v9K8Z9-ETFwj0kDMYE/edit#gid=2129307858
  # https://en.wikipedia.org/wiki/Duck_curve
  - trigger:
    - platform: state
      entity_id: sensor.average_solar_energy_forecast_today
      not_to:
        - "unavailable"
        - "unknown"
    sensor:
      - name: "Charge Mode"
        icon: mdi:tune
        device_class: enum
        state: >-
          {% set forecast = states('sensor.average_solar_energy_forecast_today') | float(0) %}
          {% if 17 <= forecast %}
            {% set mode = 'Very Optimistic' %}
          {% elif 9 <= forecast < 17 %}
            {% set mode = 'Optimistic' %}
          {% elif 4 <= forecast < 9 %}
            {% set mode = 'Pessimistic' %}
          {% elif 0 < forecast < 4 %}
            {# note the 0 < above: if the forecast isn't available, the default value will be zero. in that case, keep the current mode #}
            {% set mode = 'Very Pessimistic' %}
          {% else %}
            {% set mode = this.state %}
          {% endif %}
          {{ mode }}
        attributes:
          settings: >-
            {# 1: 01:00-05:00 #}
            {# 2: 05:00-08:00 #}
            {# 3: 08:00-13:00 #}
            {# 4: 13:00-17:00 #}
            {# 5: 17:00-21:00 #}
            {# 6: 21:00-01:00 #}
            {# (int, bool): (battery soc, grid charge allowed) #}
            {% set mappings =
              {
                'Very Optimistic': {
                    1: (30, 'on'),
                    2: (15, 'off'),
                    3: (20, 'off'),
                    4: (50, 'off'),
                    5: (60, 'on'),
                    6: (50, 'on')
                  },
                'Optimistic': {
                    1: (40, 'on'),
                    2: (35, 'off'),
                    3: (40, 'off'),
                    4: (60, 'off'),
                    5: (70, 'on'),
                    6: (60, 'on')
                  },
                'Pessimistic': {
                    1: (45, 'on'),
                    2: (50, 'on'),
                    3: (55, 'on'),
                    4: (70, 'on'),
                    5: (80, 'on'),
                    6: (75, 'on')
                },
                'Very Pessimistic': {
                    1: (55, 'on'),
                    2: (60, 'on'),
                    3: (65, 'on'),
                    4: (75, 'on'),
                    5: (85, 'on'),
                    6: (85, 'on')
                }
              }
            %}
            {% set forecast = states('sensor.average_solar_energy_forecast_today') | float(0) %}
            {% if 17 <= forecast %}
              {% set mode = 'Very Optimistic' %}
            {% elif 9 <= forecast < 17 %}
              {% set mode = 'Optimistic' %}
            {% elif 4 <= forecast < 9 %}
              {% set mode = 'Pessimistic' %}
            {% elif 0 < forecast < 4 %}
              {# note the 0 < above: if the forecast isn't available, the default value will be zero. in that case, keep the current settings #}
              {% set mode = 'Very Pessimistic' %}
            {% else %}
              {% set mode = this.state %}
            {% endif %}
            {{ mappings[mode] }}
  # solarassistant should actually provide this as a sensor, but they only provide a control
  # don't want to use this in the frontend, in case someone changes it accidentally
  # can still change it if you go to the device though...
  - trigger:
    - platform: state
      entity_id: number.output_shutdown_capacity
    sensor:
      - name: "Output Shutdown Capacity"
        icon: mdi:ray-vertex
        unit_of_measurement: "%"
        state: "{{ states('number.output_shutdown_capacity') }}"
  - trigger:
    - platform: state
      entity_id: sensor.load_power_non_essential
    sensor:
      - name: "Geyser Power"
        icon: mdi:water-boiler
        unit_of_measurement: W
        device_class: power
        state: >-
          {# the geyser is the only device on the non-essential circuit #}
          {# for some reason this sensor reports small negative values when the grid is connected #}
          {% set geyser = states('sensor.load_power_non_essential') | int(0) %}
          {{ geyser if geyser > 0 else 0 }}

sensor:
  # digital power meter in db - measures only grid
  - platform: integration
    unique_id: "0e503fd7-9ae9-446b-8c73-28d8068b69eb"
    name: "Total Electricity Consumption"
    source: sensor.electricity_pulse_counter_current_power
    unit_prefix: k
    unit_time: h
    method: left
    round: 3
  - platform: integration
    unique_id: "a2cc64a7-6d41-44cf-8f0f-ca6f89edba22"
    name: "Home Energy"
    source: sensor.home_power
    unit_prefix: k
    unit_time: h
    method: left
    round: 3
  - platform: integration
    unique_id: "9b9ba816-42f0-437d-aa7a-7014363f5ed5"
    name: "Geyser Energy"
    source: sensor.geyser_power
    unit_prefix: k
    unit_time: h
    method: left
    round: 3
  - platform: integration
    unique_id: "f1d3ef94-1d5c-4c6c-a7bb-7fa72b357dc5"
    name: "Inverter Energy"
    source: sensor.inverter_power
    unit_prefix: k
    unit_time: h
    method: left
    round: 3
  - platform: template
    sensors:
      monthly_grid_energy_consumption_forecast:
        unique_id: "5a0d7a1b-0bbd-42b0-9b21-5daf97eeade0"
        unit_of_measurement: "kWh"
        # alternative:
        # {{ ((now().replace(day=1) + timedelta(days=31)).replace(day=1) - timedelta(days=1)).day }}
        # from: https://community.home-assistant.io/t/calculate-estimated-monthly-kwh-value/558816/4
        value_template: >
          {% set now = now() %}
          {% set month = now.month %}
          {% set year = now.year %}
          {% set days = None %}
          {# feb: leap years #}
          {% if month == 2 and year is divisibleby 4 and not year is divisibleby 400 %}
            {% set days = 29 %}
          {# jan, mar, may, jul, aug, oct, dec #}
          {% elif month in [1,3,5,7,8,10,12] %}
            {% set days = 31 %}
          {# apr, jun, sep, nov #}
          {% elif month in [4,6,9,11] %}
            {% set days = 30 %}
          {# feb #}
          {% else %}
            {% set days = 28 %}
          {% endif %}
          {{ ((states('sensor.monthly_grid_energy_consumption') | float) / now.day * days) | round(3) }}
      monthly_home_energy_consumption_forecast:
        unique_id: "9a1c2a4e-76cd-416d-8680-fe1ea588f254"
        unit_of_measurement: "kWh"
        value_template: >
          {% set n = now() %}
          {% set days = ((n.replace(day=1) + timedelta(days=-31)).replace(day=1) - timedelta(days=1)).day %}
          {{ ((states('sensor.monthly_home_energy_consumption') | float) / n.day * days) | round(3) }}
      battery_change_of_charge:
        unique_id: "0bf9861c-a0e4-4100-b6c6-b8b3a80f9274"
        unit_of_measurement: "%/h"
        value_template: >-
          {# battery is 2 x 5.12kWh #}
          {% set capacity = 10240 %}
          {% set power = states('sensor.battery_power_filtered') | int(0) %}
          {{ (power/capacity*100) | round(2) }}
  - platform: filter
    unique_id: "a6c6e405-2939-43ae-a8fc-e63f5390eda6"
    name: "PV Power Filtered"
    entity_id: sensor.pv_power
    filters:
      filter: lowpass
      time_constant: 10
      precision: 0
  - platform: filter
    unique_id: "963000a0-5cbb-4b11-91f9-753bedb4f576"
    name: "Battery Power Filtered"
    entity_id: sensor.battery_power
    filters:
      filter: lowpass
      time_constant: 10
      precision: 0
  - platform: history_stats
    name: Daily Grid Feed Outage Time
    entity_id: binary_sensor.grid_feed
    state: "off"
    type: time  # duration
    start: "{{ today_at() }}"
    end: "{{ now() }}"
  # https://github.com/Limych/ha-average
  # device class
  - platform: average
    name: Average Solar Energy Forecast Today
    start: '{{ today_at() }}'
    end: '{{ now() }}'
    entities:
      - sensor.energy_production_today
  - platform: statistics
    name: 'PV Power 5min Average'
    entity_id: sensor.pv_power
    state_characteristic: mean
    precision: 0
    sampling_size: 100
    max_age:
      minutes: 5
  - platform: statistics
    name: 'Solar Reserve Percentage 5min Average'
    entity_id: sensor.solar_reserve_percentage
    state_characteristic: mean
    precision: 0
    sampling_size: 100
    max_age:
      minutes: 5
  - platform: statistics
    name: 'Home Power 5min Average'
    entity_id: sensor.home_power
    state_characteristic: mean
    precision: 0
    sampling_size: 100
    max_age:
      minutes: 5
  - platform: statistics
    name: 'Outbuilding Power 1min 90th Percentile'
    entity_id: sensor.outbuilding_power_meter_channel_1_power
    state_characteristic: percentile
    percentile: 90
    precision: 0
    sampling_size: 100
    max_age:
      minutes: 1

mqtt:
  binary_sensor:
    # https://mosquitto.org/man/mosquitto-conf-5.html#idm45770162182128
    - name: SolarAssistant Bridge
      unique_id: "58287276-4eef-4d63-8ec1-8a5638731a0d"
      state_topic: $SYS/broker/connection/homeassistant.SolarAssistant/state
      payload_on: "1"
      payload_off: "0"
      device_class: connectivity
      icon: mdi:lan-connect
  sensor:
    # https://community.home-assistant.io/t/mqtt-stats-measuring-number-of-mqtt-messages-per-time-for-a-topic/224109/3
    - name: SolarAssistant Activity Counter
      unique_id: "c63b23e4-2b85-405a-8d64-b9866875bf0c"
      state_topic: solar_assistant/inverter_1/load_power_essential/state
      value_template: "{{ states('sensor.solarassistant_activity_counter') | int(0) + 1 }}"
      unit_of_measurement: "messages"
      icon: mdi:counter

group:
  automations_to_save_energy:
    name: Automations To Save Energy
    entities:
      - automation.lights_on_upon_low_light
      - automation.open_the_gate_when_arriving_home
      - automation.open_garage_door_when_arriving

utility_meter:
  daily_grid_energy_consumption:
    unique_id: "cb11e11e-259d-43dc-bc65-a9752b0bd31a"
    source: sensor.grid_energy_in
    cycle: daily
  monthly_grid_energy_consumption:
    unique_id: "be9b3cac-80e0-4d59-8557-403d17100b22"
    source: sensor.grid_energy_in
    cycle: monthly
  daily_home_energy_consumption:
    unique_id: "765e119e-60ef-4e0b-87f0-e7d64adad81a"
    source: sensor.home_energy
    cycle: daily
  monthly_home_energy_consumption:
    unique_id: "ffcf90f5-5f22-47be-a389-8e74876ecead"
    source: sensor.home_energy
    cycle: monthly
  # why not just use sensor.pv_energy directly? because it's not cumulative per day, but resets it seemingly random times
  daily_solar_energy_consumption:
    unique_id: "c63e814c-4d6c-455c-bb2c-7f557a3af075"
    source: sensor.pv_energy
    cycle: daily
  daily_battery_energy_in:
    unique_id: "917b2099-8dcf-48f1-a689-178ee2bd0346"
    source: sensor.battery_energy_in
    cycle: daily
  daily_battery_energy_out:
    unique_id: "cafc2bee-06cd-4b60-90eb-66d412a5ec88"
    source: sensor.battery_energy_out
    cycle: daily
  daily_geyser_energy_consumption:
    unique_id: "974cdcbf-61ea-462f-870a-f19e8a36c831"
    source: sensor.geyser_energy
    cycle: daily
  monthly_geyser_energy_consumption:
    unique_id: "9eafc3cb-bdf3-4c37-bdf3-7e84a286319a"
    source: sensor.geyser_energy
    cycle: monthly

input_boolean:
  # avoid jitter when we're around a charge point and the battery is trickling
  # let the batter drop a certain amount or less before we'll notify again at
  # the charge point value, a multiple of 10% or when full
  battery_notification_governor:
    name: Battery Notification Governor
    icon: mdi:speedometer
  set_charge_point_error:
    name: Set Charge Point Error
    icon: mdi:alert-outline
  inverter_temperature_notification_governor:
    name: Inverter Temperature Notification Governor
    icon: mdi:speedometer
  inverter_battery_temperature_notification_governor:
    name: Inverter Battery Temperature Notification Governor
    icon: mdi:speedometer

input_number:
  last_battery_soc_notification:
    min: 0
    max: 100
    unit_of_measurement: "%"

input_text:
  last_charge_mode:
    name: "Last Charge Mode"
    icon: mdi:tune

input_datetime:
  solarassistant_activity_ceased:
    has_date: true
    has_time: true

timer:
  solarassistant_inactivity:
    duration: "00:01:00"
    restore: true

alert:
  solarassistant_inactivity:
    name: "SolarAssistant Inactivity"
    entity_id: binary_sensor.solarassistant_activity
    state: "off"
    repeat: 1  # every 1 min
    skip_first: true  # but not immediately
    can_acknowledge: false
    title: "⚠️ System"
    message: >-
      {% set minutes = (now() - states.binary_sensor.solarassistant_activity.last_updated).total_seconds() | multiply(1/60) | int or 1 %}
      The SolarAssistant bridge's activity has ceased {{ minutes }} min ago.
    done_message: >-
      {% set last_ceased = states('input_datetime.solarassistant_activity_ceased') | as_timestamp %}
      {% set utc_now_ts = utcnow() | as_timestamp %}
      {% set minutes = ((utc_now_ts - last_ceased) // 60) | int %}
      The SolarAssistant bridge's activity has been resumed after {{ minutes }} min.
    data:
      group: "system-electricity"
      url: homeassistant://navigate/lovelace-system/devices
      tag: "solarassistant-activity"
    notifiers:
      - mobile_app_ceres

automation:
  - alias: "Notify If Grid Feed Status Changed"
    id: "b233b973-cf9b-44b5-94e4-5f0813e6eefa"
    initial_state: true
    trigger:
      - platform: state
        entity_id: binary_sensor.grid_feed
    mode: queued
    action:
      - service: notify.family
        data:
          title: "🔌 Energy"
          message: >-
            {% from 'datetime.jinja' import sec_to_hour_and_min %}
            {% set seconds = (as_timestamp(utcnow()) - as_timestamp(trigger.from_state.last_changed)) | int %}
            {% set after = sec_to_hour_and_min(seconds) %}
            The grid feed has been {{ 'restored after ' ~ after ~ '.' if is_state('binary_sensor.grid_feed', 'on') else 'cut. Please mind energy usage.' }}
          data:
            group: "home-electricity"
            url: homeassistant://navigate/lovelace/resources
            tag: "grid-feed-status"
      - service: homeassistant.update_entity
        target:
          entity_id: sensor.eskomsepush

  - alias: "Update Automations When Power Status Changed"
    id: "d322d9a2-9a74-4c10-8c31-110401a8ff31"
    # because we have backup power now
    initial_state: false
    trigger:
      - platform: state
        entity_id: binary_sensor.electricity_feed
        to:
          - "on"
          - "off"
        # we don't want erratic behaviour in case the pulse counter goes offline for a moment
        for:
          seconds: 30
    mode: single
    action:
      # https://community.home-assistant.io/t/using-the-new-for-each/419829
      - service: "automation.turn_{{ 'on' if is_state('binary_sensor.electricity_feed', 'on') else 'off' }}"
        target:
          # remember that these automations have an initial value of true, so this practically (on start-up) has no real effect
          entity_id: "{{ expand('group.automations_to_save_energy') | map(attribute='entity_id') | list }}"

  - alias: "Notify If Electricity Feed Status Changed"
    id: "c021b272-5076-45d4-9e40-e2db20ae66b6"
    initial_state: true
    trigger:
      platform: state
      entity_id: binary_sensor.electricity_feed
    mode: queued
    action:
      - service: notify.family
        data:
          title: "🔌 Energy"
          message: >-
            {% from 'datetime.jinja' import sec_to_hour_and_min %}
            {% set seconds = (as_timestamp(utcnow()) - as_timestamp(trigger.from_state.last_changed)) | int %}
            {% set after = sec_to_hour_and_min(seconds) %}
            The electricity feed has been {{ 'restored after ' ~ after ~ '.' if is_state('binary_sensor.electricity_feed', 'on') else 'cut.' }}
          data:
            group: "home-electricity"
            url: homeassistant://navigate/lovelace/resources
            tag: "electricity-feed-status"

  - alias: "Update Backup Power Warning Light If Grid Feed Status Changed"
    id: "e6ddb31c-3723-429d-a6c4-38268b831ba9"
    initial_state: true
    trigger:
      - platform: state
        entity_id: binary_sensor.grid_feed
        to: "on"
    condition:
      - condition: state
        entity_id: light.foyer
        state: "on"
    action:
      - service: light.turn_off
        target:
          entity_id: light.foyer

  - alias: "Set Backup Power Warning Light Brightness"
    id: "09697150-0bf0-4dc7-9d6d-fbc5ac6cbdc7"
    initial_state: true
    trigger:
      - platform: state
        entity_id: binary_sensor.grid_feed
        to: "off"
      - platform: state
        entity_id: sensor.battery_state_of_charge
      - platform: state
        entity_id: binary_sensor.anybody_home
        to: "on"
    condition:
      - condition: state
        entity_id: binary_sensor.grid_feed
        state: "off"
      - condition: state
        entity_id: binary_sensor.anybody_home
        state: "on"
      - condition: or
        conditions:
          - condition: and
            conditions:
              - condition: time
                after: "21:00:00"
                before: "06:00:00"
              # this means we're not in bed and there's someone around to see the warning light
              - condition: state
                entity_id: light.living_room_lamp
                state: "on"
          # this could be made smarter to account for workdays and using the wake-up time
          # remember this light is also part of the night light group
          - condition: time
            after: "06:00:00"
            before: "21:00:00"
    action:
      - service: light.turn_on
        target:
          entity_id: light.foyer
        data:
          profile: night
          # the function maps the state of charge range [100,30] of the battery to the brightness range [2,100] of the light
          # it's a linear function with a negative gradient
          brightness_pct: >-
            {% set state = states('sensor.battery_state_of_charge') | int(0) %}
            {# make the light changes more pronounced #}
            {% set state_bracketed = (state | int(0) + 5) // 10 * 10 %}
            {# this formula sets 30% charge to 100% brightness and 100% charge to 1% brightness #}
            {# https://docs.google.com/spreadsheets/d/1ndnxCt_XyBRBwG9zdRIUBITEb4C2H2VHPHGBMj3uGic/edit#gid=0 #}
            {% set brightness = (-98/70*state_bracketed + 142) | round(0) %}
            {{ min(brightness, 100) }}

  - alias: "Send Backup Power Battery Update"
    id: "0c451149-cda2-4b52-b714-f866034568d4"
    initial_state: true
    trigger:
      - platform: template
        # a multiple of 10
        value_template: >-
          {% set battery_soc = states('sensor.battery_state_of_charge') | int(0) %}
          {% set charge_point = states('sensor.capacity_charge_point') | int(0) %}
          {# we have a critical alert for very low soc – keep the condition below synced #}
          {{ (battery_soc == battery_soc // 10 * 10 or battery_soc == charge_point) and battery_soc > 20 }}
    condition:
      - condition: state
        entity_id: input_boolean.battery_notification_governor
        state: "off"
      # there's a critical alert that will fire in this case
      - condition: template
        value_template: "{{ states('sensor.battery_charge_variance') | int(0) != -15 }}"
    action:
      - variables:
          battery_soc: "{{ states('sensor.battery_state_of_charge') | int(0) }}"
      - service: notify.mobile_app_ceres
        data:
          title: "🔋 Energy"
          message: >-
            {# we're assuming we will never get to 0% SOC – not coding for that edge case; it will work, but the working will be awkward #}
            {# The backup power battery is {{ 'at ' ~ battery_soc ~ '% and ' ~ battery_status if battery_soc < 100 else 'fully charged.' }} #}
            {% set threshold = states('sensor.capacity_charge_point') %}
            {% if is_state('sensor.battery_status', 'Charging') and battery_soc < 100 %}
              The backup power battery has charged to {{ battery_soc }}% (threshold: {{ threshold }}%).
            {% elif is_state('sensor.battery_status', 'Discharging') and battery_soc < 100 %}
              The backup power battery has discharged to {{ battery_soc }}% (threshold: {{ threshold }}%).
            {% elif is_state('sensor.battery_status', 'Trickling') and battery_soc < 100 %}
              The backup power battery is trickling at {{ battery_soc }}% (threshold: {{ threshold }}%).
            {% else %}
              The backup power battery is fully charged (threshold: {{ threshold }}%).
            {% endif %}
          data:
            group: "home-electricity-battery"
            tag: "backup-power-battery-update"
            # https://companion.home-assistant.io/docs/notifications/notifications-basic#replacing
            url: homeassistant://navigate/lovelace/resources
      - service: input_boolean.turn_on
        target:
          entity_id: input_boolean.battery_notification_governor
      - service: input_number.set_value
        target:
          entity_id: input_number.last_battery_soc_notification
        data:
          value: "{{ states('sensor.battery_state_of_charge') }}"

  - alias: "Reset Battery Notification Governor"
    id: "0ec6fde8-8919-4784-99f4-e7a0ffc7c71f"
    initial_state: true
    trigger:
      - platform: state
        entity_id: sensor.battery_state_of_charge
    condition:
      - condition: template
        value_template: >-
          {# doesn't seem like we need to do the below; first trialling what we have above #}
          {# battery_soc <= current_charge_point - 5 or battery_soc == battery_soc // 10 * 10 #}
          {% set last_battery_soc_notification = states('input_number.last_battery_soc_notification') | int(0) %}
          {% set battery_soc = states('sensor.battery_state_of_charge') | int(0) %}
          {# don't make the delta a multiple of 5 or 10, otherwise we'll have a race condition with the automation that notifies #}
          {{ battery_soc < 95 and (battery_soc - last_battery_soc_notification) | abs > 3 }}
    action:
      - service: input_boolean.turn_off
        target:
          entity_id: input_boolean.battery_notification_governor

  - alias: "Backup Power Battery Critical Alert"
    id: "e40cf655-f2fd-4c12-91ca-1a4775c8ae7a"
    initial_state: true
    trigger:
      - platform: numeric_state
        entity_id: sensor.battery_state_of_charge
        # keep threshold in sync with "Send Backup Power Battery Update"
        below: 21
        for:
          # is 10 min too long?
          # implement a governor?
          minutes: 5
      # this is actually just annoying
      # - platform: numeric_state
      #   entity_id: sensor.battery_state_of_charge
      #   below: 16
      #   for:
      #     minutes: 5
      - platform: state
        entity_id: binary_sensor.grid_feed
        to: "off"
    # we don't use a condition for whether someone's home – we always want to know if this happens
    condition:
      - condition: numeric_state
        entity_id: sensor.battery_state_of_charge
        below: 21
    action:
      - variables:
          battery_soc: "{{ states('sensor.battery_state_of_charge') | int(0) }}"
          message: "The backup power battery's charge is low ({{ battery_soc }}%). Please conserve energy."
      # only a critical sound notification if the grid is off, otherwise just a normal notification
      # the hard limit for the inverter/battery is set to 15%, so it won't got below 15% if the grid is connected
      - choose:
          - conditions:
              - condition: state
                entity_id: binary_sensor.grid_feed
                state: "off"
            sequence:
              - service: notify.family
                data:
                  title: "🪫 Energy"
                  message: "{{ message }}"
                  data:
                    group: "home-electricity"
                    tag: "backup-power-battery-update"
                    url: homeassistant://navigate/lovelace/resources
                    push:
                      sound:
                        name: default
                        critical: 1
                        volume: 0.5
        default:
          - service: notify.family
            data:
              title: "🪫 Energy"
              message: "{{ message }}"
              data:
                group: "home-electricity"
                tag: "backup-power-battery-update"
                url: homeassistant://navigate/lovelace/resources

  - alias: "Turn Off Non-essential Appliances When Critical Battery Threshold Reached"
    id: "7de9f0ac-0135-4594-9133-462fad3914fd"
    initial_state: true
    variables:
      battery_soc: "{{ states('sensor.battery_state_of_charge') | int(0) }}"
      appliances: >-
        {{
          states.sensor
            | selectattr('attributes.non_essential', 'defined')
            | selectattr('attributes.non_essential', 'eq', True)
            | rejectattr('state', 'in', ['unavailable', 'unknown', 'none'])
            | map(attribute='entity_id')
            | list
        }}
    trigger:
      - platform: numeric_state
        entity_id: sensor.battery_state_of_charge
        # keep threshold in sync with "Send Backup Power Battery Update"
        below: 21
        for:
          # combine this automation with above alert?
          minutes: 5
      - platform: state
        entity_id: binary_sensor.grid_feed
        to: "off"
    condition:
      - condition: template
        value_template: >-
          {{ appliances | count > 0 and
             is_state('binary_sensor.grid_feed', 'off') and
             states('sensor.battery_state_of_charge') | int(0) < 21 }}
    action:
      - variables:
          message: >-
            The following non-essential appliances have been turned off due to running solely on backup power and a low battery ({{ battery_soc }}%):
            {%- for a in appliances %}
              - {{ state_attr(b, 'friendly_name') }}
            {%- endfor %}
      - service: homeassistant.turn_off
        target:
          entity_id: "{{ appliances }}"
      - service: notify.family
        data:
          title: "🪫 Energy"
          message: "{{ message }}"
          data:
            group: "home-electricity"
            url: homeassistant://navigate/lovelace/resources

  - alias: "Charging From Grid When Not Supposed To"
    id: "085cfb32-deb1-4a04-af50-9dcd5bfaa9c0"
    initial_state: true
    trigger:
      - platform: numeric_state
        entity_id: sensor.grid_power
        # to use this value in a template, provide an input_number here
        above: 500
        for:
          minutes: 1
    condition:
      - condition: state
        entity_id: binary_sensor.grid_charge_point_status
        state: "off"
        # prevent a false positive should we change the charge point status while high power is being drawn
        for:
          minutes: 5
      - condition: template
        value_template: "{{ states('sensor.battery_state_of_charge') | int(0) > states('sensor.capacity_charge_point') | int(0) }}"
    action:
      - service: notify.mobile_app_ceres
        data:
          title: "⚠️ Energy"
          message: >-
            {% set current_power = states('sensor.grid_power') | int(0) %}
            {% set current_power_with_unit = current_power ~ ' W' if current_power < 1000 else current_power | int(0) | multiply(1/1000) | round(1) ~ ' kW' %}
            {% set for_minutes = trigger.for.seconds // 60 %}
            The backup power system has been continuously charging from the grid for {{ for_minutes }} min, drawing {{ current_power_with_unit }} currently.
          data:
            group: "home-electricity"
            url: homeassistant://navigate/lovelace/resources
            tag: "inverter-battery-temperature"

  - alias: "High Inverter Load Alert"
    id: "fb0e42ad-c503-4e94-92d6-e70c359c79bc"
    initial_state: true
    trigger:
      # https://mybroadband.co.za/forum/threads/essential-vs-non-essential-items-on-inverter-explain-please.1185382/
      - platform: numeric_state
        entity_id: sensor.load_percentage
        above: 84
    condition:
      # we think high load is only an issue of there isn't a grid feed for non-essentials to fall back to
      # we don't use a condition for whether someone's home – we always want to know if this happens
      - condition: state
        entity_id: binary_sensor.grid_feed
        state: "off"
    action:
      - service: notify.family
        data:
          title: "⚠️ Energy"
          message: >-
            {% set load_percentage = states('sensor.load_percentage') | int(0) %}
            {# why does load_power != home_power? #}
            {# why does the battery appear to provide more power than the load sensor shows for consumption? #}
            {# probably due to the inverter itself needing power of a few 100 watt #}
            {% set power = states('sensor.home_power') | float(0) | multiply(1/1000) | round(1) %}
            The backup power system's load is critical at {{ load_percentage }}% ({{ power }} kW). Please reduce consumption immediately to avoid a power outage.
          data:
            group: "home-electricity"
            url: homeassistant://navigate/lovelace-system/devices
            push:
              sound:
                name: default
                critical: 1
                volume: 0.5
      - condition: state
        entity_id: binary_sensor.tenant_present
        state: "on"
      - service: script.turn_on
        target:
          entity_id: script.notify_tenant
        data:
          variables:
            message: "The backup power system's load is critical. Please reduce consumption immediately to avoid a power outage."

  - alias: "Detect When SolarAssistant MQTT Bridge Activity Ceases"
    id: "3febc063-c872-4847-8abb-0ce1a4186887"
    initial_state: true
    trigger:
      - platform: state
        entity_id:
          - binary_sensor.solarassistant_activity
        to: "off"
        # # we had this edge case where the binary sensor was off for less than a second,
        # # so the timer got canceled before it actually started
        # for:
        #   seconds: 5
    mode: single
    action:
      - service: input_datetime.set_datetime
        target:
          entity_id: input_datetime.solarassistant_activity_ceased
        data:
          datetime: "{{ now() }}"
      - service: timer.start
        target:
          entity_id: timer.solarassistant_inactivity
        data:
          # if changed here, change it in "Notify When SolarAssistant MQTT Bridge Activity Ceased" too
          duration: "00:01:00"

  - alias: "Detect When SolarAssistant MQTT Bridge Activity Resumes"
    id: "3b012ea4-cd46-42c1-86cd-84002ce7d2ee"
    initial_state: true
    trigger:
      - platform: state
        entity_id:
          - binary_sensor.solarassistant_activity
        to: "on"
    mode: single
    action:
      - choose:
          - conditions:
              - condition: template
                value_template: >-
                  {% set duration = state_attr('timer.solarassistant_inactivity', 'duration') %}
                  {% set (hours, minutes, seconds) = duration.split(':') | map('int') %}
                  {# the timer's actual runtime seems to be a fraction less than the configured duration #}
                  {% set threshold = minutes*60 + seconds - 1 %}
                  {% set last_ceased = states('input_datetime.solarassistant_activity_ceased') | as_timestamp %}
                  {% set utc_now_ts = utcnow() | as_timestamp %}
                  {{ (utc_now_ts - last_ceased) | int >= threshold }}
            sequence:
              - service: notify.mobile_app_ceres
                data:
                  title: "⚠️ System"
                  message: >-
                    {% set last_ceased = states('input_datetime.solarassistant_activity_ceased') | as_timestamp %}
                    {% set utc_now_ts = utcnow() | as_timestamp %}
                    {% set minutes = ((utc_now_ts - last_ceased) // 60) | int %}
                    The SolarAssistant bridge's activity has been resumed after {{ minutes }} min.
                  data:
                    group: "system-electricity"
                    url: homeassistant://navigate/lovelace-system/devices
                    tag: "solarassistant-activity"
      - service: timer.cancel
        target:
          entity_id: timer.solarassistant_inactivity

  - alias: "Notify When SolarAssistant MQTT Bridge Activity Ceased"
    id: "86cced33-ce28-4559-ba6b-e0d0f30fa183"
    initial_state: true
    trigger:
      - platform: event
        event_type: timer.finished
        event_data:
          entity_id: timer.solarassistant_inactivity
    mode: single
    condition:
      - condition: state
        entity_id: binary_sensor.solarassistant_activity
        state: "off"
    action:
      - service: notify.mobile_app_ceres
        data:
          title: "⚠️ System"
          message: >-
            {% set minutes = (now() - states.binary_sensor.solarassistant_activity.last_updated).total_seconds() | multiply(1/60) | int or 1 %}
            The SolarAssistant bridge's activity has ceased {{ minutes }} min ago.
          data:
            group: "system-electricity"
            url: homeassistant://navigate/lovelace-system/devices
            tag: "solarassistant-activity"
      - service: timer.start
        target:
          entity_id: timer.solarassistant_inactivity
        data:
          # if changed here, change it in "Detect When SolarAssistant MQTT Bridge Activity Ceases" too
          duration: "00:01:00"

  # todo:
  # 1. condition for low soc or low utilisation
  # 2. if (very) optimistic and soc by 1pm is still less than x% (or y% delta from target), enable grid mode
  # 3. if loadshedding
  - alias: "Set Charge Points"
    id: "5bdbcbfd-243a-4428-a6f3-ed2f98aec603"
    initial_state: true
    trace:
      stored_traces: 20
    trigger:
      - platform: time_pattern
        minutes: "/30"
        variables:
          # we need to give the average forecast filter time to get past its initial transient after midnight
          first_run: >-
            {# this isn't available here :-( #}
            {% set current_trigger = now().replace(second=0).replace(microsecond=0) %}
            {{ current_trigger == ('03:30' | today_at) }}
      - platform: state
        entity_id: binary_sensor.loadshedding_active
        to: "on"
        id: "loadshedding_active"
    mode: single
    # this would ensure we only get a notification if the mode has changed
    # but do we really want to do this? perhaps it's good to know every time, so that a human can do a sanity check
    condition:
      # it's the first run for the day, or, it's during the later window and the charge mode has changed
      # this condition prevents both triggers from triggering for the 03:30 slot
      - condition: template
        value_template: >-
          {% set within_window = today_at('03:30') <= now() <= today_at('11:30') %}
          {% set mode_changed = not is_state('sensor.charge_mode', states('input_text.last_charge_mode')) %}
          {% set loadshedding_active = trigger.id == "loadshedding_active" %}
          {{ first_run or (within_window and mode_changed) or loadshedding_active }}
    action:
      # since 2025.4 it's possible to use variables for this, due to the scope changes
      # https://github.com/home-assistant/core/pull/141114
      - service: input_boolean.turn_off
        entity_id: input_boolean.set_charge_point_error
      - repeat:
          count: "{{ state_attr('sensor.charge_mode', 'settings').keys() | length }}"
          sequence:
            - service: number.set_value
              target:
                entity_id: "number.capacity_point_{{ repeat.index }}"
              data:
                value: "{{ state_attr('sensor.charge_mode', 'settings')[repeat.index][0] }}"
            # all this nonsense is because the commands don't seem to persist when set
            # so, before this, we set, then we wait and set again, and only then do we
            # check whether the value took effect
            - delay:
                seconds: 30
            - service: number.set_value
              target:
                entity_id: "number.capacity_point_{{ repeat.index }}"
              data:
                value: "{{ state_attr('sensor.charge_mode', 'settings')[repeat.index][0] }}"
            # basically an assertion
            # this would be useful, but not available (yet) for these service calls:
            # https://www.home-assistant.io/blog/2023/07/05/release-20237/#services-can-now-respond
            # there's also this:
            # https://github.com/amitfin/retry
            - wait_template: >-
                {% set entity_id = 'number.capacity_point_' ~ repeat.index %}
                {% set expected_value =  state_attr('sensor.charge_mode', 'settings')[repeat.index][0] | string %}
                {{ is_state(entity_id, expected_value) }}
              timeout:
                seconds: 180
              continue_on_timeout: true
            # - service: system_log.write
            #   data:
            #     message: >-
            #       {% set entity_id = 'number.capacity_point_' ~ repeat.index %}
            #       {% set expected_value =  state_attr('sensor.charge_mode', 'settings')[repeat.index][0] | string %}
            #       {{ entity_id }}: {{ states(entity_id) }} (expected {{ expected_value }})
            #     level: debug
            #     logger: "homeassistant.components.resources_package"
            - if:
                - "{{ not wait.completed }}"
              then:
                - service: input_boolean.turn_on
                  entity_id: input_boolean.set_charge_point_error
            - service: "switch.turn_{{ state_attr('sensor.charge_mode', 'settings')[repeat.index][1] }}"
              target:
                entity_id: "switch.grid_charge_point_{{ repeat.index }}"
            - delay:
                seconds: 30
            - service: "switch.turn_{{ state_attr('sensor.charge_mode', 'settings')[repeat.index][1] }}"
              target:
                entity_id: "switch.grid_charge_point_{{ repeat.index }}"
            # another assertion
            - wait_template: >-
                {% set entity_id = 'switch.grid_charge_point_' ~ repeat.index %}
                {% set expected_value =  state_attr('sensor.charge_mode', 'settings')[repeat.index][1] %}
                {{ is_state(entity_id, expected_value) }}
              timeout:
                seconds: 180
              continue_on_timeout: true
            # - service: system_log.write
            #   data:
            #     message: >-
            #       {% set entity_id = 'switch.grid_charge_point_' ~ repeat.index %}
            #       {% set expected_value =  state_attr('sensor.charge_mode', 'settings')[repeat.index][1] %}
            #       {{ entity_id }}: {{ states(entity_id) }} (expected {{ expected_value }})
            #     level: debug
            #     logger: "homeassistant.components.resources_package"
            - if:
                - "{{ not wait.completed }}"
              then:
                - service: input_boolean.turn_on
                  entity_id: input_boolean.set_charge_point_error
      # - service: notify.mobile_app_ceres
      #   data:
      #     title: "Energy"
      #     message: >-
      #       {# do a full recon on all the settings #}
      #       {% set charge_mode = states('sensor.charge_mode') | lower %}
      #       {% set charge_map = state_attr('sensor.charge_mode', 'settings') %}
      #       {# the prefixes for the setting we want to check #}
      #       {% set prefixes = ('number.capacity_point_', 'switch.grid_charge_point_') %}
      #       {# if any one setting doesn't match this must be false #}
      #       {% set ns = namespace(success=True) %}
      #       {% for i in range(1, 7) %}
      #         {% for j in range(0, 2) %}
      #           {% set setting_entity_id = prefixes[j] ~ i %}
      #           {% set setting_assumed_value = charge_map[i][j] | string %}
      #           {#{{ (setting_entity_id, setting_assumed_value, states(setting_entity_id), is_state(setting_entity_id, setting_assumed_value)) }}#}
      #           {% set ns.success = is_state(setting_entity_id, setting_assumed_value) %}
      #           {% if not ns.success %}{% break %}{% endif %}
      #         {% endfor %}
      #         {% if not ns.success %}{% break %}{% endif %}
      #       {% endfor %}
      #       {% if ns.success %}
      #         {% set forecast = states('sensor.average_solar_energy_forecast_today') | float(0) | round(1) %}
      #         The backup power system's charge mode has been set to {{ charge_mode }}. The solar energy production forecast for today is {{ forecast }} kWh.
      #       {% else %}
      #         The backup power system's charge mode couldn't be set.
      #       {% endif %}
      #     data:
      #       group: "home-electricity"
      #       url: homeassistant://navigate/lovelace/resources
      - service: notify.mobile_app_ceres
        data:
          title: "⚙️ Energy"
          message: >-
            {% set charge_mode = states('sensor.charge_mode') | lower %}
            {% set last_charge_mode = states('input_text.last_charge_mode') | lower %}
            {% if is_state('input_boolean.set_charge_point_error', 'off') or charge_mode == last_charge_mode %}
              {% set forecast = states('sensor.average_solar_energy_forecast_today') | float(0) | round(1) %}
              The backup power system's charge mode has been set to {{ charge_mode }}. The solar energy production forecast for today is {{ forecast }} kWh.
            {% else %}
              The backup power system's charge mode couldn't be changed from {{ last_charge_mode }} to {{ charge_mode }}.
            {% endif %}
          data:
            group: "home-electricity"
            url: homeassistant://navigate/lovelace/resources
            tag: "charge-mode-update"
      - if:
          - condition: state
            entity_id: input_boolean.set_charge_point_error
            state: "off"
        then:
          - service: input_text.set_value
            target:
              entity_id: input_text.last_charge_mode
            data:
              value: "{{ states('sensor.charge_mode') }}"
      - service: input_boolean.turn_off
        entity_id: input_boolean.set_charge_point_error

  - alias: "Send Daily Solar Summary"
    id: "dd8cd984-90f1-4a9d-b6bb-5411085448b5"
    initial_state: true
    trigger:
      - platform: sun
        event: sunset
        offset: "01:00:00"
    action:
      - service: notify.family
        data:
          title: "🗒️ Energy"
          message: >-
            {% set consumption = states('sensor.daily_solar_energy_consumption') | float(0) %}
            {% set forecast_today = states('sensor.average_solar_energy_forecast_today') | float(0) | round(1) %}
            {% set forecast_tomorrow = states('sensor.energy_production_tomorrow') | float(0) | round(1) %}
            {% set utilisation = states('sensor.solar_energy_utilisation_today') | int(0) %}
            {% set utilisation_message = "" %}
            {% if utilisation == 100 %}
              {% set utilisation_message = "You have utilised all of the solar energy forecasted for today (" ~ consumption ~ " kWh)." %}
            {% elif utilisation == 0 %}
              {% set utilisation_message = "You have consumed " ~ consumption ~ " kWh of solar energy today." %}
            {%- else %}
              {% set utilisation_message = "You have utilised " ~ utilisation ~ "% (" ~ consumption ~ " kWh) of the solar energy forecasted for today (" ~ forecast_today ~ " kWh)." %}
            {%- endif %}
            {{ utilisation_message }} The forecast for tomorrow is {{ forecast_tomorrow }} kWh.
          data:
            group: "home-electricity"
            url: homeassistant://navigate/lovelace/resources

  - alias: "Notify If Charge Shutdown Threshold Changed"
    id: "cc6edc71-cbb9-44e7-972b-a1e6e7589aef"
    initial_state: true
    trigger:
      - platform: state
        entity_id: number.output_shutdown_capacity
    condition:
      # workaround for HA start-up
      - condition: template
        value_template: "{{ trigger.from_state.state | int(0) != 0 }}"
    action:
      - service: notify.mobile_app_ceres
        data:
          title: "⚠️ Energy"
          message: >-
            {% set from = trigger.from_state.state | int(0) %}
            {% set to = trigger.to_state.state | int(0) %}
            {% set user_id = states.context.user_id %}
            {% set triggered_by = (states.person | selectattr('attributes.user_id','==', user_id)) | list %}
            {% set name = "the system" if not triggered_by else state_attr((triggered_by | first).entity_id, "friendly_name").split()[0] %}
            The backup power battery's charge shutdown threshold has been changed from {{ from }}% to {{ to }}% by {{ name }}.
          data:
            group: "home-electricity"
            url: homeassistant://navigate/lovelace/resources
            push:
              sound:
                name: default
                critical: 1
                volume: 0.5

  - alias: "Notify If Too Far Below Charge Point Target"
    id: "77692f4f-04fb-4bf3-9c67-69cffb0a4c27"
    initial_state: true
    trigger:
      - platform: numeric_state
        entity_id: sensor.battery_charge_variance
        # keep in sync with "Send Backup Power Battery Update"
        below: -14
    condition:
      - condition: state
        entity_id: sensor.battery_status
        state: "Discharging"
      # perhaps also a condition for only certain times of the day?
    action:
      - service: notify.mobile_app_ceres
        data:
          title: "⚠️ Energy"
          message: >-
            {% set charge = states('sensor.battery_state_of_charge') | int(0) %}
            {% set target = states('sensor.capacity_charge_point') | int(0) %}
            The backup power battery's charge is at {{ charge }}%, which is 15% below the charge point target ({{ target }}%). Please conserve energy.
          data:
            group: "home-electricity"
            url: homeassistant://navigate/lovelace/resources
            push:
              sound:
                name: default
                critical: 1
                volume: 0.5

  - alias: "Notify If Inverter Temperature High"
    id: "fed52f97-a6ca-4e86-8d2b-f9b01fab40bf"
    initial_state: true
    trigger:
      - platform: numeric_state
        entity_id: sensor.inverter_temperature
        above: 60  # -45 °C ~ 60 °C (>45 °C derating)
        for:
          minutes: 5
    mode: single
    condition:
      - condition: state
        entity_id: input_boolean.inverter_temperature_notification_governor
        state: "off"
    action:
      - service: notify.mobile_app_ceres
        data:
          title: "🌡️ Energy"
            # The inverter has been running hot at {{ temperature }} °C for {{ trigger.for.seconds // 60 }} min. The load is {{ load }} kW.
          message: >-
            {% set temperature = states('sensor.inverter_temperature') | int(0) %}
            {% set load = states('sensor.home_power_kw') | float(0) | round(1) %}
            The inverter has been running hot for {{ trigger.for.seconds // 60 }} minutes: It's currently at {{ temperature }} °C and under a load of {{ load }} kW.
          data:
            group: "home-electricity"
            url: homeassistant://navigate/lovelace-system/devices
            tag: "inverter-temperature"
            # push:
            #   sound:
            #     name: default
            #     critical: 1
            #     volume: 0.5
      - service: input_boolean.turn_on
        entity_id: input_boolean.inverter_temperature_notification_governor

  - alias: "Notify If Inverter Temperature Recovered"
    id: "22b9f0e8-e6ff-4545-9ff5-5b58fb95cebc"
    initial_state: true
    trigger:
      - platform: numeric_state
        entity_id: sensor.inverter_temperature
        below: 60
    mode: single
    condition:
      - condition: state
        entity_id: input_boolean.inverter_temperature_notification_governor
        state: "on"
    action:
      - service: notify.mobile_app_ceres
        data:
          title: "🌡️ Energy"
          message: >-
            {% set temperature = states('sensor.inverter_temperature') | int(0) %}
            {% set load = states('sensor.home_power_kw') | float(0) | round(1) %}
            {% set last_changed = states.input_boolean.inverter_temperature_notification_governor.last_changed %}
            {# the 5 is for the for criterium at the time when the governor was set #}
            {% set after =  5 + (now() - last_changed).total_seconds() | multiply(1/60) | int(0) %}
            The inverter's temperature recovered to {{ temperature }} °C after {{ after }} min. The load is {{ load }} kW.
          data:
            group: "home-electricity"
            url: homeassistant://navigate/lovelace-system/devices
            tag: "inverter-temperature"
            # push:
            #   sound:
            #     name: default
            #     critical: 1
            #     volume: 0.5
      - service: input_boolean.turn_off
        entity_id: input_boolean.inverter_temperature_notification_governor

  - alias: "Notify If Inverter Battery Temperature High"
    id: "a994298c-c2fc-430f-be8e-a8ebb85de410"
    initial_state: true
    trigger:
      - platform: numeric_state
        entity_id: sensor.battery_temperature
        above: 40  # Charge: 0 °C ~ +55 °C / Discharge: -20 °C ~ +55 °C
        for:
          minutes: 5
    action:
      - service: notify.mobile_app_ceres
        data:
          title: "🌡️ Energy"
          # The inverter's battery has been running hot at {{ temperature }} °C for {{ trigger.for.seconds // 60 }} min. The load is {{ load }} kW.
          message: >-
            {% set temperature = states('sensor.battery_temperature') | int(0) %}
            {% set load = states('sensor.home_power_kw') | float(0) | round(1) %}
            The inverter's battery has been running hot for {{ trigger.for.seconds // 60 }} minutes: It's currently at {{ temperature }} °C and under a load of {{ load }} kW.
          data:
            group: "home-electricity"
            url: homeassistant://navigate/lovelace/resources
            tag: "inverter-battery-temperature"
            # push:
            #   sound:
            #     name: default
            #     critical: 1
            #     volume: 0.5
      - service: input_boolean.turn_on
        entity_id: input_boolean.inverter_battery_temperature_notification_governor

  - alias: "Notify If Inverter Battery Temperature Recovered"
    id: "3a4013a7-9c4e-435e-ae87-d5373fe49fb4"
    initial_state: true
    trigger:
      - platform: numeric_state
        entity_id: sensor.battery_temperature
        below: 40
    mode: single
    condition:
      - condition: state
        entity_id: input_boolean.inverter_battery_temperature_notification_governor
        state: "on"
    action:
      - service: notify.mobile_app_ceres
        data:
          title: "🌡️ Energy"
          message: >-
            {% set temperature = states('sensor.battery_temperature') | int(0) %}
            {% set load = states('sensor.home_power_kw') | float(0) | round(1) %}
            {% set last_changed = states.input_boolean.inverter_battery_temperature_notification_governor.last_changed %}
            {# the 5 is for the for criterium at the time when the governor was set #}
            {% set after =  5 + (now() - last_changed).total_seconds() | multiply(1/60) | int(0) %}
            The inverter's battery temperature recovered to {{ temperature }} °C after {{ after }} min. The load is {{ load }} kW.
          data:
            group: "home-electricity"
            url: homeassistant://navigate/lovelace/resources
            tag: "inverter-battery-temperature"
            # push:
            #   sound:
            #     name: default
            #     critical: 1
            #     volume: 0.5
      - service: input_boolean.turn_off
        entity_id: input_boolean.inverter_temperature_notification_governor

  - alias: "Notify If Geyser Heating For Long"
    id: "3851f3fa-988e-4c2b-9b65-896c82db78ad"
    initial_state: true
    trigger:
      - platform: numeric_state
        entity_id: sensor.geyser_power
        above: 3000  # W
        for:
          minutes: 30
    action:
      # night (normal) vs day (critical)?
      - service: notify.mobile_app_ceres
        data:
          title: "⏱️ Energy"
          message: >-
            The geyser has been heating for {{ trigger.for.seconds // 60 }} min.
          data:
            group: "home-electricity"
            url: homeassistant://navigate/lovelace/resources
            # push:
            #   sound:
            #     name: default
            #     critical: 1
            #     volume: 0.5

  - alias: "Notify If Charge Point Setting Automation State Was Changed"
    id: "0a36f9de-1f1d-4a4d-8079-1cf7d75d2dc8"
    initial_state: true
    trigger:
      - platform: state
        entity_id: automation.set_charge_points
        # https://www.home-assistant.io/docs/automation/trigger/#state-trigger
        not_from: "unavailable"
        for:
          seconds: 5
    mode: single
    action:
      - service: notify.mobile_app_ceres
        data:
          title: "⚙️ Energy"
          message: >-
            {% set is_enabled = trigger.to_state.state | bool(False) %}
            {% set user_id = states.context.user_id %}
            {% set triggered_by = (states.person | selectattr('attributes.user_id','==', user_id)) | list %}
            {% set name = 'the system' if not triggered_by else state_attr((triggered_by | first).entity_id, 'friendly_name').split()[0] %}
            The automation for setting charge points has been {{ 'enabled' if is_enabled else 'disabled' }} by {{ name }}.
          data:
            group: "home-electricity"
            url: homeassistant://navigate/lovelace/resources
            push:
              sound:
                name: default
                critical: 1
                volume: 0.5
            # todo: actions to enable/disable

  - alias: "Notify Tenant Of High Energy Consumption"
    id: "72447e10-ea6c-4bc1-abd0-b3f336eb6a17"
    initial_state: true
    trigger:
      - platform: numeric_state
        entity_id: sensor.outbuilding_power_meter_channel_1_power
        # todo: some kind of average or using energy instead of power might work better
        above: 2200
        for:
          minutes: 5
      - platform: numeric_state
        entity_id: sensor.outbuilding_power_meter_channel_1_power
        above: 550
        for:
          minutes: 20
    condition:
      - condition: state
        entity_id: binary_sensor.grid_feed
        state: "off"
      - condition: state
        entity_id: binary_sensor.tenant_present
        state: "on"
    action:
      - variables:
          power: "{{ states('sensor.outbuilding_power_1min_90th_percentile') | float(0) | multiply(1/1000) | round(1) }}"
          minutes: "{{ trigger.for.seconds // 60 }}"
      - service: notify.mobile_app_ceres
        data:
          title: "⚠️ Energy"
          message: "The tenant's power consumption has been {{ power }} kW for {{ minutes }} min while on backup power."
          data:
            group: "tenant-electricity"
            url: homeassistant://navigate/lovelace/resources
            push:
              sound:
                name: default
                critical: 1
                volume: 0.5
      - service: script.turn_on
        target:
          entity_id: script.notify_tenant
        data:
          variables:
            message: "The property is running off backup power. Please mind your energy usage: You've been drawing {{ power }} kW for {{ minutes }} min."

  - alias: "Notify Tenant When On Backup Power"
    id: "9a727e25-af28-4fa0-85e0-3b4b8ebed8dd"
    trigger:
      - platform: state
        entity_id: binary_sensor.grid_feed
        to: "off"
        not_from:
          - "unavailable"
          - "unknown"
    condition:
      - condition: state
        entity_id: binary_sensor.tenant_present
        state: "on"
      # - condition: time
      #   after: "05:00:00"
      #   before: "23:00:00"
    action:
      - variables:
          message: "The property has switched to backup power. Please mind your energy usage."
      - service: script.turn_on
        target:
          entity_id: script.notify_tenant
        data:
          variables:
            message: "{{ message }}"
      # - service: notify.pieter_sms
      #   data:
      #     message: "{{ message }}"

  - alias: "Notify Tenant When Grid Power Restored"
    id: "bf9fc657-6969-490e-acc8-51bb0cdf8c95"
    trigger:
      - platform: state
        entity_id: binary_sensor.grid_feed
        to: "on"
        not_from:
          - "unavailable"
          - "unknown"
    condition:
      - condition: state
        entity_id: binary_sensor.tenant_present
        state: "on"
      # - condition: time
      #   after: "05:00:00"
      #   before: "23:00:00"
    action:
      - variables:
          message: "Grid power to the property has been restored."
      - service: script.turn_on
        target:
          entity_id: script.notify_tenant
        data:
          variables:
            message: "{{ message }}"
      # - service: notify.pieter_sms
      #   data:
      #     message: "{{ message }}"

  # polling should be turned off for this sql sensor (via the ui)
  # https://github.com/home-assistant/core/issues/71563
  #
  # sql sensor query:
  #   SELECT COALESCE(SUM(state::FLOAT), 0) AS total
  #   FROM states
  #   WHERE metadata_id = 584
  #     AND DATE(TO_TIMESTAMP(last_updated_ts)) = CURRENT_DATE
  #     AND state ~ '^[0-9]+(\.[0-9]+)?$'
  #   LIMIT 1;
  - alias: "Update Hourly Energy Forecast Aggregate"
    id: "622aa2bb-f5a0-4f0a-83b2-ff7864587098"
    initial_state: true
    trigger:
      platform: time_pattern
      minutes: "/15"
    action:
      - service: homeassistant.update_entity
        target:
          entity_id: sensor.hourly_energy_forecast_aggregated
