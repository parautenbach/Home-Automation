# https://andrewmarsh.com/software/sunpath3d-web/

template:
  - binary_sensor:
      - name: "Grid Feed"
        unique_id: "66590cb5-102a-4399-8d05-24ff17b96aba"
        state: "{{ states('sensor.grid_frequency') | int(0) > 0 }}"
        device_class: power
        icon: >-
          {% if states('sensor.grid_frequency') | int(0) > 0 %}
            mdi:transmission-tower
          {% else %}
            mdi:transmission-tower-off
          {% endif %}
  - sensor:
      # for charting purposes
      - name: "Grid Feed Outage Number"
        state: "{{ 0 if is_state('binary_sensor.grid_feed', 'on') else 1 }}"
      - name: "Home Power"
        unique_id: "ec13fb72-1d08-427a-918b-e7549539a1be"
        unit_of_measurement: W
        device_class: power
        # battery power goes positive and negative (postive power means the battery is charging)
        state: "{{ states('sensor.grid_power') | int(0) + states('sensor.pv_power') | int(0) - states('sensor.battery_power') | int(0) }}"
      - name: "Home Power kW"
        unique_id: "0d70dd0f-a7e4-416b-a293-cb1d518bdfcf"
        unit_of_measurement: kW
        device_class: power
        state: "{{ ((states('sensor.home_power') | int(0)) / 1000) | round(3) }}"
      - name: "Solar Reserve"
        unique_id: "cdff01dd-8401-4c0e-a661-1a72d74dbb01"
        unit_of_measurement: W
        device_class: power
        state: >-
          {% set battery_threshold = 100 %}
          {% set pv_threshold = 10 %}
          {% set pv_potential = states('sensor.power_production_now') | int(0) %}
          {% set pv_power = states('sensor.pv_power_filtered') | int(0) %}
          {% set battery_power = states('sensor.battery_power_filtered') | int(0) %}
          {% if (pv_power > pv_potential and pv_power > pv_threshold) or (pv_power > pv_threshold and battery_power < -battery_threshold) %}
            0
          {% elif pv_potential > 0 %}
            {{ pv_potential - pv_power }}
          {% else %}
            0
          {% endif %}
      - name: "Solar Reserve kW"
        unique_id: "72bffd22-61c2-41f8-93d5-9dd79e60afc9"
        unit_of_measurement: kW
        device_class: power
        state: "{{ ((states('sensor.solar_reserve') | int(0)) / 1000) | round(3) }}"
      - name: "Solar Consumption Percentage"
        unique_id: "8b6d53fb-7111-4311-9f1c-e1eab4520499"
        icon: mdi:solar-power
        unit_of_measurement: "%"
        state: >
          {% set battery_threshold = 100 %}
          {% set pv_threshold = 10 %}
          {% set pv_potential = states('sensor.power_production_now') | int(0) %}
          {% set pv_power = states('sensor.pv_power_filtered') | int(0) %}
          {% set battery_power = states('sensor.battery_power_filtered') | int(0) %}
          {% if (pv_power > pv_potential and pv_power > pv_threshold) or (pv_power > pv_threshold and battery_power < -battery_threshold) %}
            100
          {% elif pv_potential > 0 %}
            {{ (pv_power / pv_potential * 100) | round(0) }}
          {% else %}
            0
          {% endif %}
      - name: "Solar Reserve Percentage"
        unique_id: "e60c25f9-22d2-435b-8b78-81502cc4a059"
        icon: mdi:solar-power
        unit_of_measurement: "%"
        state: >
          {% if states('sensor.power_production_now') | int(0) > 0 %}
            {{ 100 - states('sensor.solar_consumption_percentage') | int(0) }}
          {% else %}
            0
          {% endif %}
      - name: "Battery Status"
        unique_id: "74d66740-f331-4ff8-81ac-42c5b25d8ba9"
        icon: >-
          {% set state = states('sensor.battery_state_of_charge') | int(0) %}
          {% set charging = "-charging" if states('sensor.battery_status') == "Charging" else "" %}
          {% set suffix = ((state + 5) // 10) * 10 %}
          {# battery empty #}
          {% if suffix <= 0 %}
            mdi:battery-alert-variant-outline
          {# full #}
          {% elif suffix == 100 %}
            {# choose the right full battery #}
            {% if charging != "" %}
              mdi:battery-charging-100
            {% else %}
              mdi:battery
            {% endif %}
          {# everything in between #}
          {% else %}
            mdi:battery{{ charging }}-{{ suffix }}
          {% endif %}
        state: >
          {%- set threshold = 100 -%}
          {%- set battery_power = states('sensor.battery_power_filtered') | int(0) -%}
          {%- if battery_power > threshold -%}
            Charging
          {%- elif battery_power < -threshold -%}
            Discharging
          {%- else -%}
            Trickling
          {%- endif %}
      # https://community.home-assistant.io/t/template-sensor-using-this-variable/420200/30
      - name: "Battery Time To Full"
        unique_id: "af3949fd-fb4b-4b9c-b92a-e2f744c180a0"
        device_class: duration
        unit_of_measurement: s
        state: >
          {% set battery_status = states('sensor.battery_status') %}
          {% set rate = states('sensor.battery_change_of_charge') | float(0) | abs %}
          {% set current_charge = states('sensor.battery_state_of_charge') | float(0) %}
          {% if battery_status == 'Charging' %}
            {{ (100 - current_charge) * 60 * 60 / rate }}
          {% else %}
            0
          {% endif %}
        attributes:
          time_when_full: >-
            {% set battery_status = states('sensor.battery_status') %}
            {% set rate = states('sensor.battery_change_of_charge') | float(0) | abs %}
            {% set current_charge = states('sensor.battery_state_of_charge') | float(0) %}
            {% if battery_status == 'Charging' -%}
              {% set seconds_to_full = (100 - current_charge) * 60 * 60 / rate %}
              {{ now() + timedelta(seconds=seconds_to_full) }}
            {% else %}
              {{ 0 | as_datetime }}
            {% endif %}
          time_when_full_relative: >-
            {% set battery_status = states('sensor.battery_status') %}
            {% set rate = states('sensor.battery_change_of_charge') | float(0) | abs %}
            {% set current_charge = states('sensor.battery_state_of_charge') | float(0) %}
            {% set time_when_full = 0 | as_datetime %}
            {% if battery_status == 'Charging' -%}
              {% set seconds_to_full = (100 - current_charge) * 60 * 60 / rate %}
              {% set time_when_full = now() + timedelta(seconds=seconds_to_full) %}
            {% endif %}
            {% if time_when_full > today_at() + timedelta(days=2) %}
              {{ time_when_full.strftime('%A at %H:%M') }}
            {% elif time_when_full > today_at() + timedelta(days=1) %}
              {{ time_when_full.strftime('Tomorrow at %H:%M') }}
            {% else %}
              {{ time_when_full.strftime('Today at %H:%M') }}
            {% endif %}
      - name: "Battery Time To Shutdown Threshold"
        unique_id: "ecc75099-6fbf-4733-96a3-90b743a66dde"
        device_class: duration
        unit_of_measurement: s
        state: >
          {% set threshold = states('number.output_shutdown_capacity') | int(0) %}
          {% set battery_status = states('sensor.battery_status') %}
          {% set rate = states('sensor.battery_change_of_charge') | float(0) | abs %}
          {% set current_charge = states('sensor.battery_state_of_charge') | float(0) %}
          {% if battery_status == 'Discharging' -%}
            {{ (current_charge - threshold) * 60 * 60 / rate }}
          {% else %}
            0
          {% endif %}
        attributes:
          time_when_at_shutdown_threshold: >-
            {% set threshold = states('number.output_shutdown_capacity') | int(0) %}
            {% set battery_status = states('sensor.battery_status') %}
            {% set rate = states('sensor.battery_change_of_charge') | float(0) | abs %}
            {% set current_charge = states('sensor.battery_state_of_charge') | float(0) %}
            {% if battery_status == 'Discharging' -%}
              {% set seconds_to_threshold = (current_charge - threshold) * 60 * 60 / rate %}
              {{ now() + timedelta(seconds=seconds_to_threshold) }}
            {% else %}
              {{ 0 | as_datetime }}
            {% endif %}
          time_when_at_shutdown_threshold_relative: >-
            {% set threshold = states('number.output_shutdown_capacity') | int(0) %}
            {% set battery_status = states('sensor.battery_status') %}
            {% set rate = states('sensor.battery_change_of_charge') | float(0) | abs %}
            {% set current_charge = states('sensor.battery_state_of_charge') | float(0) %}
            {% set time_when_at_threshold = 0 | as_datetime %}
            {% if battery_status == 'Discharging' -%}
              {% set seconds_to_threshold = (current_charge - threshold) * 60 * 60 / rate %}
              {% set time_when_at_threshold = now() + timedelta(seconds=seconds_to_threshold) %}
            {% endif %}
            {% if time_when_at_threshold > today_at() + timedelta(days=2) %}
              {{ time_when_at_threshold.strftime('%A at %H:%M') }}
            {% elif time_when_at_threshold > today_at() + timedelta(days=1) %}
              {{ time_when_at_threshold.strftime('Tomorrow at %H:%M') }}
            {% else %}
              {{ time_when_at_threshold.strftime('Today at %H:%M') }}
            {% endif %}
      - name: "Solar Production Peak Today"
        unique_id: "8eb2701b-522d-436d-af68-7f86e27c20ad"
        icon: mdi:clock-outline
        state: "{{ (states('sensor.power_highest_peak_time_today') | as_datetime | as_local).strftime('%H:%m') }}"
      - name: "Solar Production Peak Tomorrow"
        unique_id: "f3797db7-8377-49f0-96ce-ddd40dd519bd"
        icon: mdi:clock-outline
        state: "{{ (states('sensor.power_highest_peak_time_tomorrow') | as_datetime | as_local).strftime('%H:%m') }}"
      - name: "Solar Energy Utilisation Today"
        unique_id: "33e98696-bb21-4e07-9487-98956c39ef00"
        unit_of_measurement: "%"
        state: >
          {% set consumption = states('sensor.daily_solar_energy_consumption') | float(0) %}
          {% set production = states('sensor.average_solar_energy_forecast_today') | float(0) %}
          {% if production == 0.0 %}
            0
          {% else %}
            {{ min((consumption / production * 100) | int(0), 100) }}
          {% endif %}
        icon: >-
          {% set consumption = states('sensor.daily_solar_energy_consumption') | float(0) %}
          {% set production = states('sensor.average_solar_energy_forecast_today') | float(0) %}
          {% set yield = 0 %}
          {% if production != 0.0 %}
            {% set yield = min((consumption / production * 100) | int(0), 100) %}
          {% endif %}
          {% set index = (yield / 12.5) | int(0) %}
          {% if 0 < index <= 8 %}
            mdi:circle-slice-{{ index }}
          {% else %}
            mdi:circle-outline
          {% endif %}
      - name: "Solar Production Share"
        unique_id: "7dabd873-d811-4201-84a5-3f507d5b619b"
        unit_of_measurement: "%"
        state: >-
          {% set solar = states('sensor.daily_solar_energy_consumption') | float(0) -%}
          {% set grid = states('sensor.daily_grid_energy_consumption') | float(0) -%}
          {% set battery_out = states('sensor.daily_battery_energy_out') | float(0) -%}
          {{ (solar / (solar + grid + battery_out)) | multiply(100) | round(0) }}
        icon: >-
          {% set solar = states('sensor.daily_solar_energy_consumption') | float(0) -%}
          {% set grid = states('sensor.daily_grid_energy_consumption') | float(0) -%}
          {% set battery_out = states('sensor.daily_battery_energy_out') | float(0) -%}
          {% set share = (solar / (solar + grid + battery_out)) | multiply(100) | round(0) %}
          {% set index = (share/12.5) | int(0) %}
          {% if 0 < index <= 8 %}
            mdi:circle-slice-{{ index }}
          {% else %}
            mdi:circle-outline
          {% endif %}
      - name: "Solar Consumption Share"
        unique_id: "590c6a35-b311-4d8f-83df-1b49ee57de5f"
        unit_of_measurement: "%"
        state: >-
          {% set solar = states('sensor.daily_solar_energy_consumption') | float(0) -%}
          {% set grid = states('sensor.daily_grid_energy_consumption') | float(0) -%}
          {{ (solar / (solar + grid)) | multiply(100) | round(0) }}
        icon: >-
          {% set solar = states('sensor.daily_solar_energy_consumption') | float(0) -%}
          {% set grid = states('sensor.daily_grid_energy_consumption') | float(0) -%}
          {% set share = (solar / (solar + grid)) | multiply(100) | round(0) %}
          {% set index = (share/12.5) | int(0) %}
          {% if 0 < index <= 8 %}
            mdi:circle-slice-{{ index }}
          {% else %}
            mdi:circle-outline
          {% endif %}
      - name: "Battery Charge Variance"
        unique_id: "1ec45caf-70f4-4e15-b424-a16e86407b49"
        unit_of_measurement: "%"
        state: >-
          {{ states('sensor.battery_state_of_charge') | int(0) - states('sensor.capacity_charge_point') | int(0) }}
        icon: mdi:sigma-lower
  - trigger:
      - platform: time_pattern
        hours: "*"
        minutes: "*"
        seconds: 0
      - platform: state
        entity_id:
          - number.capacity_point_1
          - number.capacity_point_2
          - number.capacity_point_3
          - number.capacity_point_4
          - number.capacity_point_5
          - number.capacity_point_6
    sensor:
      - name: "Capacity Charge Point"
        unique_id: "12b69471-fdbc-4f9a-9a75-960545211e3e"
        state: >-
          {# these times must match the work mode timers on the inverter #}
          {% set time = now().strftime('%H:%M') %}
          {# could use a map too; whatever #}
          {% if '01:00' <= time < '05:00' %}
            {{ states('number.capacity_point_1') }}
          {% elif '05:00' <= time < '08:00' %}
            {{ states('number.capacity_point_2') }}
          {% elif '08:00' <= time < '13:00' %}
            {{ states('number.capacity_point_3') }}
          {% elif '13:00' <= time < '17:00' %}
            {{ states('number.capacity_point_4') }}
          {% elif '17:00' <= time < '21:00' %}
            {{ states('number.capacity_point_5') }}
          {% else %}
            {# 21:00-01:00 #}
            {{ states('number.capacity_point_6') }}
          {% endif %}
        # not really, but we get dynamic icons this way
        device_class: battery
        unit_of_measurement: "%"
  - trigger:
      - platform: time_pattern
        hours: "*"
        minutes: "*"
        seconds: 0
      - platform: state
        entity_id:
          - switch.grid_charge_point_1
          - switch.grid_charge_point_2
          - switch.grid_charge_point_3
          - switch.grid_charge_point_4
          - switch.grid_charge_point_5
          - switch.grid_charge_point_6
    binary_sensor:
      - name: "Grid Charge Point Status"
        state: >-
          {# these times must match the work mode timers on the inverter #}
          {% set time = now().strftime('%H:%M') %}
          {% if '01:00' <= time < '05:00' %}
            {{ states('switch.grid_charge_point_1') }}
          {% elif '05:00' <= time < '08:00' %}
            {{ states('switch.grid_charge_point_2') }}
          {% elif '08:00' <= time < '13:00' %}
            {{ states('switch.grid_charge_point_3') }}
          {% elif '13:00' <= time < '17:00' %}
            {{ states('switch.grid_charge_point_4') }}
          {% elif '17:00' <= time < '21:00' %}
            {{ states('switch.grid_charge_point_5') }}
          {% else %}
            {# 21:00-01:00 #}
            {{ states('switch.grid_charge_point_6') }}
          {% endif %}
  - trigger:
      - platform: time_pattern
        hours: "*"
        minutes: "*"
        seconds: "/10"
    binary_sensor:
      - name: "SolarAssistant Activity"
        state: >-
          {{ states.sensor.solarassistant_activity_counter.last_updated >= now() - timedelta(seconds=10) }}
        device_class: running
  - trigger:
      - platform: state
        entity_id: sensor.average_solar_energy_forecast_today
        not_to:
          - "unavailable"
          - "unknown"
    sensor:
      name: "Charge Mode"
      icon: mdi:tune
      device_class: enum
      state: >-
        {% set forecast = states('sensor.average_solar_energy_forecast_today') | int(0) %}
        {# hysteresis #}
        {% if forecast >= 9 %}
          Optimistic
        {% elif forecast <= 8 %}
          Pessimistic
        {% else %}
          {{ this.state }}
        {% endif %}
      attributes:
        settings: >-
          {# 1: 01:00-05:00 #}
          {# 2: 05:00-08:00 #}
          {# 3: 08:00-13:00 #}
          {# 4: 13:00-17:00 #}
          {# 5: 17:00-21:00 #}
          {# 6: 21:00-01:00 #}
          {# (int, bool): (battery soc, grid charge allowed) #}
          {% set mappings =
            {
              'optimistic': {
                  1: (50, 'on'),
                  2: (45, 'off'),
                  3: (60, 'off'),
                  4: (75, 'off'),
                  5: (85, 'on'),
                  6: (85, 'on')
                },
              'pessimistic': {
                  1: (50, 'on'),
                  2: (60, 'on'),
                  3: (60, 'on'),
                  4: (75, 'on'),
                  5: (85, 'on'),
                  6: (85, 'on')
              }
            }
          %}
          {% set forecast = states('sensor.average_solar_energy_forecast_today') | int(0) %}
          {# hysteresis #}
          {% if forecast >= 9 %}
            {% set mode = 'optimistic' %}
          {% elif forecast <= 8 %}
            {% set mode = 'pessimistic' %}
          {% else %}
            {% set mode = this.state %}
          {% endif %}
          {{ mappings[mode] }}
  # solarassistant should actually provide this as a sensor, but they only provide a control
  # don't want to use this in the frontend, in case someone changes it accidentally
  # can still change it if you go to the device though...
  - trigger:
      - platform: state
        entity_id: number.output_shutdown_capacity
    sensor:
      name: "Output Shutdown Capacity"
      icon: mdi:ray-vertex
      unit_of_measurement: "%"
      state: "{{ states('number.output_shutdown_capacity') }}"
  - trigger:
      - platform: state
        entity_id: sensor.load_power_non_essential
    sensor:
      name: "Geyser Power"
      icon: mdi:water-boiler
      unit_of_measurement: W
      device_class: power
      state: >-
        {# the geyser is the only device on the non-essential circuit #}
        {# for some reason this sensor reports small negative values when the grid is connected #}
        {% set geyser = states('sensor.load_power_non_essential') | int(0) %}
        {{ geyser if geyser > 0 else 0 }}

sensor:
  # digital power meter in db
  - platform: integration
    unique_id: "0e503fd7-9ae9-446b-8c73-28d8068b69eb"
    name: "Total Electricity Consumption"
    source: sensor.current_power
    unit_prefix: k
    unit_time: h
    method: left
    round: 3
  - platform: integration
    unique_id: "a2cc64a7-6d41-44cf-8f0f-ca6f89edba22"
    name: "Home Energy"
    source: sensor.home_power
    unit_prefix: k
    unit_time: h
    method: left
    round: 3
  - platform: integration
    unique_id: "9b9ba816-42f0-437d-aa7a-7014363f5ed5"
    name: "Geyser Energy"
    source: sensor.geyser_power
    unit_prefix: k
    unit_time: h
    method: left
    round: 3
  - platform: template
    sensors:
      monthly_grid_energy_consumption_forecast:
        unique_id: "5a0d7a1b-0bbd-42b0-9b21-5daf97eeade0"
        unit_of_measurement: "kWh"
        # alternative:
        # {{ ((now().replace(day=1) + timedelta(days=31)).replace(day=1) - timedelta(days=1)).day }}
        # from: https://community.home-assistant.io/t/calculate-estimated-monthly-kwh-value/558816/4
        value_template: >
          {% set now = now() %}
          {% set month = now.month %}
          {% set year = now.year %}
          {% set days = None %}
          {# feb: leap years #}
          {% if month == 2 and year is divisibleby 4 and not year is divisibleby 400 %}
            {% set days = 29 %}
          {# jan, mar, may, jul, aug, oct, dec #}
          {% elif month in [1,3,5,7,8,10,12] %}
            {% set days = 31 %}
          {# apr, jun, sep, nov #}
          {% elif month in [4,6,9,11] %}
            {% set days = 30 %}
          {# feb #}
          {% else %}
            {% set days = 28 %}
          {% endif %}
          {{ ((states('sensor.monthly_grid_energy_consumption') | int) / now.day * days) | round(3) }}
      monthly_home_energy_consumption_forecast:
        unique_id: "9a1c2a4e-76cd-416d-8680-fe1ea588f254"
        unit_of_measurement: "kWh"
        value_template: >
          {% set n = now() %}
          {% set days = ((n.replace(day=1) + timedelta(days=-31)).replace(day=1) - timedelta(days=1)).day %}
          {{ ((states('sensor.monthly_home_energy_consumption') | int) / n.day * days) | round(3) }}
      battery_change_of_charge:
        unique_id: "0bf9861c-a0e4-4100-b6c6-b8b3a80f9274"
        unit_of_measurement: "%/h"
        value_template: >-
          {# battery is 2 x 5.12kWh #}
          {% set capacity = 10240 %}
          {% set power = states('sensor.battery_power_filtered') | int(0) %}
          {{ (power/capacity*100) | round(2) }}
  - platform: filter
    unique_id: "a6c6e405-2939-43ae-a8fc-e63f5390eda6"
    name: "PV Power Filtered"
    entity_id: sensor.pv_power
    filters:
      filter: lowpass
      time_constant: 10
      precision: 0
  - platform: filter
    unique_id: "963000a0-5cbb-4b11-91f9-753bedb4f576"
    name: "Battery Power Filtered"
    entity_id: sensor.battery_power
    filters:
      filter: lowpass
      time_constant: 10
      precision: 0
  - platform: history_stats
    name: Daily Grid Feed Outage Time
    entity_id: binary_sensor.grid_feed
    state: "off"
    type: time  # duration
    start: "{{ now().replace(hour=0, minute=0, second=0) }}"
    end: "{{ now() }}"
  # https://github.com/Limych/ha-average
  # device class
  - platform: average
    name: Average Solar Energy Forecast Today
    start: '{{ now().replace(hour=0).replace(minute=0).replace(second=0) }}'
    end: '{{ now() }}'
    entities:
      - sensor.energy_production_today

mqtt:
  binary_sensor:
    # https://mosquitto.org/man/mosquitto-conf-5.html#idm45770162182128
    - name: SolarAssistant Bridge
      unique_id: "58287276-4eef-4d63-8ec1-8a5638731a0d"
      state_topic: $SYS/broker/connection/homeassistant.SolarAssistant/state
      payload_on: "1"
      payload_off: "0"
      device_class: connectivity
      icon: mdi:lan-connect
  sensor:
    # https://community.home-assistant.io/t/mqtt-stats-measuring-number-of-mqtt-messages-per-time-for-a-topic/224109/3
    - name: SolarAssistant Activity Counter
      unique_id: "c63b23e4-2b85-405a-8d64-b9866875bf0c"
      state_topic: solar_assistant/inverter_1/load_power_essential/state
      value_template: "{{ states('sensor.solarassistant_activity_counter') | int(0) + 1 }}"
      unit_of_measurement: "messages"
      icon: mdi:counter

utility_meter:
  daily_grid_energy_consumption:
    unique_id: "cb11e11e-259d-43dc-bc65-a9752b0bd31a"
    source: sensor.grid_energy_in
    cycle: daily
  monthly_grid_energy_consumption:
    unique_id: "be9b3cac-80e0-4d59-8557-403d17100b22"
    source: sensor.grid_energy_in
    cycle: monthly
  daily_home_energy_consumption:
    unique_id: "765e119e-60ef-4e0b-87f0-e7d64adad81a"
    source: sensor.home_energy
    cycle: daily
  monthly_home_energy_consumption:
    unique_id: "ffcf90f5-5f22-47be-a389-8e74876ecead"
    source: sensor.home_energy
    cycle: monthly
  # why not just use sensor.pv_energy directly? because it's not cumulative per day, but resets it seemingly random times
  daily_solar_energy_consumption:
    unique_id: "c63e814c-4d6c-455c-bb2c-7f557a3af075"
    source: sensor.pv_energy
    cycle: daily
  daily_battery_energy_in:
    unique_id: "917b2099-8dcf-48f1-a689-178ee2bd0346"
    source: sensor.battery_energy_in
    cycle: daily
  daily_battery_energy_out:
    unique_id: "cafc2bee-06cd-4b60-90eb-66d412a5ec88"
    source: sensor.battery_energy_out
    cycle: daily

input_boolean:
  # avoid jitter when we're around a charge point and the battery is trickling
  # let the batter drop a certain amount or less before we'll notify again at
  # the charge point value, a multiple of 10% or when full
  battery_notification_governor:
    name: Battery Notification Governor
    icon: mdi:speedometer

# input_text:
#   last_charge_mode:
#     name: "Last Charge Mode"
#     icon: mdi:tune

automation:
  - alias: "Notify If Grid Feed Status Changed"
    id: "b233b973-cf9b-44b5-94e4-5f0813e6eefa"
    initial_state: true
    trigger:
      - platform: state
        entity_id: binary_sensor.grid_feed
    action:
      - service: notify.mobile_app_ceres
        data:
          title: "Energy"
          message: >-
            {% set after = "" %}
            {% set seconds = (as_timestamp(utcnow()) - as_timestamp(trigger.from_state.last_changed)) | int %}
            {% if seconds < 60 %}
              {% set after = seconds ~ " sec" %}
            {% elif seconds < 60*60 %}
              {% set after = seconds // 60 ~ " min" %}
            {% else %}
              {% set h = seconds // (60*60) %}
              {% set m = min(((seconds / (60*60) - seconds // (60*60)) * 60) | round(0), 59) %}
              {% if m < 10 %}
                {% set after = h ~ "h0" ~ m %}
              {% else %}
                {% set after = h ~ "h" ~ m %}
              {% endif %}
            {% endif %}
            The grid feed has been {{ 'restored after ' ~  after ~ '.' if is_state('binary_sensor.grid_feed', 'on') else 'cut.' }}
          data:
            group: "home-electricity"
            url: homeassistant://navigate/lovelace/resources
  - alias: "Update Backup Power Warning Light If Grid Feed Status Changed"
    id: "e6ddb31c-3723-429d-a6c4-38268b831ba9"
    initial_state: true
    trigger:
      - platform: state
        entity_id: binary_sensor.grid_feed
        to: "on"
    condition:
      - condition: state
        entity_id: light.foyer
        state: "on"
    action:
      - service: light.turn_off
        target:
          entity_id: light.foyer
  - alias: "Set Backup Power Warning Light Brightness"
    id: "09697150-0bf0-4dc7-9d6d-fbc5ac6cbdc7"
    initial_state: true
    trigger:
      - platform: state
        entity_id: binary_sensor.grid_feed
        to: "off"
      - platform: state
        entity_id: sensor.battery_state_of_charge
      - platform: state
        entity_id: binary_sensor.anybody_home
        to: "on"
    condition:
      - condition: state
        entity_id: binary_sensor.grid_feed
        state: "off"
      - condition: state
        entity_id: binary_sensor.anybody_home
        state: "on"
      - condition: or
        conditions:
          - condition: and
            conditions:
              - condition: time
                after: "21:00:00"
                before: "06:00:00"
              # this means we're not in bed and there's someone around to see the warning light
              - condition: state
                entity_id: light.living_room_lamp
                state: "on"
          # this could be made smarter to account for workdays and using the wake-up time
          # remember this light is also part of the night light group
          - condition: time
            after: "06:00:00"
            before: "21:00:00"
    action:
      - service: light.turn_on
        target:
          entity_id: light.foyer
        data:
          profile: night
          # the function maps the state of charge range [100,30] of the battery to the brightness range [2,100] of the light
          # it's a linear function with a negative gradient
          brightness_pct: >-
            {% set state = states('sensor.battery_state_of_charge') | int(0) %}
            {# make the light changes more pronounced #}
            {% set state_bracketed = (state | int(0) + 5) // 10 * 10 %}
            {# this formula sets 30% charge to 100% brightness and 100% charge to 1% brightness #}
            {# https://docs.google.com/spreadsheets/d/1ndnxCt_XyBRBwG9zdRIUBITEb4C2H2VHPHGBMj3uGic/edit#gid=0 #}
            {% set brightness = (-98/70*state_bracketed + 142) | round(0) %}
            {{ min(brightness, 100) }}
  - alias: "Send Backup Power Battery Update"
    id: "0c451149-cda2-4b52-b714-f866034568d4"
    initial_state: true
    trigger:
      - platform: template
        # a multiple of 10
        value_template: >-
          {% set battery_soc = states('sensor.battery_state_of_charge') | int(0) %}
          {% set charge_point = states('sensor.capacity_charge_point') | int(0) %}
          {# we have a critical alert for when we reach 35% #}
          {{ (battery_soc == battery_soc // 10 * 10 or battery_soc == charge_point) and battery_soc > 35 }}
    condition:
      - condition: state
        entity_id: input_boolean.battery_notification_governor
        state: "off"
    action:
      - variables:
          battery_soc: "{{ states('sensor.battery_state_of_charge') | int(0) }}"
      - service: notify.mobile_app_ceres
        data:
          title: "Energy"
          message: >-
            {# we're assuming we will never get to 0% SOC – not coding for that edge case; it will work, but the working will be awkward #}
            {# The backup power battery is {{ 'at ' ~ battery_soc ~ '% and ' ~ battery_status if battery_soc < 100 else 'fully charged.' }} #}
            {% if is_state('sensor.battery_status', 'Charging') and battery_soc < 100 %}
              The backup power battery has charged to {{ battery_soc }}%.
            {% elif is_state('sensor.battery_status', 'Discharging') and battery_soc < 100 %}
              The backup power battery has discharged to {{ battery_soc }}%.
            {% elif is_state('sensor.battery_status', 'Trickling') and battery_soc < 100 %}
              The backup power battery is trickling at {{ battery_soc }}%.
            {% else %}
              The backup power battery is fully charged.
            {% endif %}
          data:
            group: "home-electricity"
            # https://companion.home-assistant.io/docs/notifications/notifications-basic#replacing
            url: homeassistant://navigate/lovelace/resources
            tag: "backup-power-battery-update"
      # this is basically hysteresis
      # https://www.home-assistant.io/integrations/threshold/
      - if:
          - condition: template
            value_template: >-
              {% set current_charge_point = states('sensor.capacity_charge_point') | int(0) %}
              {% set battery_soc = states('sensor.battery_state_of_charge') | int(0) %}
              {{ battery_soc == current_charge_point or battery_soc == battery_soc // 10 * 10 }}
        then:
          - service: input_boolean.turn_on
            target:
              entity_id: input_boolean.battery_notification_governor
  - alias: "Reset Battery Notification Governor"
    id: "0ec6fde8-8919-4784-99f4-e7a0ffc7c71f"
    initial_state: true
    trigger:
      - platform: state
        entity_id: sensor.battery_state_of_charge
    condition:
      - condition: template
        value_template: >-
          {# doesn't seem like we need to do the below; first trialling what we have above #}
          {# battery_soc <= current_charge_point - 5 or battery_soc == battery_soc // 10 * 10 #}
          {% set current_charge_point = states('sensor.capacity_charge_point') | int(0) %}
          {% set battery_soc = states('sensor.battery_state_of_charge') | int(0) %}
          {# don't make this a multiple of 5 or 10, otherwise we'll have a race condition with the automation that notifies #}
          {{ battery_soc < 95 and (battery_soc - current_charge_point) | abs >= 3 }}
    action:
      - service: input_boolean.turn_off
        target:
          entity_id: input_boolean.battery_notification_governor
  - alias: "Backup Power Battery Critical Alert"
    id: "e40cf655-f2fd-4c12-91ca-1a4775c8ae7a"
    initial_state: true
    trigger:
      - platform: numeric_state
        entity_id: sensor.battery_state_of_charge
        below: 31
    # we don't use a condition for whether someone's home – we always want to know if this happens
    condition: []
    action:
      - service: notify.mobile_app_ceres
        data:
          title: "Energy"
          message: >-
            {% set battery_soc = states('sensor.battery_state_of_charge') | int(0) %}
            The backup power battery is critical at {{ battery_soc }}%.
          data:
            group: "home-electricity"
            url: homeassistant://navigate/lovelace/resources
            push:
              sound:
                name: default
                critical: 1
                volume: 1.0
  - alias: "High Inverter Load Alert"
    id: "fb0e42ad-c503-4e94-92d6-e70c359c79bc"
    initial_state: true
    trigger:
      # https://mybroadband.co.za/forum/threads/essential-vs-non-essential-items-on-inverter-explain-please.1185382/
      - platform: numeric_state
        entity_id: sensor.load_percentage
        above: 79
    condition:
      # we think high load is only an issue of there isn't a grid feed for non-essentials to fall back to
      # we don't use a condition for whether someone's home – we always want to know if this happens
      - condition: state
        entity_id: binary_sensor.grid_feed
        state: "off"
    action:
      - service: notify.mobile_app_ceres
        data:
          title: "Energy"
          message: >-
            {% set load_percentage = states('sensor.load_percentage') | int(0) %}
            The backup power inverter load is critical at {{ load_percentage }}%. Consider reducing consumption!
          data:
            group: "home-electricity"
            url: homeassistant://navigate/lovelace/resources
            push:
              sound:
                name: default
                critical: 1
                volume: 1.0
  - alias: "Notify If SolarAssistant MQTT Bridge Status Changed"
    id: "464bc626-ff8d-4f59-88af-71f2b557e69b"
    initial_state: true
    trigger:
      - platform: state
        entity_id:
          - binary_sensor.solarassistant_activity
    action:
      - service: notify.mobile_app_ceres
        data:
          title: "System"
          message: >-
            {% set after = "" %}
            {% set seconds = (as_timestamp(utcnow()) - as_timestamp(trigger.from_state.last_changed)) | int %}
            {% if seconds < 60 %}
              {% set after = seconds ~ " sec" %}
            {% elif seconds < 60*60 %}
              {% set after = seconds // 60 ~ " min" %}
            {% else %}
              {% set h = seconds // (60*60) %}
              {% set m = min(((seconds / (60*60) - seconds // (60*60)) * 60) | round(0), 59) %}
              {% if m < 10 %}
                {% set after = h ~ "h0" ~ m %}
              {% else %}
                {% set after = h ~ "h" ~ m %}
              {% endif %}
            {% endif %}
            The SolarAssistant bridge's activity has {{ 'been resumed after ' ~  after ~ '.' if is_state('binary_sensor.solarassistant_activity', 'on') else 'ceased.' }}
          data:
            group: "home-electricity"
            url: homeassistant://navigate/lovelace/devices

  # todo:
  # 1. condition for low soc or low utilisation
  # 2. if optimistic and soc by 1pm is still less than x% (or y% delta from target), enable grid mode
  # 3. if loadshedding
  - alias: "Set Charge Points"
    id: "5bdbcbfd-243a-4428-a6f3-ed2f98aec603"
    initial_state: true
    trigger:
      - platform: time
        at: "04:00:00"
      - platform: time
        at: "10:00:00"
    # this would ensure we only get a notification if the mode has changed
    # but do we really want to do this? perhaps it's good to know every time, so that a human can do a sanity check
    # condition:
    #   - condition: template
    #     value_template: "{{ states('input_text.last_charge_mode') != states('sensor.charge_mode') }}"
    action:
      - repeat:
          count: "{{ state_attr('sensor.charge_mode', 'settings').keys() | length }}"
          sequence:
            - service: number.set_value
              target:
                entity_id: "number.capacity_point_{{ repeat.index }}"
              data:
                value: "{{ state_attr('sensor.charge_mode', 'settings')[repeat.index][0] }}"
            - delay:
                seconds: 1
            - service: "switch.turn_{{ state_attr('sensor.charge_mode', 'settings')[repeat.index][1] }}"
              target:
                entity_id: "switch.grid_charge_point_{{ repeat.index }}"
            - delay:
                seconds: 1
      - service: notify.mobile_app_ceres
        data:
          title: "Energy"
          message: >-
            {% set mode = states('sensor.charge_mode') | lower %}
            {% set forecast = states('sensor.average_solar_energy_forecast_today') | float(0) | round(1) %}
            The backup power system's charge mode has been set to {{ mode }}. The solar energy production forecast for today is {{ forecast }}kWh.
          data:
            group: "home-electricity"
            url: homeassistant://navigate/lovelace/resources
      # - service: input_text.set_value
      #   target:
      #     entity_id: input_text.last_charge_mode
      #   data:
      #     value: "{{ states('sensor.charge_mode') }}"

  - alias: "Send Daily Solar Summary"
    id: "dd8cd984-90f1-4a9d-b6bb-5411085448b5"
    initial_state: true
    trigger:
      - platform: sun
        event: sunset
        offset: "01:00:00"
    action:
      - service: notify.mobile_app_ceres
        data:
          title: "Energy"
          message: >-
            {% set consumption = states('sensor.daily_solar_energy_consumption') | float(0) %}
            {% set forecast = states('sensor.average_solar_energy_forecast_today') | float(0) | round(1) %}
            {% set utilisation = states('sensor.solar_energy_utilisation_today') | int(0) %}
            {% if utilisation == 100 %}
              You have utilised all of the forecasted solar energy today ({{ consumption }}kWh).
            {% else %}
              You have utilised {{ utilisation }}% ({{ consumption }}kWh) of the forecasted solar energy today ({{ forecast }}kWh).
            {% endif %}
          data:
            group: "home-electricity"
            url: homeassistant://navigate/lovelace/resources

  - alias: "Notify If Charge Shutdown Threshold Changed"
    id: "cc6edc71-cbb9-44e7-972b-a1e6e7589aef"
    initial_state: true
    trigger:
      - platform: state
        entity_id: number.output_shutdown_capacity
    action:
      - service: notify.mobile_app_ceres
        data:
          title: "Energy"
          message: >-
            {% set from = trigger.from_state.state | int(0) %}
            {% set to = trigger.to_state.state | int(0) %}
            {% set user_id = states.context.user_id %}
            {% set triggered_by = (states.person | selectattr('attributes.user_id','==', user_id)) | list %}
            {% set name = "the system" if not triggered_by else state_attr((triggered_by | first).entity_id, "friendly_name").split()[0] %}
            The backup power battery shutdown threshold has been changed from {{ from }}% to {{ to }}% by {{ name }}.
          data:
            group: "home-electricity"
            url: homeassistant://navigate/lovelace/resources
            push:
              sound:
                name: default
                critical: 1
                volume: 1.0
