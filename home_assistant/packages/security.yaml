homeassistant:
  customize:
    camera.security_camera:
      friendly_name: Security Camera
    binary_sensor.foyer_motion_homebridge:
      friendly_name: Foyer Motion Sensor
      icon: mdi:motion-sensor
    light.led:
      icon: mdi:motion-sensor
      friendly_name: Foyer Motion LED
    automation.take_foyer_motion_snapshots:
      icon: mdi:camera
    script.security_camera_record_clip:
      friendly_name: Record Security Camera Clip
      icon: mdi:video
    script.security_camera_create_snapshot:
      friendly_name: Take Security Camera Snapshot
      icon: mdi:camera
    sensor.security_camera_last_snapshot:
      icon: mdi:clock-outline
    sensor.security_camera_last_snapshot_relative:
      icon: mdi:clock-outline
    sensor.security_camera_last_clip_relative:
      icon: mdi:clock-outline
    sensor.motion_detected_last_relative:
      icon: mdi:clock-outline
    input_datetime.security_camera_last_snapshot:
      friendly_name: Security Camera Last Snapshot
    sensor.foyer_motion_detections:
      # unit_of_measurement: count
      state_class: total_increasing
    sensor.doorbell_motion_detections:
      # unit_of_measurement: count
      state_class: total_increasing

input_datetime:
  security_camera_last_snapshot:
    has_date: true
    has_time: true
  security_camera_last_clip:
    has_date: true
    has_time: true
  foyer_motion_detected_last:
    has_date: true
    has_time: true

input_boolean:
  kitchen_smoke_detector_reminder:
    name: Kitchen Smoke Detector Reminder
    icon: mdi:reminder

timer:
  # format: <entity_id>_timer
  main_gate_timer:
    duration: "00:05:00"
    restore: true
  garage_doors_lhs_timer:
    duration: "00:05:00"
    restore: true
  garage_doors_rhs_timer:
    duration: "00:05:00"
    restore: true

binary_sensor:
  - platform: template
    sensors:
      foyer_motion_detected:
        friendly_name: "Foyer Motion Detector"
        device_class: motion
        # this is the occupancy sensor and not the raw motion sensor and is delayed in the homebridge config by 5 sec
        value_template: >-
          {{ is_state('binary_sensor.foyer_occupancy_homebridge', 'on') }}

# https://community.home-assistant.io/t/control-recursion-in-the-folder-watcher-integration/200110
# folder_watcher:
#   - folder: /tmp/
#     patterns:
#       - 'camera.security_camera_*.jpg'

sensor:
  # used by the gallery panel
  - platform: files
    folder: /home/homeassistant/.homeassistant/www/gallery/security_camera/
    filter: 'camera.security_camera_*.jpg'
    name: security_camera_snapshots
    sort: date
    recursive: False

  # used to sync files from tmp to the gallery
  # alt: https://www.home-assistant.io/integrations/folder_watcher/
  # then watch /home/homeassistant/.homeassistant/www/camera.security_camera_last.jpg
  - platform: folder
    folder: /tmp/
    filter: 'camera.security_camera_*.jpg'

  - platform: history_stats
    name: Foyer Motion Detections
    entity_id: binary_sensor.foyer_motion_detected
    state: "on"
    type: count
    start: "{{ today_at() }}"
    end: "{{ now() }}"

  - platform: history_stats
    name: Doorbell Motion Detections
    entity_id: binary_sensor.doorbell_motion_detected
    state: "on"
    type: count
    start: "{{ today_at() }}"
    end: "{{ now() }}"

  - platform: template
    sensors:
      security_camera_last_snapshot:
        device_class: timestamp
        value_template: "{{ states('input_datetime.security_camera_last_snapshot') | as_datetime | as_local }}"
      security_camera_last_snapshot_relative:
        # the first line is a hack to avoid having to write an automation
        # - https://www.home-assistant.io/integrations/template/#working-without-entities
        # - https://community.home-assistant.io/t/heads-up-upcoming-breaking-change-in-the-template-integration/223715
        value_template: >
          {%- set _ = states('sensor.time') %}
          {%- set t = state_attr('input_datetime.security_camera_last_snapshot', 'timestamp') %}
          {%- if t != None %}
            {%- set n = now().timestamp() %}
            {%- set d = n-t %}
            {%- set midnight_today = as_timestamp(strptime(now().date() | string, "%Y-%m-%d")) %}
            {%- set midnight_yesterday = midnight_today - 86400 %}
            {%- set midnight_week_ago = midnight_today - 604800 %}
            {%- if d < 60 %}
              {{ d | int }} seconds ago
            {%- elif d >= 60 and d < 120 %}
              1 minute ago
            {%- elif d < 3600 %}
              {{ (d // 60) | int }} minutes ago
            {%- elif d < n-midnight_today %}
              Today at {{ t | timestamp_custom('%H:%M') }}
            {%- elif d < n-midnight_yesterday %}
              Yesterday at {{ t | timestamp_custom('%H:%M') }}
            {%- elif d < n-midnight_week_ago %}
              {{ t | timestamp_custom('%A at %H:%M') }}
            {%- else %}
              {{ t | timestamp_custom('%Y-%m-%d %H:%M:%S') }}
            {%- endif %}
          {% else %}
            unknown
          {% endif %}
      motion_detected_last_relative:
        value_template: >
          {%- set _ = states('sensor.time') %}
          {%- set t = state_attr('input_datetime.foyer_motion_detected_last', 'timestamp') %}
          {%- if t != None %}
            {%- set n = now().timestamp() %}
            {%- set d = n-t %}
            {%- set midnight_today = as_timestamp(strptime(now().date() | string, "%Y-%m-%d")) %}
            {%- set midnight_yesterday = midnight_today - 86400 %}
            {%- set midnight_week_ago = midnight_today - 604800 %}
            {%- if d < 60 %}
              {{ d | int }} seconds ago
            {%- elif d >= 60 and d < 120 %}
              1 minute ago
            {%- elif d < 3600 %}
              {{ (d // 60) | int }} minutes ago
            {%- elif d < n-midnight_today %}
              Today at {{ t | timestamp_custom('%H:%M') }}
            {%- elif d < n-midnight_yesterday %}
              Yesterday at {{ t | timestamp_custom('%H:%M') }}
            {%- elif d < n-midnight_week_ago %}
              {{ t | timestamp_custom('%A at %H:%M') }}
            {%- else %}
              {{ t | timestamp_local }}
            {%- endif %}
          {% else %}
            unknown
          {% endif %}
      security_camera_last_clip:
        device_class: timestamp
        value_template: "{{ states('input_datetime.security_camera_last_clip') | as_datetime | as_local }}"
      security_camera_last_clip_relative:
        value_template: >
          {%- set _ = states('sensor.time') %}
          {%- set t = state_attr('input_datetime.security_camera_last_clip', 'timestamp') %}
          {%- if t != None %}
            {%- set n = now().timestamp() %}
            {%- set d = n - t %}
            {%- set midnight_today = as_timestamp(strptime(now().date() | string, "%Y-%m-%d")) %}
            {%- set midnight_yesterday = midnight_today - 86400 %}
            {%- set midnight_week_ago = midnight_today - 604800 %}
            {%- if d < 60 %}
              {{ d | int }} seconds ago
            {%- elif d >= 60 and d < 120 %}
              1 minute ago
            {%- elif d < 3600 %}
              {{ (d // 60) | int }} minutes ago
            {%- elif d < n - midnight_today %}
              Today at {{ t | timestamp_custom('%H:%M') }}
            {%- elif d < n - midnight_yesterday %}
              Yesterday at {{ t | timestamp_custom('%H:%M') }}
            {%- elif d < n - midnight_week_ago %}
              {{ t | timestamp_custom('%A at %H:%M') }}
            {%- else %}
              {{ t | timestamp_custom('%Y-%m-%d %H:%M:%S') }}
            {%- endif %}
          {% else %}
            unknown
          {% endif %}

group:
  security_automations:
    name: Security Automations
    entities:
      - automation.take_foyer_motion_snapshots
      - automation.switch_on_lights_if_motion_is_detected

camera:
  - platform: ffmpeg
    name: security_camera
    input: -rtsp_transport tcp -i rtsp://securitypi.local:8554/unicast
    # https://stackoverflow.com/questions/37427498/how-to-escape-double-and-single-quotes-in-yaml-within-the-same-string
    # https://stackoverflow.com/questions/6195872/applying-multiple-filters-at-once-with-ffmpeg
    # https://einar.slaskete.net/2011/09/05/adding-time-stamp-overlay-to-video-stream-using-ffmpeg/
    # also check /home/pi/v4l2rtspserver/v4l2rtspserver.service (on the pi)
    # and /etc/modprobe.d/v4l2loopback.conf
    # https://github.com/umlaeute/v4l2loopback
    # the ha docs state the -pred 1 is the default, but that option is nowhere to be found in the ffmpeg docs
    extra_arguments: >-
      -vf "hue=s=0, drawtext=fontfile=/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf:text='%{localtime\:%Y-%m-%d %T}':fontcolor=white@0.8:x=10:y=10"
  # the proxy camera will contain the overlaid timestamp on the video stream (but you cannot record this stream):
  # https://community.home-assistant.io/t/camera-using-ffmpeg-platform-and-drawtext-overlay-showing-on-snapshot-but-not-recording/372129
  # can one configure an overlay in v4l2? yes, but it's hacky (for a dynamic piece of text)
  # https://www.linux-projects.org/uv4l/tutorials/text-overlay/
  - platform: proxy
    name: security_camera_proxy
    entity_id: camera.security_camera
    # why on earth doesn't this work?
    # https://github.com/home-assistant/core/issues/84576
    # stream_quality: 90
  - platform: local_file
    name: security_camera_last_snapshot
    file_path: /home/homeassistant/.homeassistant/www/camera.security_camera_last.jpg
  - platform: ffmpeg
    name: security_camera_last_clip
    input: /home/homeassistant/.homeassistant/www/camera.security_camera_last.mp4

shell_command:
  copy_last_snapshot_image: "cp `ls -t /tmp/camera.security_camera_*.jpg | head -n1` /home/homeassistant/.homeassistant/www/camera.security_camera_last.jpg"
  copy_last_video_clip: "cp `ls -t /tmp/camera.security_camera_*.mp4 | head -n1` /home/homeassistant/.homeassistant/www/camera.security_camera_last.mp4"
  # keep a rolling buffer of n snapshots by always copying only the latest ones and removing the oldest
  # rsync will only copy what's new up to n and the second command will remove what's extra (can't do it with rsync's --delete unless the source is a directory)
  # this is to avoid the distination from growing indefinitely
  sync_snapshots: "rsync -a `ls /tmp/camera.security_camera_*.jpg | sort | tail -n5` /home/homeassistant/.homeassistant/www/gallery/security_camera/"
  trim_snapshots: "find /home/homeassistant/.homeassistant/www/gallery/security_camera/ -maxdepth 1 -type f | sort -r | tail -n +6 | xargs -I {} rm -- /home/homeassistant/.homeassistant/www/gallery/security_camera/{}"
  trim_doorbell_snapshots: "find /home/homeassistant/.homeassistant/www/gallery/doorbell/*.jpg -type f -mtime +1 -delete"

script:
  security_camera_record_clip:
    # todo: fire a custom event to catch in another automation and turn on the light (if dark and not already on, etc.)
    mode: queued
    sequence:
      - service: camera.record
        # https://github.com/home-assistant/core/issues/40241
        # https://github.com/home-assistant/core/issues/40241#issuecomment-1220046988
        # entity_id: camera.security_camera
        data:
          entity_id: camera.security_camera
          # https://community.home-assistant.io/t/referencing-entity-id-causing-a-template-error/236597
          # filename: '/tmp/{{ entity_id.entity_id }}_{{ now().strftime("%Y%m%d-%H%M%S") }}.mp4'
          # filename: '/tmp/camera.security_camera_{{ now().strftime("%Y%m%d-%H%M%S") }}.mp4'
          filename: '/tmp/{{ "{{ entity_id.entity_id }}" }}_{{ now().strftime("%Y%m%d-%H%M%S") }}.mp4'
          duration: 10
      # would love to get rid of this. maybe watch for an updated timestamp on the file?
      - delay: "00:00:15"
      - service: shell_command.copy_last_video_clip
      - service: input_datetime.set_datetime
        entity_id: input_datetime.security_camera_last_clip
        data:
          datetime: "{{ now() }}"

  security_camera_create_snapshot:
    # https://www.reddit.com/r/homeassistant/comments/9fz5e4/show_the_x_most_recent_pictures_in_a_directory/e69alpc/
    mode: queued
    sequence:
      - choose:
          # same as automation: "Switch On Lights If Motion Is Detected"
          conditions:
            - condition: or
              conditions:
                - condition: sun
                  after: sunset
                  after_offset: "-02:00:00"
                - condition: sun
                  before: sunrise
                  before_offset: "-00:30:00"
                - condition: state
                  entity_id: binary_sensor.low_light
                  state: "on"
          sequence:
            - wait_template: "{{ is_state('light.foyer', 'on') }}"
              timeout:
                seconds: 1
      - service: camera.snapshot
        # https://github.com/home-assistant/core/issues/40241
        # entity_id: camera.security_camera
        data:
          entity_id: camera.security_camera
          # https://community.home-assistant.io/t/referencing-entity-id-causing-a-template-error/236597
          # filename: '/tmp/{{ entity_id.entity_id }}_{{ now().strftime("%Y%m%d-%H%M%S") }}.jpg'
          # filename: '/tmp/camera.security_camera_{{ now().strftime("%Y%m%d-%H%M%S") }}.jpg'
          filename: '/tmp/{{ "{{ entity_id.entity_id }}" }}_{{ now().strftime("%Y%m%d-%H%M%S") }}.jpg'
      - service: input_datetime.set_datetime
        entity_id: input_datetime.security_camera_last_snapshot
        data:
          datetime: "{{ now() }}"
      - service: shell_command.copy_last_snapshot_image

automation:
  - alias: "Take Foyer Motion Snapshots"
    id: "e160923e-daf9-417d-9561-174feb2cd350"
    initial_state: true
    trigger:
      platform: state
      entity_id: binary_sensor.foyer_motion_homebridge
      to: "on"
    mode: queued
    condition:
      - condition: state
        entity_id: binary_sensor.anybody_home
        state: "off"
      - condition: template
        value_template: >-
          {# prevent the action of the light turning off after the last trigger to trigger the motion sensor again immediately #}
          {{ (utcnow() - states.light.foyer.last_changed).seconds >= 1 }}
    action:
      # blocking call
      - service: script.security_camera_create_snapshot
      - condition: state
        entity_id: group.security_automations
        state: "on"
      - service: notify.family
        data:
          title: "⚠️ Security"
          message: "Motion detected!"
          data:
            group: "security-camera-snapshots"
            url: homeassistant://navigate/lovelace/security
            attachment:
              # url: https://geoexpressinternational.com/wp-content/plugins/webp-express/test/test-pattern-tv.jpg
              # url: http://securitypi.local/local/camera.security_camera_last.jpg
              url: !secret security_camera_last_snapshot_url
              # content-type: jpg
              # hide-thumbnail: false

  - alias: "Foyer Motion Detected Last"
    id: "ef364d58-2cb7-4d5b-8e96-8724c132365a"
    initial_state: true
    trigger:
      platform: state
      entity_id: binary_sensor.foyer_motion_homebridge
      to: "on"
    action:
      - service: input_datetime.set_datetime
        entity_id: input_datetime.foyer_motion_detected_last
        data:
          datetime: "{{ now() }}"

  - alias: "Switch On Lights If Motion Is Detected"
    id: "a3e56532-e1e9-42a1-9371-bfe2ad04c2af"
    # only at night though
    initial_state: true
    trigger:
      platform: state
      entity_id: binary_sensor.foyer_motion_homebridge
      to: "on"
    condition:
      - condition: state
        entity_id: binary_sensor.anybody_home
        state: "off"
      - condition: template
        # todo: might need to check the light state? implicitly assuming here that the last state change was to "off"
        value_template: >-
          {# prevent the light turning off after the last trigger to trigger the motion sensor again immediately #}
          {{ (utcnow() - states.light.foyer.last_changed).seconds >= 1 }}
      # use or, because, you can't be after sunset AND before sunrise ON THE SAME DAY
      - condition: or
        conditions:
          - condition: sun
            after: sunset
            after_offset: "-02:00:00"
          - condition: sun
            before: sunrise
            before_offset: "-00:30:00"
          - condition: state
            entity_id: binary_sensor.low_light
            state: "on"
    action:
      - service: scene.turn_on
        target:
          entity_id: scene.inside_security_lights
      - service: script.turn_on
        target:
          entity_id: script.action_light_group_timers
        data:
          variables:
            light_group: light.inside_security_group
            timer_action: start

  - alias: "Motion Indicator On"
    id: "3cd46514-8bea-4d73-9625-ae4487cca15d"
    initial_state: true
    trigger:
      platform: state
      entity_id: binary_sensor.foyer_motion_detected
      to: "on"
    action:
      - service: light.turn_on
        entity_id: light.led

  - alias: "Motion Indicator Off"
    id: "4e7d3f9b-e91a-46d9-afc3-83f40ee90636"
    initial_state: true
    trigger:
      platform: state
      entity_id: binary_sensor.foyer_motion_detected
      to: "off"
    action:
      - service: light.turn_off
        entity_id: light.led

  - alias: "Blink Motion Indicator While Recording"
    id: "8daef3c1-2edf-4fc0-b687-3df4f782c348"
    initial_state: true
    trigger:
      platform: state
      entity_id: script.security_camera_record_clip
      to: "on"
    mode: single
    action:
      # stop motion indicator
      - service: automation.turn_off
        entity_id: automation.motion_indicator_on
      # blink
      - repeat:
          sequence:
            - service: light.turn_on
              entity_id: light.led
            - delay:
                milliseconds: 500
            - service: light.turn_off
              entity_id: light.led
            - delay:
                milliseconds: 500
          until:
            - condition: state
              entity_id: script.security_camera_record_clip
              state: "off"
      # resume motion indicator
      - service: automation.turn_on
        entity_id: automation.motion_indicator_on

  - alias: "Update Security Camera Snapshot Gallery"
    id: "41ab0956-cd7b-498d-bf4c-bce81da3c5a3"
    trigger:
      - platform: state
        entity_id: sensor.tmp
        attribute: number_of_files
    mode: queued
    action:
      - service: shell_command.sync_snapshots
      - service: shell_command.trim_snapshots

  - alias: "Start Cover Timer When Opened"
    id: "e2ec6802-6131-4264-8226-5df65c900699"
    initial_state: true
    trigger:
      - platform: state
        entity_id:
          - cover.main_gate
          - cover.garage_doors_lhs
          - cover.garage_doors_rhs
        to: "open"
    mode: queued
    action:
      - service: timer.start
        target:
          entity_id: "timer.{{ trigger.entity_id | replace('cover.', '') }}_timer"
        data:
          duration: "00:05:00"
      - service: input_datetime.set_datetime
        target:
          entity_id: "input_datetime.{{ trigger.entity_id | replace('cover.', '') }}_opened"
        data:
          datetime: "{{ now() }}"

  - alias: "Update Timers For Covers On Startup"
    id: "29fc90a8-8fd1-4aad-a803-81db261509f2"
    initial_state: true
    trigger:
      - platform: homeassistant
        event: start
    mode: single
    action:
      - repeat:
          for_each: "{{ expand('group.covers_with_timers') | map(attribute='entity_id') | list }}"
          sequence:
            # this will fire regardless of whether there's a timer running or it was disabled
            # the implication is: a disabled timer typically means we know a cover is open and that it's on purpose,
            # but we'll remind ourselves anyway, just in case
            - if:
                - condition: template
                  value_template: "{{ is_state(repeat.item, 'open') }}"
              then:
                - service: notify.mobile_app_ceres
                  data:
                    title: "⚠️ Security"
                    message: >-
                      {% set name = None %}
                      {% if repeat.item | regex_search("lhs", ignorecase=True) %}
                        {% set name = "Rouvé's garage door" %}
                      {% elif repeat.item | regex_search("rhs", ignorecase=True) %}
                        {% set name = "Pieter's garage door" %}
                      {% else %}
                        {% set name = "The main gate" %}
                      {% endif %}
                      {{ name }} is open.
                    data:
                      # group notifications by the timer entity
                      group: "timer.{{ repeat.item | replace('cover.', '') }}_timer"
                      url: homeassistant://navigate/lovelace/main
                      actions:
                        - action: "CLOSE_COVER"
                          title: "Close now"
                        - action: "EXTEND_COVER_TIMEOUT_10_MIN"
                          title: "Wait 10 min"
                        - action: "EXTEND_COVER_TIMEOUT_30_MIN"
                          title: "Wait 30 min"
                        - action: "DISABLE_COVER_TIMEOUT"
                          title: "Disable"
                      action_data:
                        # convert this to the cover entity to use in the automation that receives this
                        cover_id: "{{ repeat.item }}"
                        timer_id: "timer.{{ repeat.item | replace('cover.', '') }}_timer"
                      push:
                        # perhaps one day it will be possible to use a template to only make it critical under certain conditions
                        sound:
                          name: default
                          critical: 1
                          volume: 0.5
                # saving for later:
                # if e.g. the gate is open, but the timer was disabled, don't start it now, since it was intentional
                # if the timer wasn't disabled, it will be restored, so the normal mechanism will notify
                # in other words, maintain the status quo
                # can also just create a guard condition to not continue (simpler)
                # - if:
                #     - condition: template
                #       value_template: "{{ is_state('timer.' ~ repeat.item | replace('cover.', 'timer.') ~ '_timer', 'idle') }}"
                #   then:
                #     - service: timer.start
                #       target:
                #         entity_id: "timer.{{ repeat.item | replace('cover.', '') }}_timer"
                #       data:
                #         duration: "00:05:00"
              else:
                # if the cover got opened while the server was running, but closed while down
                - service: timer.cancel
                  target:
                    entity_id: "timer.{{ repeat.item | replace('cover.', '') }}_timer"

  - alias: "Cover Left Open Alert"
    id: "26bf6fd5-1caf-4c21-ac29-8cd7985b2de7"
    initial_state: true
    trigger:
      - platform: event
        event_type: timer.finished
        event_data:
          entity_id: timer.main_gate_timer
      - platform: event
        event_type: timer.finished
        event_data:
          entity_id: timer.garage_doors_lhs_timer
      - platform: event
        event_type: timer.finished
        event_data:
          entity_id: timer.garage_doors_rhs_timer
    mode: queued
    condition:
      - condition: or
        conditions:
          - condition: state
            entity_id: cover.main_gate
            state: "open"
          - condition: state
            entity_id: cover.garage_doors_lhs
            state: "open"
          - condition: state
            entity_id: cover.garage_doors_rhs
            state: "open"
    action:
      # https://companion.home-assistant.io/docs/notifications/critical-notifications/
      - service: notify.mobile_app_ceres
        data:
          title: "⚠️ Security"
          # timer.garage_doors_lhs_timer -> Pieter's garage door
          message: >-
            {% set name = None %}
            {% if trigger.event.data.entity_id | regex_search("lhs", ignorecase=True) %}
              {% set name = "Rouvé's garage door" %}
            {% elif trigger.event.data.entity_id | regex_search("rhs", ignorecase=True) %}
              {% set name = "Pieter's garage door" %}
            {% else %}
              {% set name = "The main gate" %}
            {% endif %}
            {% set last_opened_entity = trigger.event.data.entity_id | replace('_timer', '_opened') | replace('timer.', 'input_datetime.') %}
            {% set last_opened = as_timestamp(states(last_opened_entity)) %}
            {% set utc_now_ts = as_timestamp(utcnow()) %}
            {{ name }} has been left open for {{ ((utc_now_ts - last_opened) // 60) | int }} min.
          data:
            # https://github.com/home-assistant/iOS/issues/579
            # https://github.com/home-assistant/iOS/issues/215
            # https://companion.home-assistant.io/docs/notifications/notifications-basic (to clear and/or replace; note the quotes around 'apns-collapse-id')
            # https://developer.apple.com/documentation/usernotifications/unnotificationrequest/1649634-identifier
            # by apple rules, critical notifications can't be grouped or replaced
            # group notifications by the timer entity
            group: "{{ trigger.event.data.entity_id }}"
            tag: "{{ trigger.event.data.entity_id }}"
            url: homeassistant://navigate/lovelace/main
            actions:
              - action: "CLOSE_COVER"
                title: "Close now"
              - action: "EXTEND_COVER_TIMEOUT_10_MIN"
                title: "Wait 10 min"
              - action: "EXTEND_COVER_TIMEOUT_30_MIN"
                title: "Wait 30 min"
              - action: "DISABLE_COVER_TIMEOUT"
                title: "Disable"
            action_data:
              # convert this to the cover entity to use in the automation that receives this
              cover_id: "{{ trigger.event.data.entity_id | replace('_timer', '') | replace('timer', 'cover') }}"
              timer_id: "{{ trigger.event.data.entity_id }}"
            push:
              # perhaps one day it will be possible to use a template to only make it critical under certain conditions
              sound:
                name: default
                critical: 1
                volume: 0.5
      - service: timer.start
        data:
          entity_id: "{{ trigger.event.data.entity_id }}"

  - alias: "Close Cover From Alert Action"
    id: "4a65ac41-3dae-43dd-ae75-486adfc747b7"
    trigger:
      - platform: event
        event_type: mobile_app_notification_action
        event_data:
          action: CLOSE_COVER
    condition:
      # check this for that case where the notification gets sent just as the gate closes
      - condition: template
        value_template: "{{ is_state(trigger.event.data.action_data.cover_id, 'open') }}"
    action:
      - service: cover.close_cover
        data:
          entity_id: "{{ trigger.event.data.action_data.cover_id }}"

  - alias: "Extend Cover Timeout From Alert Action"
    id: "1d1b940e-c70d-47e2-bb39-1e984e5514f1"
    trigger:
      - platform: event
        event_type: mobile_app_notification_action
        event_data:
          action: EXTEND_COVER_TIMEOUT_05_MIN
      - platform: event
        event_type: mobile_app_notification_action
        event_data:
          action: EXTEND_COVER_TIMEOUT_10_MIN
      - platform: event
        event_type: mobile_app_notification_action
        event_data:
          action: EXTEND_COVER_TIMEOUT_30_MIN
    action:
      - service: timer.start
        data:
          # {
          #   'id': '0',
          #   'idx': '0',
          #   'platform':
          #     'event',
          #     'event': <Event mobile_app_notification_action[R]:
          #       action=EXTEND_COVER_TIMEOUT_05_MIN,
          #       action_data=
          #         cover_id=cover.garage_doors_rhs,
          #         timer_id=timer.garage_doors_rhs_timer>,
          #       'description': "event 'mobile_app_notification_action'"
          # }
          entity_id: "{{ trigger.event.data.action_data.timer_id }}"
          # in seconds
          duration: "{{ trigger.event.data.action | regex_findall_index(find='\\d+', index=0, ignorecase=False) | int * 60 }}"

  - alias: "Disable Cover Timeout From Alert Action"
    id: "a8f612ad-fade-45cb-b774-d65feb8831ae"
    trigger:
      - platform: event
        event_type: mobile_app_notification_action
        event_data:
          action: DISABLE_COVER_TIMEOUT
    action:
      - service: timer.cancel
        target:
          entity_id: "{{ trigger.event.data.action_data.timer_id }}"

  - alias: "Stop Cover Timer When Closed"
    id: "7ccfaf0f-ab16-4a3b-9b43-e884138971b2"
    initial_state: true
    trigger:
      - platform: state
        entity_id:
          - cover.main_gate
          - cover.garage_doors_lhs
          - cover.garage_doors_rhs
        to: "closed"
    mode: queued
    action:
      - service: timer.cancel
        target:
          entity_id: "{{ trigger.entity_id | replace('cover', 'timer') }}_timer"

  - alias: "Notify If Cover Was Left Open"
    id: "db54683c-0216-4985-9136-de81baee3e00"
    initial_state: true
    trigger:
      platform: state
      entity_id:
        - cover.main_gate
        - cover.garage_doors_lhs
        - cover.garage_doors_rhs
      to: "closed"
      # prevent false positive due to flaky connectivity or after loadshedding and sensors being unavailable
      not_from: "unavailable"
    mode: queued
    condition:
      condition: template
      value_template: >-
        {% set timer_entity = trigger.entity_id | replace('cover', 'timer') ~ "_timer" %}
        {% set duration = state_attr(timer_entity, 'duration') %}
        {% set (hours, minutes, seconds) = duration.split(':') | map('int') %}
        {% set threshold =  minutes*60 + seconds %}
        {% set last_opened_entity = trigger.entity_id | replace('cover', 'input_datetime') ~ "_opened" %}
        {% set last_opened = as_timestamp(states(last_opened_entity)) %}
        {% set utc_now_ts = as_timestamp(utcnow()) %}
        {{ (utc_now_ts - last_opened) | int >= threshold }}
    action:
      - service: notify.mobile_app_ceres
        data:
          message: "clear_notification"
          data:
            tag: "{{ trigger.entity_id | replace('cover', 'timer') }}_timer"
      # we need to wait, otherwise it seems like the next notification will be cleared too
      # could be a race condition in HA, the companion app, ios or firebase – who knows...
      - delay:
          seconds: 1
      - service: notify.mobile_app_ceres
        data:
          title: "⚠️ Security"
          # cover.garage_doors_rhs -> Pieter's garage door
          message: >-
            {% set name = None %}
            {% if trigger.entity_id | regex_search("lhs", ignorecase=True) %}
              {% set name = "Rouvé's garage door" %}
            {% elif trigger.entity_id | regex_search("rhs", ignorecase=True) %}
              {% set name = "Pieter's garage door" %}
            {% else %}
              {% set name = "The main gate" %}
            {% endif %}
            {% set last_opened_entity = trigger.entity_id | replace('cover', 'input_datetime') ~ "_opened" %}
            {% set last_opened = as_timestamp(states(last_opened_entity)) %}
            {{ name }} has been closed after {{ ((as_timestamp(utcnow()) - last_opened) // 60) | int }} min.
          data:
            # the timer entity
            # cover.garage_doors_rhs -> timer.garage_doors_rhs_timer
            group: "{{ trigger.entity_id | replace('cover', 'timer') }}_timer"
            tag: "{{ trigger.entity_id | replace('cover', 'timer') }}_timer"
            url: homeassistant://navigate/lovelace/main

  - alias: "Alert If Garages Opened Or Closed When Not Supposed To"
    id: "ad4db54e-fbb3-4377-9711-4731d58da0f5"
    initial_state: true
    trigger:
      platform: state
      entity_id:
        - cover.garage_doors_lhs
        - cover.garage_doors_rhs
      from:
        - "open"
        - "closed"
      to:
        - "open"
        - "closed"
    condition:
      - condition: state
        entity_id: binary_sensor.anybody_home
        state: "off"
    action:
      - variables:
          message: >-
            {% set name = None %}
            {% if trigger.entity_id | regex_search("lhs", ignorecase=True) %}
              {% set name = "Rouvé's garage door" %}
            {% else %}
              {% set name = "Pieter's garage door" %}
            {% endif %}
            {% set action = 'opened' if (trigger.to_state.state == 'open') else 'closed' %}
            {{ name }} has been {{ action }}.
      # https://companion.home-assistant.io/docs/notifications/notification-commands#request-location-updates
      - service: notify.mobile_app_ceres
        data:
          message: "request_location_update"
      - service: notify.mobile_app_rouve
        data:
          message: "request_location_update"
      - delay:
          seconds: 45
      - choose:
          - conditions:
              - condition: template
                value_template: "{{ trigger.to_state.state == 'open' }}"
            sequence:
              - service: notify.mobile_app_ceres
                data:
                  title: "⚠️ Security"
                  message: "{{ message }}"
                  data:
                    group: "{{ trigger.entity_id }}"
                    url: homeassistant://navigate/lovelace/security
                    actions:
                      - action: "CLOSE_COVER"
                        title: "Close now"
                    action_data:
                      # convert this to the cover entity to use in the automation that receives this
                      cover_id: "{{ trigger.entity_id | replace('_timer', '') | replace('timer', 'cover') }}"
                      timer_id: "{{ trigger.entity_id }}"
                    # todo: make critical?
        default:
          - service: notify.mobile_app_ceres
            data:
              title: "⚠️ Security"
              message: "{{ message }}"
              data:
                group: "{{ trigger.entity_id }}"
                url: homeassistant://navigate/lovelace/security

  - alias: "Alert If Gate Opened Or Closed When Not Supposed To"
    id: "62a52103-4d0d-429e-a59a-fc674d72f3ee"
    initial_state: true
    trigger:
      platform: state
      entity_id:
        - cover.main_gate
      # prevent false positive due to flaky connectivity or after loadshedding and sensors being unavailable
      not_from: "unavailable"
    condition:
      condition: and
      conditions:
        - condition: state
          entity_id: binary_sensor.anybody_home
          state: "off"
          for:
            minutes: 1
        - condition: state
          entity_id: binary_sensor.tenant_present
          state: "off"
        - condition: state
          entity_id: binary_sensor.housekeeper_mobile_phone
          state: "off"
    action:
      - variables:
          message: >-
            {% set action = 'opened' if (trigger.to_state.state == 'open') else 'closed' %}
            The main gate has been {{ action }}.
      # can remove this now since the alarm has been integrated into the anybody home binary sensor
      # https://companion.home-assistant.io/docs/notifications/notification-commands#request-location-updates
      # - service: notify.mobile_app_ceres
      #   data:
      #     message: "request_location_update"
      # - service: notify.mobile_app_rouve
      #   data:
      #     message: "request_location_update"
      - service: homeassistant.update_entity
        target:
          entity_id: binary_sensor.tenant_mobile_phone
      - delay:
          seconds: 15
      - choose:
          - conditions:
              - condition: template
                value_template: "{{ trigger.to_state.state == 'open' }}"
            sequence:
              - service: notify.mobile_app_ceres
                data:
                  title: "⚠️ Security"
                  message: "{{ message }}"
                  data:
                    group: "{{ trigger.entity_id }}"
                    url: homeassistant://navigate/lovelace/security
                    # https://companion.home-assistant.io/docs/notifications/actionable-notifications#building-notification-action-scripts
                    actions:
                      - action: "CLOSE_COVER"
                        title: "Close now"
                    action_data:
                      # convert this to the cover entity to use in the automation that receives this
                      cover_id: "{{ trigger.entity_id | replace('_timer', '') | replace('timer', 'cover') }}"
                      timer_id: "{{ trigger.entity_id }}"
                    # todo: make critical?
        default:
          - service: notify.mobile_app_ceres
            data:
              title: "⚠️ Security"
              message: "{{ message }}"
              data:
                group: "{{ trigger.entity_id }}"
                url: homeassistant://navigate/lovelace/main

  - alias: "Alert When Smoke Detected"
    id: "3f2d5457-34db-464f-88d2-515fbb3e202a"
    trigger:
      - platform: state
        entity_id:
          - binary_sensor.kitchen_smoke
        # https://www.home-assistant.io/integrations/binary_sensor/
        to: "on"
        id: "real"
      # https://shelly-api-docs.shelly.cloud/gen2/ComponentsAndServices/Smoke/
      # curl -s -X GET http://<host>:<port>/api/webhook/kitchen_smoke_alarm_test
      - platform: webhook
        webhook_id: kitchen_smoke_alarm_test
        local_only: true
        # HTTP GET and HEAD requests are not enabled by default
        # https://www.home-assistant.io/docs/automation/trigger/#webhook-trigger
        # WHY IS THIS A GET?
        allowed_methods:
          - GET
        id: "test_kitchen_smoke"
    action:
      - service: notify.mobile_app_ceres
        data:
          title: "🔥 Safety"
          message: >-
            {% set prefix = '' %}
            {% set entity_id = '' %}
            {% if 'id' in trigger and 'test' in trigger.id %}
              {% set prefix = '[Test]' %}
              {% set entity_id = trigger.id | replace('test_', 'binary_sensor.') %}
            {% else %}
              {% set entity_id = trigger.entity_id %}
            {% endif %}
            {% set area = area_name(entity_id) | lower %}
            {{ prefix }} Smoke has been detected in the {{ area }}!
          data:
            group: "home-safety"
            url: homeassistant://navigate/lovelace/security
            push:
              sound:
                name: default
                critical: 1
                volume: 0.5
            # todo: alert security company
            # request logged with olarm to see if they can provide an http request for a panic
            # for event automation:
            # - service: alarm_control_panel.alarm_trigger
            #   target:
            #     entity_id: alarm_control_panel.home
            # data:
            #   actions:
            #     - action: "ALERT_SECURITY_COMPANY"
            #       title: "Alert security company"
      - if:
          - "{{ 'id' in trigger and 'test' in trigger.id }}"
        then:
          - service: input_boolean.turn_off
            target:
              entity_id: >-
                {% set reminder_entity = trigger.id | replace('test_', 'input_boolean.') ~ '_detector_reminder' %}
                {{ reminder_entity }}

  - alias: "Enable Smoke Detector Testing Reminders"
    id: "6e3c5bfb-6830-4aa4-b70c-bd53db3b51a6"
    trigger:
      - platform: time
        at: "01:00:00"
    condition:
      - condition: template
        value_template: "{{ now().day == 1 }}"
    action:
      - service: input_boolean.turn_on
        target:
          entity_id:
            - input_boolean.kitchen_smoke_detector_reminder

  - alias: "Remind To Test Smoke Detectors"
    id: "07bcfd63-e5a3-44f1-9ff1-c8240e5f8ca6"
    variables:
      smoke_detectors:
        - binary_sensor.kitchen_smoke
    trigger:
      - platform: time
        at: "09:00:00"
    action:
      - repeat:
          for_each: "{{ smoke_detectors }}"
          sequence:
            - if:
                - condition: template
                  value_template: >-
                    {% set reminder_entity = repeat.item | replace('binary_sensor', 'input_boolean') ~ '_detector_reminder' %}
                    {{ is_state(reminder_entity,'on') }}
              then:
                - service: notify.mobile_app_ceres
                  data:
                    title: "✅ Safety Check"
                    message: >-
                      {% set area = area_name(repeat.item) | lower %}
                      Please test the {{ area }}'s smoke detector by pressing and holding the button for 3 sec.
                    data:
                      group: "home-safety"
                      url: homeassistant://navigate/lovelace/security

  - alias: "Alert When Cabinet Opened"
    id: "f9a95e6c-e0bf-45a4-bf5c-3b774ff3fd47"
    trigger:
      - platform: state
        entity_id: binary_sensor.cabinet_door
        # https://www.home-assistant.io/integrations/binary_sensor/
        # not open/close unless it's a cover
        to: "on"
        # not going to use this, since it seems the sensor just goes unavailable,
        # but will come back online when the state changes – annoyingly so (just stay online)
        # not_from: "unavailable"
    action:
      - choose:
          - conditions:
              - condition: time
                after: "21:00:00"
                before: "07:00:00"
              # maybe later; not sure yet
              # - condition: state
              #   entity_id: binary_sensor.pieter_present
              #   state: "off"
            sequence:
              - service: notify.mobile_app_ceres
                data:
                  title: "⚠️ Security"
                  message: >-
                    The backup power system's cabinet has been opened unexpectedly!
                  data:
                    group: "home-security"
                    url: homeassistant://navigate/lovelace/security
                    push:
                      sound:
                        name: default
                        critical: 1
                        volume: 0.5
        default:
          - service: notify.mobile_app_ceres
            data:
              title: "⚠️ Security"
              message: >-
                The backup power system's cabinet has been opened.
              data:
                group: "home-security"
                url: homeassistant://navigate/lovelace/security

  - alias: "Track Motion At Doorbell"
    id: "bec7c2b6-265a-41b1-80c8-48a999f65d35"
    trigger:
      - platform: state
        entity_id: binary_sensor.doorbell_motion_detected
        to: "on"
    mode: single
    condition:
      - condition: template
        value_template: "{{ now() - this.attributes.last_triggered > timedelta(minutes=1) }}"
      - condition: or
        conditions:
          - condition: and
            conditions:
              # proxy for sleeping/in bed
              # - condition: state
              #   entity_id: light.living_room_lamp
              #   state: "off"
              - condition: time
                after: "17:00:00"
                before: "09:00:00"
              - condition: template
                value_template: "{{ states('sensor.solar_angle') | float(0) >= -5 }}"
          - condition: state
            entity_id: binary_sensor.anybody_home
            state: "off"
    action:
      # non-blocking call
      - service: script.turn_on
        target:
          entity_id: script.take_snapshot
        data:
          variables:
            camera_entity_id: camera.doorbell
            subdirectory: "doorbell"

  - alias: "Trim Doorbell Snapshots"
    id: "e774768f-f464-4c34-8ed4-7e7c31d50804"
    trigger:
      - platform: time_pattern
        hours: "/1"
    mode: single
    action:
      - service: shell_command.trim_doorbell_snapshots
