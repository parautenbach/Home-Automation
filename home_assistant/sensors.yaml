- platform: time_date
  display_options:
    - 'time'
    - 'date'
    - 'date_time'
    - 'date_time_utc'
    - 'date_time_iso'
    - 'time_date'
    - 'time_utc'

- platform: systemmonitor
  resources:
    - type: disk_use_percent
      arg: /
    - type: memory_use_percent
    - type: processor_use
    - type: load_1m
    - type: load_5m
    - type: load_15m
    - type: throughput_network_in
      arg: enp3s0
    - type: throughput_network_out
      arg: enp3s0
    - type: last_boot

- platform: command_line
  name: server_cpu_temp
  command: "cat /sys/class/thermal/thermal_zone0/temp"
  unit_of_measurement: "°C"
  value_template: '{{ value | multiply(0.001) | round(2)  }}'
  scan_interval: 60

- platform: template
  sensors:
    solar_angle:
      friendly_name: "Sun Angle"
      unit_of_measurement: '°'
      value_template: "{{ '%+.1f' | format(state_attr('sun.sun', 'elevation')) }}"
    security_camera_last_clip:
      device_class: timestamp
      value_template: "{{ states('input_datetime.security_camera_last_clip') }}"
    security_camera_last_clip_relative:
      value_template: >
        {%- set _ = states('sensor.time') %}
        {%- set t = state_attr('input_datetime.security_camera_last_clip', 'timestamp') %}
        {%- if t != None %}
          {%- set n = now().timestamp() %}
          {%- set d = n-t %}
          {%- set midnight_today = as_timestamp(strptime(now().date() | string, "%Y-%m-%d")) %}
          {%- set midnight_yesterday = midnight_today - 86400 %}
          {%- set midnight_week_ago = midnight_today - 604800 %}
          {%- if d < 60 %}
            {{ d | int }} seconds ago
          {%- elif d >= 60 and d < 120 %}
            1 minute ago
          {%- elif d < 3600 %}
            {{ (d // 60) | int }} minutes ago
          {%- elif d < n-midnight_today %}
            Today at {{ t | timestamp_custom('%H:%M') }}
          {%- elif d < n-midnight_yesterday %}
            Yesterday at {{ t | timestamp_custom('%H:%M') }}
          {%- elif d < n-midnight_week_ago %}
            {{ t | timestamp_custom('%A at %H:%M') }}
          {%- else %}
            {{ t | timestamp_local }}
          {%- endif %}
        {% else %}
          unknown
        {% endif %}
    security_camera_last_snapshot:
      device_class: timestamp
      value_template: "{{ states('input_datetime.security_camera_last_snapshot') }}"
    security_camera_last_snapshot_relative:
      # the first line is a hack to avoid having to write an automation
      # - https://www.home-assistant.io/integrations/template/#working-without-entities
      # - https://community.home-assistant.io/t/heads-up-upcoming-breaking-change-in-the-template-integration/223715
      value_template: >
        {%- set _ = states('sensor.time') %}
        {%- set t = state_attr('input_datetime.security_camera_last_snapshot', 'timestamp') %}
        {%- if t != None %}
          {%- set n = now().timestamp() %}
          {%- set d = n-t %}
          {%- set midnight_today = as_timestamp(strptime(now().date() | string, "%Y-%m-%d")) %}
          {%- set midnight_yesterday = midnight_today - 86400 %}
          {%- set midnight_week_ago = midnight_today - 604800 %}
          {%- if d < 60 %}
            {{ d | int }} seconds ago
          {%- elif d >= 60 and d < 120 %}
            1 minute ago
          {%- elif d < 3600 %}
            {{ (d // 60) | int }} minutes ago
          {%- elif d < n-midnight_today %}
            Today at {{ t | timestamp_custom('%H:%M') }}
          {%- elif d < n-midnight_yesterday %}
            Yesterday at {{ t | timestamp_custom('%H:%M') }}
          {%- elif d < n-midnight_week_ago %}
            {{ t | timestamp_custom('%A at %H:%M') }}
          {%- else %}
            {{ t | timestamp_local }}
          {%- endif %}
        {% else %}
          unknown
        {% endif %}
    motion_detected_last_relative:
      value_template: >
        {%- set _ = states('sensor.time') %}
        {%- set t = state_attr('input_datetime.motion_detected_last', 'timestamp') %}
        {%- if t != None %}
          {%- set n = now().timestamp() %}
          {%- set d = n-t %}
          {%- set midnight_today = as_timestamp(strptime(now().date() | string, "%Y-%m-%d")) %}
          {%- set midnight_yesterday = midnight_today - 86400 %}
          {%- set midnight_week_ago = midnight_today - 604800 %}
          {%- if d < 60 %}
            {{ d | int }} seconds ago
          {%- elif d >= 60 and d < 120 %}
            1 minute ago
          {%- elif d < 3600 %}
            {{ (d // 60) | int }} minutes ago
          {%- elif d < n-midnight_today %}
            Today at {{ t | timestamp_custom('%H:%M') }}
          {%- elif d < n-midnight_yesterday %}
            Yesterday at {{ t | timestamp_custom('%H:%M') }}
          {%- elif d < n-midnight_week_ago %}
            {{ t | timestamp_custom('%A at %H:%M') }}
          {%- else %}
            {{ t | timestamp_local }}
          {%- endif %}
        {% else %}
          unknown
        {% endif %}
    # https://github.com/home-assistant/core/blob/dev/homeassistant/const.py#L571
    internet_speed_in:
      value_template: '{{ ((states.input_number.wan_traffic_delta_in.state  | float ) / 1000000 ) | round(3) }}'
      unit_of_measurement: 'Mbit/s'
    internet_speed_out:
      value_template: '{{ ((states.input_number.wan_traffic_delta_out.state | float ) / 1000000 ) | round(3) }}'
      unit_of_measurement: 'Mbit/s'
    internet_usage_in:
      value_template: "{{ ((states('sensor.snmp_wan_in')  | float ) / 1000000000 ) | round(3) }}"
      unit_of_measurement: 'GB'
    internet_usage_out:
      value_template: "{{ ((states('sensor.snmp_wan_out') | float ) / 1000000000 ) | round(3) }}"
      unit_of_measurement: 'GB'
    internet_round_trip_time_avg:
      value_template: "{{ state_attr('binary_sensor.internet', 'round_trip_time_avg') }}"
      unit_of_measurement: 'ms'
    internet_round_trip_time_mdev:
      value_template: "{{ state_attr('binary_sensor.internet', 'round_trip_time_mdev') }}"
      unit_of_measurement: 'ms'
    front_extender_round_trip_time_avg:
      value_template: "{{ state_attr('binary_sensor.front_extender', 'round_trip_time_avg') }}"
      unit_of_measurement: 'ms'
    front_extender_round_trip_time_mdev:
      value_template: "{{ state_attr('binary_sensor.front_extender', 'round_trip_time_mdev') }}"
      unit_of_measurement: 'ms'
    back_extender_round_trip_time_avg:
      value_template: "{{ state_attr('binary_sensor.back_extender', 'round_trip_time_avg') }}"
      unit_of_measurement: 'ms'
    back_extender_round_trip_time_mdev:
      value_template: "{{ state_attr('binary_sensor.back_extender', 'round_trip_time_mdev') }}"
      unit_of_measurement: 'ms'
    # https://companion.home-assistant.io/docs/core/sensors/
    pieter_activity_type:
      value_template: "{{ state_attr('sensor.ceres_activity', 'Types') | first }}"
      icon_template: "{{ state_attr('sensor.ceres_activity', 'icon') }}"
    pieter_activity_confidence:
      value_template: "{{ state_attr('sensor.ceres_activity', 'Confidence') }}"
      icon_template: >-
        {% if state_attr('sensor.ceres_activity', 'Confidence') == 'High' %}
          mdi:speedometer
        {% elif state_attr('sensor.ceres_activity', 'Confidence') == 'Medium' %}
          mdi:speedometer-medium
        {% elif state_attr('sensor.ceres_activity', 'Confidence') == 'Low' %}
          mdi:speedometer-slow
        {% else %}
          unknown
        {% endif %}
    monthly_power_consumption_forecast:
      unit_of_measurement: "kWh"
      value_template: >
        {% set now = now() %}
        {% set month = now.month %}
        {% set year = now.year %}
        {% set days = None %}
        {# feb: leap years #}
        {% if month == 2 and year is divisibleby 4 and not year is divisibleby 400 %}
          {% set days = 29 %}
        {# jan, mar, may, jul, aug, oct, dec #}
        {% elif month in [1,3,5,7,8,10,12] %}
          {% set days = 31 %}
        {# apr, jun, sep, nov #}
        {% elif month in [4,6,9,11] %}
          {% set days = 30 %}
        {# feb #}
        {% else %}
          {% set days = 28 %}
        {% endif %}
        {{ ((states('sensor.monthly_power_consumption') | int) / now.day * days) | round(3) }}
    last_backup:
      # relies on cronjob running on a sunday and a wednedsay
      device_class: timestamp
      value_template: >-
        {% set reversed_file_list = state_attr('sensor.home_assistant', 'file_list') | sort(reverse=True) %}
        {% set files_exist = (reversed_file_list | length) > 0 %}
        {% if (files_exist) %}
          {% set last_backup_dt = strptime(reversed_file_list[0] | regex_findall_index(find='\d{8}_\d{6}'),'%Y%m%d_%H%M%S') | as_local %}
          {{ last_backup_dt.isoformat() }}
        {% else %}
          unknown
        {% endif %}
      icon_template: >-
        {% set reversed_file_list = state_attr('sensor.home_assistant', 'file_list') | sort(reverse=True) %}
        {% set files_exist = (reversed_file_list | length) > 0 %}
        {% if (files_exist) %}
          {% set last_backup_dt = strptime(reversed_file_list[0] | regex_findall_index(find='\d{8}_\d{6}'),'%Y%m%d_%H%M%S') %}
          {% if ((utcnow().replace(tzinfo=None) - (last_backup_dt)).days > 4) %}
            mdi:file-alert-outline
          {% else %}
            mdi:file-outline
          {% endif %}
        {% else %}
          mdi:file-alert-outline
        {% endif %}
    home_assistant_server_battery_status:
      friendly_name: "Home Assistant Server Battery Status"
      device_class: battery
      value_template: >-
        {{ state_attr('sensor.home_assistant_server_battery', 'status') }}
      icon_template: >-
        {% set state = states('sensor.home_assistant_server_battery') | int %}
        {% set charging = "-charging" if states('sensor.home_assistant_server_battery_status') == "Charging" else "" %}
        {% set suffix = (state // 10) * 10 %}
        {# empty #}
        {% if suffix == 0 %}
          mdi:battery{{ charging }}-outline
        {# full #}
        {% elif suffix == 100 %}
          {# choose the right full battery #}
          {% if charging != "" %}
            mdi:battery-charging-100
          {% else %}
            mdi:battery
          {% endif %}
        {# everything in between #}
        {% else %}
          mdi:battery{{ charging }}-{{ suffix }}
        {% endif %}
    weather_forecast_conditions_tomorrow:
      friendly_name: "Weather Conditions Tomorrow"
      value_template: >-
        {{ state_attr('weather.openweathermap_daily', 'forecast')[0]['condition'] }}
      icon_template: >-
        {% if state_attr('weather.openweathermap_daily', 'forecast')[0]['condition'] == 'partlycloudy' %}
          mdi:weather-partly-cloudy
        {% else %}
          mdi:weather-{{ state_attr('weather.openweathermap_daily', 'forecast')[0]['condition'] }}
        {% endif %}
    weather_forecast_precipitation_tomorrow:
      friendly_name: "Weather Precipitation Tomorrow"
      value_template: >-
        {{ state_attr('weather.openweathermap_daily', 'forecast')[0]['precipitation'] }}
      icon_template: >-
        {% if state_attr('weather.openweathermap_daily', 'forecast')[0]['precipitation'] > 0 %}
          mdi:water
        {% else %}
          mdi:water-off
        {% endif %}
    outside_temperature:
      friendly_name: "Outside Temperature"
      device_class: temperature
      value_template: >-
        {{ state_attr('weather.openweathermap_daily', 'temperature') | float }}
      unit_of_measurement: "°C"
      icon_template: >-
        mdi:thermometer
    apple_tv_playing_hours_minutes:
      value_template: >
        {% set decimal_hours = states('sensor.apple_tv_playing') | float %}
        {% set hours = (decimal_hours - (decimal_hours % 1)) | int %}
        {% set minutes = ((decimal_hours % 1) * 60) | int %}
        {{ '%02i:%02i'%(hours, minutes) }}

- platform: sun2
  monitored_conditions:
    - daylight

- platform: snmp
  name: snmp_wan_in
  host: 192.168.0.1
  community: Router
  version: 2c
  baseoid: 1.3.6.1.2.1.2.2.1.10.26  # ifInOctets.26 / nas0_0
  unit_of_measurement: octets

- platform: snmp
  name: snmp_wan_out
  host: 192.168.0.1
  community: Router
  version: 2c
  baseoid: 1.3.6.1.2.1.2.2.1.16.26  # ifOutOctets.26 / nas0_0
  unit_of_measurement: octets

- platform: statistics
  name: 'Internet Traffic In'
  entity_id: sensor.internet_speed_in

- platform: statistics
  name: 'Internet Traffic Out'
  entity_id: sensor.internet_speed_out

- platform: filter
  name: google_travel_time_filtered
  entity_id: sensor.google_travel_time
  filters:
    filter: lowpass
    time_constant: 10
    precision: 0

- platform: filter
  name: ambient_temperature_filtered
  entity_id: sensor.conditions_temperature
  filters:
    filter: lowpass
    time_constant: 10
    precision: 1

- platform: worldclock
  name: cape_town
  time_zone: Africa/Johannesburg

- platform: worldclock
  name: san_francisco
  time_zone: America/Los_Angeles

- platform: worldclock
  name: london
  time_zone: Europe/London

- platform: worldclock
  name: sydney
  time_zone: Australia/Sydney

- platform: command_line
  name: internet_packet_loss
  command: 'ping -c 5 www.google.com | grep -o -P "(?<= )(\d+)(?=%)"'
  unit_of_measurement: "%"
  value_template: '{{ value | int }}'
  scan_interval: 180

- platform: command_line
  name: front_extender_packet_loss
  command: 'ping -c 5 front_extender | grep -o -P "(?<= )(\d+)(?=%)"'
  unit_of_measurement: "%"
  value_template: '{{ value | int }}'
  scan_interval: 30

- platform: command_line
  name: back_extender_packet_loss
  command: 'ping -c 5 back_extender | grep -o -P "(?<= )(\d+)(?=%)"'
  unit_of_measurement: "%"
  value_template: '{{ value | int }}'
  scan_interval: 30

- platform: command_line
  name: thor_disk_usage
  command: !secret thor_disk_usage_command
  unit_of_measurement: "%"
  value_template: '{{ value | int }}'
  scan_interval: 3600

- platform: integration
  name: "Total Electricity Consumption"
  source: sensor.current_energy
  method: left
  unit_time: min
  round: 3
  unit: "kWh"
  unit_prefix: k

# https://community.home-assistant.io/t/outdoor-illuminance-template-sensor/228581
# https://community.home-assistant.io/t/automations-to-turn-on-lights-based-on-actual-season/252830/19
# https://www.engineeringtoolbox.com/light-level-rooms-d_708.html
- platform: illuminance
  entity_id: weather.openweathermap_daily

- platform: mqtt
  name: MQTT Broker Received Messages (1min load)
  state_topic: $SYS/broker/load/messages/received/1min
  unit_of_measurement: 'messages/s'
  icon: mdi:email-receive-outline

- platform: mqtt
  name: MQTT Broker Sent Messages (1min load)
  state_topic: $SYS/broker/load/messages/sent/1min
  unit_of_measurement: 'messages/s'
  icon: mdi:email-send-outline

# used by the gallery panel
- platform: files
  folder: /home/homeassistant/.homeassistant/www/gallery/
  filter: 'camera.security_camera_*.jpg'
  name: security_camera_snapshots
  sort: date
  recursive: False

# used to sync files from tmp to the gallery
# alt: https://www.home-assistant.io/integrations/folder_watcher/
# then watch /home/homeassistant/.homeassistant/www/camera.security_camera_last.jpg
- platform: folder
  folder: /tmp/
  filter: 'camera.security_camera_*.jpg'

- platform: sql
  db_url: postgresql://@/homeassistant
  # Not needed when using recorder, because we already have a connection
  # https://community.home-assistant.io/t/calculate-home-assistant-v2-db-size-without-whitelisting-entire-config-dir/195808/2
  # https://www.home-assistant.io/integrations/sql/
  scan_interval: 10800  # 60*60*3 / every 3 hours
  queries:
    - name: DB size
      # This is the fastest solution, available since sqlite 3.16.
      # It’s the same info as returned by ".dbinfo" in the sqlite3 cmdline client.
      query: "SELECT (pg_database_size('homeassistant')/1024/1024) AS db_size;"
      column: "db_size"
      unit_of_measurement: "MiB"

# used to check backups
- platform: folder
  folder: /mnt/nas/Backups/home_assistant/
  filter: 'hass-config_*.zip'
  scan_interval: 3600

- platform: linux_battery
  name: Home Assistant Server Battery
  battery: 0
  system: linux
  scan_interval: 60

- platform: uptime
  name: Home Assistant Uptime

- platform: bitcoin
  currency: USD
  display_options:
    - exchangerate
    - trade_volume_btc

- platform: history_stats
  name: Apple TV Playing
  entity_id: media_player.living_room
  state: "playing"
  type: time
  start: "{{ now().replace(hour=0, minute=0, second=0) }}"
  end: "{{ now() }}"

- platform: openweathermap_all
  api_key: !secret open_weather_map_api_key
  latitude: !secret home_latitude
  longitude: !secret home_longitude

- platform: file
  file_path: /home/homeassistant/.homeassistant/downloads/latest_dam_levels.csv
  name: Wemmershoek Dam Level
  unit_of_measurement: "%"
  value_template: "{{ '%0.2f'| format(value.split(',')[3] | round(2)) }}"
  scan_interval: 86400

# scraping example if i even want to get data from http://www.dwa.gov.za/Hydrology/Weekly/ProvinceWeek.aspx?region=WC instead
# https://community.home-assistant.io/t/hours-of-daylight/59422/152
# fixed decimals formatting:
# https://stackoverflow.com/questions/12681036/is-there-a-direct-approach-to-format-numbers-in-jinja2/12681178
# https://support.sendwithus.com/jinja/formatting_numbers/
- platform: file
  file_path: /home/homeassistant/.homeassistant/downloads/latest_dam_levels.csv
  name: Steenbras Lower Dam Level
  unit_of_measurement: "%"
  value_template: "{{ '%0.2f'| format(value.split(',')[7] | round(2)) }}"
  scan_interval: 86400

- platform: file
  file_path: /home/homeassistant/.homeassistant/downloads/latest_dam_levels.csv
  name: Steenbras Upper Dam Level
  unit_of_measurement: "%"
  value_template: "{{ '%0.2f'| format(value.split(',')[11] | round(2)) }}"
  scan_interval: 86400

- platform: file
  file_path: /home/homeassistant/.homeassistant/downloads/latest_dam_levels.csv
  name: Voëlvlei Dam Level
  unit_of_measurement: "%"
  value_template: "{{ '%0.2f'| format(value.split(',')[15] | round(2)) }}"
  scan_interval: 86400

- platform: file
  file_path: /home/homeassistant/.homeassistant/downloads/latest_dam_levels.csv
  name: Theewaterskloof Dam Level
  unit_of_measurement: "%"
  value_template: "{{ '%0.2f'| format(value.split(',')[47] | round(2)) }}"
  scan_interval: 86400

- platform: file
  file_path: /home/homeassistant/.homeassistant/downloads/latest_dam_levels.csv
  name: Bergrivier Dam Level
  unit_of_measurement: "%"
  value_template: "{{ '%0.2f'| format(value.split(',')[51] | round(2)) }}"
  scan_interval: 86400

- platform: file
  file_path: /home/homeassistant/.homeassistant/downloads/latest_dam_levels.csv
  name: Total Dam Level
  unit_of_measurement: "%"
  value_template: "{{ '%0.2f'| format(value.split(',')[54] | round(2)) }}"
  scan_interval: 86400

- platform: file
  file_path: /home/homeassistant/.homeassistant/downloads/latest_dam_levels.csv
  name: Dam Levels Last Update
  value_template: "{{ strptime(value.split(',')[0], '%d-%b-%y').date() }}"
  scan_interval: 86400
