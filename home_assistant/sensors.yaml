- platform: time_date
  display_options:
    - 'time'
    - 'date'
    - 'date_time'
    - 'date_time_utc'
    - 'date_time_iso'
    - 'time_date'
    - 'time_utc'

- platform: bme280
  name: Ambient
  i2c_address: 0x77
  operation_mode: 2  # forced mode
  time_standby: 5
  oversampling_temperature: 1
  oversampling_pressure: 1
  oversampling_humidity: 1
  delta_temperature: -0.5
  monitored_conditions:
    - temperature
    - humidity
    - pressure
  scan_interval: 40

- platform: systemmonitor
  resources:
    - type: disk_use_percent
      arg: /
    - type: memory_use_percent
    - type: processor_use
    - type: load_1m
    - type: load_5m
    - type: load_15m
    - type: throughput_network_in
      arg: wlan0
    - type: throughput_network_out
      arg: wlan0
    - type: last_boot

- platform: command_line
  name: server_cpu_temp
  command: "cat /sys/class/thermal/thermal_zone0/temp"
  unit_of_measurement: "°C"
  value_template: '{{ value | multiply(0.001) | round(2)  }}'
  scan_interval: 60

- platform: template
  sensors:
    security_camera_last_clip:
      device_class: timestamp
      value_template: "{{ states('input_datetime.security_camera_last_clip') }}"
    security_camera_last_clip_relative:
      value_template: >
        {%- set _ = states('sensor.time') %}
        {%- set t = state_attr('input_datetime.security_camera_last_clip', 'timestamp') %}
        {%- if t != None %}
          {%- set n = now().timestamp() %}
          {%- set d = n-t %}
          {%- set midnight_today = as_timestamp(strptime(now().date() | string, "%Y-%m-%d")) %}
          {%- set midnight_yesterday = midnight_today - 86400 %}
          {%- set midnight_week_ago = midnight_today - 604800 %}
          {%- if d < 60 %}
            {{ d | int }} seconds ago
          {%- elif d >= 60 and d < 120 %}
            1 minute ago
          {%- elif d < 3600 %}
            {{ (d // 60) | int }} minutes ago
          {%- elif d < n-midnight_today %}
            Today at {{ t | timestamp_custom('%H:%M') }}
          {%- elif d < n-midnight_yesterday %}
            Yesterday at {{ t | timestamp_custom('%H:%M') }}
          {%- elif d < n-midnight_week_ago %}
            {{ t | timestamp_custom('%A at %H:%M') }}
          {%- else %}
            {{ t | timestamp_local }}
          {%- endif %}
        {% else %}
          unknown
        {% endif %}
    security_camera_last_snapshot:
      device_class: timestamp
      value_template: "{{ states('input_datetime.security_camera_last_snapshot') }}"
    security_camera_last_snapshot_relative:
      # the first line is a hack to avoid having to write an automation
      # - https://www.home-assistant.io/integrations/template/#working-without-entities
      # - https://community.home-assistant.io/t/heads-up-upcoming-breaking-change-in-the-template-integration/223715
      value_template: >
        {%- set _ = states('sensor.time') %}
        {%- set t = state_attr('input_datetime.security_camera_last_snapshot', 'timestamp') %}
        {%- if t != None %}
          {%- set n = now().timestamp() %}
          {%- set d = n-t %}
          {%- set midnight_today = as_timestamp(strptime(now().date() | string, "%Y-%m-%d")) %}
          {%- set midnight_yesterday = midnight_today - 86400 %}
          {%- set midnight_week_ago = midnight_today - 604800 %}
          {%- if d < 60 %}
            {{ d | int }} seconds ago
          {%- elif d >= 60 and d < 120 %}
            1 minute ago
          {%- elif d < 3600 %}
            {{ (d // 60) | int }} minutes ago
          {%- elif d < n-midnight_today %}
            Today at {{ t | timestamp_custom('%H:%M') }}
          {%- elif d < n-midnight_yesterday %}
            Yesterday at {{ t | timestamp_custom('%H:%M') }}
          {%- elif d < n-midnight_week_ago %}
            {{ t | timestamp_custom('%A at %H:%M') }}
          {%- else %}
            {{ t | timestamp_local }}
          {%- endif %}
        {% else %}
          unknown
        {% endif %}
    motion_detected_last_relative:
      value_template: >
        {%- set _ = states('sensor.time') %}
        {%- set t = state_attr('input_datetime.motion_detected_last', 'timestamp') %}
        {%- if t != None %}
          {%- set n = now().timestamp() %}
          {%- set d = n-t %}
          {%- set midnight_today = as_timestamp(strptime(now().date() | string, "%Y-%m-%d")) %}
          {%- set midnight_yesterday = midnight_today - 86400 %}
          {%- set midnight_week_ago = midnight_today - 604800 %}
          {%- if d < 60 %}
            {{ d | int }} seconds ago
          {%- elif d >= 60 and d < 120 %}
            1 minute ago
          {%- elif d < 3600 %}
            {{ (d // 60) | int }} minutes ago
          {%- elif d < n-midnight_today %}
            Today at {{ t | timestamp_custom('%H:%M') }}
          {%- elif d < n-midnight_yesterday %}
            Yesterday at {{ t | timestamp_custom('%H:%M') }}
          {%- elif d < n-midnight_week_ago %}
            {{ t | timestamp_custom('%A at %H:%M') }}
          {%- else %}
            {{ t | timestamp_local }}
          {%- endif %}
        {% else %}
          unknown
        {% endif %}
    internet_speed_in:
      value_template: '{{ ((states.input_number.wan_traffic_delta_in.state  | float ) / 1000000 ) | round(3) }}'
      unit_of_measurement: 'Mbps'
    internet_speed_out:
      value_template: '{{ ((states.input_number.wan_traffic_delta_out.state | float ) / 1000000 ) | round(3) }}'
      unit_of_measurement: 'Mbps'
    internet_usage_in:
      value_template: "{{ ((states('sensor.snmp_wan_in')  | float ) / 1000000000 ) | round(3) }}"
      unit_of_measurement: 'GB'
    internet_usage_out:
      value_template: "{{ ((states('sensor.snmp_wan_out') | float ) / 1000000000 ) | round(3) }}"
      unit_of_measurement: 'GB'
    internet_round_trip_time_avg:
      value_template: "{{ state_attr('binary_sensor.internet', 'round_trip_time_avg') }}"
      unit_of_measurement: 'ms'
    internet_round_trip_time_mdev:
      value_template: "{{ state_attr('binary_sensor.internet', 'round_trip_time_mdev') }}"
      unit_of_measurement: 'ms'
    # https://companion.home-assistant.io/docs/core/sensors/
    pieter_activity_type:
      value_template: "{{ state_attr('sensor.ceres_activity', 'Types') | first }}"
      icon_template: "{{ state_attr('sensor.ceres_activity', 'icon') }}"
    pieter_activity_confidence:
      value_template: "{{ state_attr('sensor.ceres_activity', 'Confidence') }}"
      icon_template: >-
        {% if state_attr('sensor.ceres_activity', 'Confidence') == 'High' %}
          mdi:speedometer
        {% elif state_attr('sensor.ceres_activity', 'Confidence') == 'Medium' %}
          mdi:speedometer-medium
        {% elif state_attr('sensor.ceres_activity', 'Confidence') == 'Low' %}
          mdi:speedometer-slow
        {% else %}
          None
        {% endif %}
    monthly_power_consumption_forecast:
      unit_of_measurement: "kWh"
      value_template: >
        {% set now = now() %}
        {% set month = now.month %}
        {% set year = now.year %}
        {% set days = None %}
        {# feb: leap years #}
        {% if month == 2 and year is divisibleby 4 and not year is divisibleby 400 %}
          {% set days = 29 %}
        {# jan, mar, may, jul, aug, oct, dec #}
        {% elif month in [1,3,5,7,8,10,12] %}
          {% set days = 31 %}
        {# apr, jun, sep, nov #}
        {% elif month in [4,6,9,11] %}
          {% set days = 30 %}
        {# feb #}
        {% else %}
          {% set days = 28 %}
        {% endif %}
        {{ ((states('sensor.monthly_power_consumption') | int) / now.day * days) | round(3) }}

- platform: snmp
  name: snmp_wan_in
  host: 192.168.0.1
  community: Router
  version: 2c
  baseoid: 1.3.6.1.2.1.2.2.1.10.26  # ifInOctets.26 / nas0_0
  unit_of_measurement: octets

- platform: snmp
  name: snmp_wan_out
  host: 192.168.0.1
  community: Router
  version: 2c
  baseoid: 1.3.6.1.2.1.2.2.1.16.26  # ifOutOctets.26 / nas0_0
  unit_of_measurement: octets

- platform: statistics
  name: 'Internet Traffic In'
  entity_id: sensor.internet_speed_in

- platform: statistics
  name: 'Internet Traffic Out'
  entity_id: sensor.internet_speed_out

- platform: google_travel_time
  api_key: !secret google_maps_api_key
  origin: zone.pieter_work_cape_town
  destination: zone.home
  options:
    mode: driving
    departure_time: now

- platform: filter
  name: google_travel_time_filtered
  entity_id: sensor.google_travel_time_driving
  filters:
    filter: lowpass
    time_constant: 10
    precision: 0

- platform: filter
  name: ambient_temperature_filtered
  entity_id: sensor.ambient_temperature
  filters:
    filter: lowpass
    time_constant: 10
    precision: 1

- platform: worldclock
  name: cape_town
  time_zone: Africa/Johannesburg

- platform: worldclock
  name: san_francisco
  time_zone: America/Los_Angeles

- platform: worldclock
  name: london
  time_zone: Europe/London

- platform: command_line
  name: internet_packet_loss
  command: 'ping -c 5 www.google.com | grep -o -P "(?<= )(\d+)(?=%)"'
  unit_of_measurement: "%"
  value_template: '{{ value | int }}'
  scan_interval: 180

- platform: command_line
  name: thor_disk_usage
  command: !secret thor_disk_usage_command
  unit_of_measurement: "%"
  value_template: '{{ value | int }}'
  scan_interval: 3600

- platform: integration
  name: "Total Electricity Consumption"
  source: sensor.current_energy
  round: 3
  unit_prefix: k
  unit_time: min
  unit: "kWh"

- platform: rest
  resource_template: 'http://weather.sun.ac.za/api/getSonbesie.php?start={{ utcnow() | as_timestamp | int - 300 }}&end={{ utcnow() | as_timestamp | int }}'
  method: GET
  name: sun_illuminance
  device_class: illuminance
  # we're using the GHI (global horizontal irradiance here)
  # https://www.ammonit.com/en/wind-solar-wissen/solarmessung
  # https://www.nrel.gov/grid/solar-resource/solar-glossary.html#globalhorizontalradiation
  # GHI = DHI + DNI · cos (θ) (where θ is the solar zenith angle)
  # The total amount of radiation received from above by a horizontal surface. This value includes both Direct Normal Irradiation (DNI) and Diffuse Horizontal Irradiation (DHI).
  # https://physics.stackexchange.com/questions/135618/rm-lux-and-w-m2-relationship
  value_template: '{{ value_json[-1].SunWM_Avg | float | multiply(1/0.0079) }}'
  unit_of_measurement: "lx"
  scan_interval: 300
  timeout: 15

- platform: mqtt
  name: MQTT Broker Received Messages (1min load)
  state_topic: $SYS/broker/load/messages/received/1min
  unit_of_measurement: 'messages/s'
  icon: mdi:email-receive-outline

- platform: mqtt
  name: MQTT Broker Sent Messages (1min load)
  state_topic: $SYS/broker/load/messages/sent/1min
  unit_of_measurement: 'messages/s'
  icon: mdi:email-send-outline

# used by the gallery panel
- platform: files
  folder: /home/homeassistant/.homeassistant/www/gallery/
  filter: 'camera.security_camera_*.jpg'
  name: security_camera_snapshots
  sort: date
  recursive: False

# used to sync files from tmp to the gallery
# alt: https://www.home-assistant.io/integrations/folder_watcher/
# then watch /home/homeassistant/.homeassistant/www/camera.security_camera_last.jpg
- platform: folder
  folder: /tmp/
  filter: 'camera.security_camera_*.jpg'

- platform: sql
  # Not needed when using recorder, because we already have a connection
  # https://community.home-assistant.io/t/calculate-home-assistant-v2-db-size-without-whitelisting-entire-config-dir/195808/2
  # https://www.home-assistant.io/integrations/sql/
  scan_interval: 10800  # 60*60*3 / every 3 hours
  queries:
    - name: DB size
      # This is the fastest solution, available since sqlite 3.16.
      # It’s the same info as returned by ".dbinfo" in the sqlite3 cmdline client.
      query: 'SELECT ROUND(page_count * page_size / 1024 / 1024, 1) as size FROM pragma_page_count(), pragma_page_size();'
      column: 'size'
      unit_of_measurement: 'MiB'
