title: Home
background: var(--background-image)
views:
  - !include ui-lovelace/main.yaml
  - !include ui-lovelace/resources.yaml
  - !include ui-lovelace/environment.yaml
  - !include ui-lovelace/irrigation.yaml
  - !include ui-lovelace/baby.yaml
  - !include ui-lovelace/entertainment.yaml
  - !include ui-lovelace/internet.yaml
  - !include ui-lovelace/security.yaml
  - !include ui-lovelace/gallery.yaml
  # - !include ui-lovelace/floorplan.yaml
  - !include ui-lovelace/devices.yaml
  - !include ui-lovelace/test.yaml
button_card_templates:
  clock:
    variables:
      timezone: "Continent/City"
    show_name: true
    show_state: true
    show_icon: true
    show_label: true
    label: >
      [[[
        return (new Date()).toLocaleDateString("en-ZA", {timeZone: variables.timezone});
      ]]]
    icon: >
      [[[
        var hourNamesIndexed = ["twelve", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten", "eleven", "twelve"];
        var timeParts = (new Date()).toLocaleTimeString("en-ZA", {timeZone: variables.timezone, hour12: true}).split(':');
        var hour = parseInt(timeParts[0]);
        var minute = parseInt(timeParts[1]);
        return "mdi:clock-time-" + hourNamesIndexed[hour] + "-outline";
      ]]]
    color: var(--paper-item-icon-color)
    styles:
      grid:
        - grid-template-areas: '"n" "i" "s" "l"'
      name:
        - color: var(--secondary-text-color)
        - font-size: 1rem
      state:
        - color: var(--secondary-text-color)
        - font-size: 0.8rem
      label:
        - color: var(--secondary-text-color)
        - font-size: 0.8rem
    tap_action: none
  # https://github.com/custom-cards/button-card/issues/635#issuecomment-1347826414
  # https://github.com/home-assistant/frontend/blob/dev/src/resources/ha-style.ts
  # https://www.home-assistant.io/integrations/frontend/
  # https://community.home-assistant.io/t/2022-12-it-does-matter/499441/94
  old_colors:
    styles:
      card:
        - '--state-icon-active-color': var(--state-active-color)
        # --paper-item-icon-color still works for off (but not the icon-active one below)
        - '--paper-item-icon-active-color': var(--state-icon-active-color)
  basic:
    template:
      - old_colors
    size: 20%
    show_label: true
    # this is just to create a phantom space to have it align better with other buttons on the same row
    label: >
      [[[
        return '_';
      ]]]
    styles:
      name:
        - color: var(--paper-item-icon-color)
      label:
        - color: var(--primary-background-color)
      card:
        - font-size: 12px
      grid:
        - grid-template-areas: '"l" "i" "n"'
        - grid-template-rows: min-content 1fr min-content
        - grid-template-columns: 1fr
    state:
      - value: 'unavailable'
        styles:
          icon:
            - color: var(--state-unavailable-color)
    tap_action:
      action: toggle
      haptic: light
    hold_action:
      action: more-info
      haptic: selection
  light_with_timer:
    template:
      - old_colors
    triggers_update: all
    size: 20%
    styles:
      name:
        - color: var(--paper-item-icon-color)
      label:
        - color: var(--primary-background-color)
      card:
        - font-size: 12px
      grid:
        - grid-template-areas: '"t" "i" "n"'
        - grid-template-rows: min-content 1fr min-content
        - grid-template-columns: 1fr
    custom_fields:
      t:
        card:
          type: custom:button-card
          name: Timer
          entity: "[[[ return entity.entity_id.replace('light.', 'timer.') + '_timer'; ]]]"
          show_name: false
          show_icon: false
          show_state: true
          styles:
            card:
              - font-size: 12px
              - box-shadow: none
              - border: none
            state:
              - margin-top: -1ex
              - margin-bottom: -1ex
              - color: >
                  [[[
                    if (states[`${entity.entity_id}`.replace("light.", "timer.") + "_timer"].state == "idle")
                      return "var(--paper-item-icon-color)";
                    else
                      return "var(--custom-color-red)";
                  ]]]
          tap_action:
            action: none
          hold_action:
            action: none
    state:
      - value: 'unavailable'
        styles:
          icon:
            - color: var(--state-unavailable-color)
    tap_action:
      action: toggle
      haptic: light
    double_tap_action:
      action: call-service
      haptic: medium
      service: script.turn_on_light_and_timer
      service_data:
        light: "[[[ return entity.entity_id; ]]]"
        duration: "00:03:00"
    hold_action:
      action: more-info
      haptic: selection
  rgb_light:
    template:
      - old_colors
    variables:
      above_threshold: |
        [[[
          let threshold = 255;
          if (entity.state === "on" && entity.attributes.rgb_color) {
            let rgb_sum = entity.attributes.rgb_color.reduce((a, b) => a + b, 0);
            return rgb_sum >= 3 * threshold;
          }
          return false;
        ]]]
    size: 20%
    show_label: true
    label: >
      [[[
        var b = entity.attributes.brightness;
        return parseInt(b ? (b/255)*100 : "0") + "%";
      ]]]
    styles:
      name:
        - color: var(--paper-item-icon-color)
      label:
        - color: var(--paper-item-icon-color)
        - padding-left: 1ex
      # https://community.home-assistant.io/t/lovelace-button-card/65981/4599
      # https://community.home-assistant.io/t/lovelace-button-card/65981/4788
      icon:
        - color: |
            [[[
              if (variables.above_threshold) {  // above threshold == white here
                return "var(--paper-item-icon-active-color)";
              } else if (entity.state === "on") {
                return "var(--button-card-light-color)";  // already includes brightness/color support
              } else if (entity.state === "off") {  // off
                return "var(--paper-item-icon-color)";
              } else { // unavailable
                return "var(--primary-text-color)";
              }
            ]]]
        - filter: "[[[ return variables.above_threshold ? `brightness(${(entity.attributes.brightness/255 + 1)/2})` : null; ]]]"
      card:
        - font-size: 12px
      grid:
        - grid-template-areas: '"l" "i" "n"'
        - grid-template-rows: min-content 1fr min-content
        - grid-template-columns: 1fr
    state:
      - value: 'unavailable'
        styles:
          icon:
            - color: var(--state-unavailable-color)
    tap_action:
      haptic: light
      action: call-service
      service: script.toggle_light
      service_data:
        light: "[[[ return entity.entity_id; ]]]"
        profile: "[[[ return variables.profile; ]]]"
    double_tap_action:
      action: call-service
      haptic: medium
      service: script.force_on_smart_bulb
      service_data:
        light: "[[[ return entity.entity_id; ]]]"
    hold_action:
      action: more-info
      haptic: selection
  rgb_light_with_timer:
    template:
      - old_colors
    triggers_update: all
    styles:
      grid:
        - grid-template-areas: '"t s l" "i i i" "n n n"'
        - grid-template-rows: min-content 1fr min-content
        - grid-template-columns: 1fr min-content 1fr
      name:
        - margin-top: -1px
        - margin-bottom: 0px
      label:
        - align-self: middle
        - justify-self: start
        - padding-right: 1ex
      custom_fields:
        s:
          - color: var(--paper-item-icon-color)
        t:
          - align-self: middle
          - justify-self: end
          - padding-right: 1ex
    custom_fields:
      s: >
        [[[ return '/'; ]]]
      t:
        card:
          type: custom:button-card
          name: Timer
          entity: "[[[ return entity.entity_id.replace('light.', 'timer.') + '_timer'; ]]]"
          show_name: false
          show_icon: false
          show_state: true
          styles:
            card:
              - margin-bottom: -1px
              - font-size: 12px
              - box-shadow: none
              - border: none
            state:
              - color: >
                  [[[
                    if (states[`${entity.entity_id}`.replace("light.", "timer.") + "_timer"].state == "idle")
                      return "var(--paper-item-icon-color)";
                    else
                      return "var(--custom-color-red)";
                  ]]]
          tap_action:
            action: none
          hold_action:
            action: none
    state:
      - value: 'unavailable'
        styles:
          icon:
            - color: var(--state-unavailable-color)
    tap_action:
      haptic: light
      action: call-service
      service: script.toggle_light
      service_data:
        light: "[[[ return entity.entity_id; ]]]"
        profile: "[[[ return typeof(variables.profile) !== 'undefined' ? variables.profile : 'dim'; ]]]"
    double_tap_action:
      haptic: medium
      action: call-service
      service: script.toggle_light
      service_data:
        light: "[[[ return entity.entity_id; ]]]"
        profile: security
    hold_action:
      haptic: selection
      action: more-info
  basic_small:
    color: "off"
    size: 25%
    styles:
      card:
        - font-size: 12px
      icon:
        - color: var(--paper-item-icon-color)
        # https://community.home-assistant.io/t/lovelace-button-card/65981/791
        # https://community.home-assistant.io/t/lovelace-button-card/65981/798
        # https://community.home-assistant.io/t/fun-with-custom-button-card/238450
        - padding-right: 5px
        - padding-left: 70%
      name:
        - color: var(--paper-item-icon-color)
        - justify-self: start
      grid:
        - grid-template-areas: '"i n"'
        - grid-template-rows: 1fr
        - grid-template-columns: 1fr 1fr  # 4fr 5fr
  light_preset:
    tap_action:
      action: call-service
      haptic: light
      service: light.turn_on
      service_data:
        entity_id: entity
        profile: "[[[ return variables.profile; ]]]"
  cover_with_timer:
    template:
      - old_colors
    triggers_update: all
    size: 20%
    show_name: true
    color_type: icon
    color: var(--paper-item-icon-color)
    custom_fields:
      t:
        card:
          type: custom:button-card
          name: Timer
          entity: "[[[ return entity.entity_id.replace('cover.', 'timer.') + '_timer'; ]]]"
          show_name: false
          show_icon: false
          show_state: true
          styles:
            card:
              - font-size: 12px
              - box-shadow: none
              - border: none
            state:
              - margin-top: -1ex
              - margin-bottom: -1ex
              - color: >
                  [[[
                    if (states[`${entity.entity_id}`.replace("cover.", "timer.") + "_timer"].state == "idle")
                      return "var(--paper-item-icon-color)";
                    else
                      return "var(--custom-color-red)";
                  ]]]
          tap_action:
            action: none
          hold_action:
            action: none
    styles:
      name:
        - color: var(--paper-item-icon-color)
      card:
        - font-size: 12px
      grid:
        - grid-template-areas: '"t" "i" "n"'
        - grid-template-rows: min-content 1fr min-content
        - grid-template-columns: 1fr
    state:
      - operator: template
        value: >
          [[[
            var alert_entity_id = entity.entity_id.replace("cover.", "binary_sensor.") + "_alert";
            return states[alert_entity_id].state == "on";
          ]]]
        color: var(--custom-color-red)
      - value: 'unavailable'
        styles:
          icon:
            - color: var(--state-unavailable-color)
    tap_action:
      action: toggle
      haptic: light
    hold_action:
      action: call-service
      haptic: heavy
      service: timer.start
      service_data:
        entity_id: "[[[ return entity.entity_id.replace('cover.', 'timer.') + '_timer'; ]]]"
        duration: "00:10:00"
  cover_with_occupancy:
    template:
      - old_colors
    triggers_update: all
    state:
      - operator: template
        value: >
          [[[
            return states[`${variables.occupancy_entity}`].state == "on";
          ]]]
        color: var(--state-binary_sensor-active-color)
      - operator: template
        value: >
          [[[
            return states[`${variables.occupancy_entity}`].state == "off";
          ]]]
        color: var(--paper-item-icon-color)
      - value: 'unavailable'
        styles:
          icon:
            - color: var(--state-unavailable-color)
    double_tap_action:
      action: call-service
      haptic: medium
      service: script.close_garage_door_and_main_gate
      service_data:
        garage_door: "[[[ return entity.entity_id; ]]]"
  devices_common:
    state:
      - operator: template
        value: >
          [[[
            return entity.state == "on";
          ]]]
        color: var(--state-binary_sensor-active-color)
      - operator: template
        value: >
          [[[
            return entity.state == "off";
          ]]]
        color: var(--paper-item-icon-color)
      - value: 'unavailable'
        styles:
          icon:
            - color: var(--state-unavailable-color)
  shutdown:
    template:
      - devices_common
    name: "[[[ return entity.attributes.friendly_name; ]]]"
    size: 30%
    styles:
      name:
        - color: var(--paper-item-icon-color)
      card:
        - font-size: 12px
    hold_action:
      action: call-service
      haptic: heavy
      service: script.shutdown_remote_host
      service_data:
        name: "[[[ return entity.attributes.friendly_name; ]]]"
        host: "[[[ return entity.attributes.friendly_name.toLowerCase(); ]]]"  # must match .ssh/config
      confirmation:
        text: "[[[ return `Are you sure you want to shut down ${entity.attributes.friendly_name}?` ]]]"
  restart:
    template:
      - devices_common
    name: "[[[ return variables.name; ]]]"
    size: 20%
    styles:
      name:
        - color: var(--paper-item-icon-color)
      card:
        - font-size: 12px
    double_tap_action:
      action: call-service
      haptic: medium
      service: switch.turn_on
      service_data:
        entity_id: "[[[ return variables.switch_entity; ]]]"
      confirmation:
        text: "[[[ return `Are you sure you want to restart the ${variables.name.toLowerCase()} device?`; ]]]"
  remote:
    template:
      - old_colors
    variables:
      selection: "Remote State"
    entity: input_select.selected_remote
    name: "[[[ return variables.selection; ]]]"
    size: 50%
    color_type: icon
    styles:
      name:
        - color: var(--paper-item-icon-color)
      label:
        - color: var(--paper-item-icon-color)
        - padding-left: 1ex
      card:
        - font-size: 12px
      icon:
        - color: |
            [[[
              if (entity.state == variables.selection) {
                return "var(--paper-item-icon-active-color)";
              } else  {
                return "var(--paper-item-icon-color)";
              }
            ]]]
    tap_action:
      action: call-service
      haptic: light
      service: input_select.select_option
      service_data:
        entity_id: input_select.selected_remote
        option: "[[[ return variables.selection; ]]]"
  pollen:
    size: 20%
    show_entity_picture: true
    color_type: card
    show_label: true
    label: >
      [[[
        return entity.attributes.label;
      ]]]
    styles:
      name:
        - color: var(--primary-background-color)
      icon:
        - color: var(--primary-background-color)
      label:
        - color: var(--primary-background-color)
      grid:
        - grid-template-areas: '"n" "i" "l"'
      card:
        - font-size: 12px
    state:
      - value: 1
        color: "#40b100"
      - value: 2
        color: "#ffe500"
      - value: 3
        color: "#ffa800"
      - value: 4
        color: "#ff5800"
      - value: 5
        color: "#aa0000"
